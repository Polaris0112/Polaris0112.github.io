[{"content":"Peer2profit 简介 Peer2Profit（简称为p2pr）是一款可以利用你的闲置网络带宽赚钱的平台，支持包括Windows、MacOS、Linux、iOS、Android 等等几乎所有平台。 我们平常使用的网络其实并不会用完所有的流量和带宽，Peer2Profit 就可以帮我们利用好这一部分资源，并且根据流量给予我们一定的奖励。\n注册 注册地址\n目前新注册没有激励计划\n支持平台 Windows / Google Play / AppGallery / Android / Linux / MacOS / Docker\n提现方式 有很多种，主要是电子钱包还有加密货币两个大种类，至少2美元才能提现\n流量单价 价格不算高，如果是手机移动网络的IP会比较高，其他网络类型的IP个人感觉单价较低\n部署 下载信息更新于2023-01-20\nWindows 安装压缩包地址\nGoogle Play 商店地址\nAppGallery 商店地址\nAndroid APK 安装包APK下载地址\nLinux (Deb) 安装包deb下载地址\nMacOS 安装包DMG下载地址\nDocker Docker Hub地址\n运行命令\n1  docker run -d --restart unless-stopped -e P2P_EMAIL=\u0026lt;change_to_email\u0026gt; --name peer2profit peer2profit/peer2profit_linux:latest   修改内容：\n \u0026lt;change_to_email\u0026gt; ：修改为 peer2profit 你账号对应的邮箱地址  docker logs -f peer2profit 显示的日志为这样程序就跑起来了，在 My Network 页面可以看到对应节点已经在线。\n结束语 Peer2profit也是一个不限制IP，无论家宽还是服务器IP都能参与的挂机项目，实测之后发现是海外服务器IP反而跑的流量会比国内家宽要高，可能还是与网络因素有关，不过整体的流量单价较低，所以相对其他网赚平台的话，他收益速度慢一些和收益额相对会少一些。\n其他网赚文章：\n 网络流量被动收入之Honeygain Docker部署教程 网络流量被动收入之Traffmonetizer Docker部署教程 网络流量被动收入之Packetstream Docker部署教程 网络流量被动收入之Bitping Docker部署教程 网络流量被动收入之Iproyal Docker部署教程 网络流量被动收入之Earnapp Docker部署教程  ","date":"2023-01-20T00:00:00Z","image":"https://yysy.site/p/passive-income-peer2profit/Passive-Income-Peer2profit-Front_hufcf2301eede78afda1d33c6ccae7086f_39748_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/passive-income-peer2profit/","title":"网络流量被动收入之Peer2profit Docker部署教程"},{"content":"Bitping 简介 Bitping是一款的\u0026quot;Share to Earn\u0026quot;分享网路节点挂机项目，总部在新加坡，公司规模不大，目前只有员工4个人，算是一个新兴挂机项目。 Bitping提供「测试、监控、防护」三种网路服务给终端客户。而身为用户的我们则透过下载Bitping的Nodes节点，提供自身的大数据及设备算力资源给公司运用，让他们可以借力使力赚钱，然后再分一些利润给我们。\n注册 注册地址\n目前注册应该没有新人优惠，因为项目还算是比较新\n支持平台 部分地区流量单价 截取于2023-01-18\n节点部署 Windows Windows压缩安装包\nLinux Linux-ZIP压缩包\n树莓派 树莓派32位-ZIP压缩包\n容器Docker 1 2  ## 运行 docker run -it --name bitping --mount type=bind,source=\u0026#34;$HOME/.bitping/\u0026#34;,target=/root/.bitping bitping/bitping-node:latest   运行后会输出几个日志，然后让你填写账号密码，填写完成后就能正常运作。不过此时容器还在前台工作，我们要先Ctrl+C退出容器，然后重新docker start bitping这样容器就能在后台运行了，也不用再次输入上好密码，因为输入一次，只要容器不删掉（停掉没问题）那密码是会记录的\nMacOS MacOS压缩包\n除了Docker部署以外，其他下载都是压缩包。解压之后是一个release文件夹，然后进入终端（windows系统使用powershell）然后进入release目录，首先运行（以Linux系统为例，其他系统要以实际文件运行\n1 2 3 4 5 6  ## Linux ./bitping-node-amd64-linux --server ## 然后输入bitping的账号密码，登陆成功后Ctrl+C退出 ## 最后执行多一次 nohup ./bitping-node-amd64-linux --server \u0026amp; # 就可以放到后台跑了   正常运行 有警告信息不用理会，主要是看完成的任务数来发放奖励的。\n结束语 Bitping的好处在于能加入服务器IP，把闲置的服务器资源都利用上，而且部署还算简单，直接一个二进制文件就完事，关于收益速度目前我好几个服务器都在跑，收益一个月大概一刀左右\n其他网赚介绍文章：\n 网络流量被动收入之Honeygain Docker部署教程 网络流量被动收入之Traffmonetizer Docker部署教程 网络流量被动收入之Packetstream Docker部署教程 网络流量被动收入之Iproyal Docker部署教程 网络流量被动收入之Peer2profit Docker部署教程 网络流量被动收入之Earnapp Docker部署教程  ","date":"2023-01-19T00:00:00Z","image":"https://yysy.site/p/passive-income-bitping/Passive-Income-Bitping-Front_hufcf2301eede78afda1d33c6ccae7086f_42537_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/passive-income-bitping/","title":"网络流量被动收入之Bitping Docker部署教程"},{"content":"Iproyal 是什么 IPRoyal Pawns，一家美国正规的IP代理公司，用户通过出售闲置带宽赚取佣金，从业务架构上分析合情合理，因为IPRoy需要P地址提供给客户使用，必须收集大量IP资源，对于用户来说，反正闲置带宽实属浪费，不如有效利用转化成真金白银。\n注册 注册地址，新用户注册送1美元的资金\n限制  必须家宽IP，不能是服务器IP 提现金额是5美元（新注册赠送1美元） 提现方式是BitCoin、Paypal  收益 1美元/5GB\n节点部署 目前（2023-01-19）平台支持的有Windows、MacOS、Android、IOS、Linux\nWindows 下载地址\nMacOS 下载地址\n运行后结果\nGoogle Play 商店地址\nAndroid APK 下载地址\nIOS 商店地址\nLinux uname -a 命令查看当前系统架构，确认好系统架构后按照对应选择下载二进制文件\nLinux aarch64\nLinux ARM v7l\n[Linux ARM v6l][https://download.iproyal.com/pawns-cli/latest/linux_armv6l/pawns-cli]\nLinux ARM v5l\nLinux i386\nLinux x86_64\n启动命令\n1  ./pawns-cli -email=\u0026lt;change_to_email\u0026gt; -password=\u0026lt;change_to_password\u0026gt; -device-name=\u0026lt;change_to_device_name\u0026gt; -accept-tos   修改地方\n \u0026lt;change_to_email\u0026gt; ： 改成对应账号邮箱 \u0026lt;change_to_password\u0026gt; ：改成对应账号密码 \u0026lt;change_to_device_name\u0026gt; ：自定义设备名，标记用的  运行后等待几分钟，在Dashboard界面会看到已经激活的设备。\n结束语 IProyal缺点还是仅限家宽IP，不能使用服务器IP。优点是支持平台多，而且有在线客服能问问题。由于笔者最近才加入，国内IP会偶尔请求API失效导致节点失联。而且没有每日统计流量还有每个节点的流量，只能通过每天的收入进度，大约估计收益速度还是可观的。反正节点越多，肯定就收益越快。其他网赚文章：\n  网络流量被动收入之Honeygain Docker部署教程\n  网络流量被动收入之Traffmonetizer Docker部署教程\n  网络流量被动收入之Packetstream Docker部署教程\n  网络流量被动收入之Bitping Docker部署教程\n  网络流量被动收入之Peer2profit Docker部署教程\n  网络流量被动收入之Earnapp Docker部署教程\n  ","date":"2023-01-19T00:00:00Z","image":"https://yysy.site/p/passive-income-iproyal/Passive-Income-Iproyal-Front_hufcf2301eede78afda1d33c6ccae7086f_47849_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/passive-income-iproyal/","title":"网络流量被动收入之Iproyal Docker部署教程"},{"content":"Packetstream 简介 PacketStream是一个成立于2018年的P2P点对点代理网络平台，允许用户将自己的闲置带宽进行共享以获得相应的报酬，此外可以让客户从共享者共享的IP地址进行网络访问，总的来说PacketStream就是一个流量买卖平台。\nPacketStream的运作原理是将共享者与客户连接起来，通过将你共享的带宽以更高的价格出售给想使用你的IP地址的人,而客户愿意付费从你的 IP 地址访问互联网，主要的原因有很多种：\n 访问受地区限制的内容（例如Netflix） 不想暴露自己的网络信息 进行网络信息的爬取  注册 目前新用户注册可以免费获得5美元的额度，注册地址。\n接下来再用节点挂机跑流量多5美元即可出金，出金方式目前知道的有Paypal、BTC、Payoneer，官方到账时间宣称是48小时，最低提现门槛是10美元。\nPacketstream 收益 官网上显示的收入如下图，我们身份是左边，作为共享带宽的一方，所以是0.1美元/Gb，单价还算较高。\n提现界面也有相关字段，说会收3%的平台费，目前看到提现方式只有通过Paypal邮箱进行提取。\nPacketstream 支持平台 目前Packetstream支持三个平台，分别是MacOS、Windows（64位）还有Linux。\nMacOS 部署 [dmg下载地址])(https://s3-us-west-2.amazonaws.com/packetstream-releases/latest/PacketStream.dmg)\nWIndows 部署 exe下载地址\nLinux 部署 1 2  sudo docker rmi packetstream/psclient; sudo docker run -d --restart=always -e CID=4EBX --name psclient packetstream/psclient:latest sudo docker run -d --restart=always --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --include-stopped --include-restarting --revive-stopped --interval 60 psclient   不过亲测，其实打开watchtower也影响不大，直接一个·pslicnet`容器即可，因为命令行已经上了少补。\n结束语 该厂商缺点是需要家宽IP地址，服务器地址无法使用。另外部署中那个watchtower初步判断只是一个守护进程，但是那个守护进程貌似消耗资源有点高（在我这边）所以我只是保留了psclient的容器。以下是兑现截图和dashboard部分截图。另外，如果发邮件去他们support其实也有回应的，不至于没反馈，这点还不错。\n其他网赚介绍文章：\n  网络流量被动收入之Honeygain Docker部署教程\n  网络流量被动收入之Traffmonetizer Docker部署教程\n  网络流量被动收入之Bitping Docker部署教程\n  网络流量被动收入之Iproyal Docker部署教程\n  网络流量被动收入之Peer2profit Docker部署教程\n  网络流量被动收入之Peer2profit Docker部署教程\n  网络流量被动收入之Earnapp Docker部署教程\n  ","date":"2023-01-18T00:00:00Z","image":"https://yysy.site/p/passive-income-packetstream/Passive-Income-Packetstream-Front_hufcf2301eede78afda1d33c6ccae7086f_54833_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/passive-income-packetstream/","title":"网络流量被动收入之Packetstream Docker部署教程"},{"content":"Traffmonetizer 是什么 Traffmonetizer是一款欧洲爱沙尼亚的流量挂机项目，跟Honeygain、Peer2profit等同一类，推出后已在不少国外论坛中介绍。 Traffmonetizer目前支持Windows、Android、MacOS、Docker平台\nTraffmonetizer可以同一个帐户连结无限设备，适合多部装置同时操作。使用者须在挂机装置中输入官方发给的\u0026quot;Token\u0026quot;作为识别，不像其他挂机项目要输入注册电邮方式不同，运作上反而比较简便。\n注册 目前新用户注册可以免费获得5美元的额度，注册地址。\n接下来再用节点挂机跑流量多5美元即可出金，出金方式目前知道的有Paypal、BTC、Payoneer，官方到账时间宣称是48小时，最低提现门槛是10美元。\nTraffmonetizer 优缺点 优点  容器部署方便，简单快捷 不需要局限家宽IP，服务器IP也可以，建议非国内IP，跑的流量会更高 流量单价不算高，1美元/10GB，但是分配的流量还算挺多  缺点  仅支持4个平台(Windows/MacOS/Android/Docker)，暂时未有树莓派或者linux等资源较少的设备支持 日志不清晰，有时候报错的话也不用管，看Dashboard每天有流量就行  Traffmonetizer 部署 Windows 部署 安装包下载地址\nMacOS 部署 安装包下载地址\nAndroid 部署 安装包下载地址\n以上三个平台均安装对应包后打开，然后填入Dashboard 上的token，运行服务即可。\nDocker 部署 官方Docker Hub地址\n拉取镜像 普通linux64位 / AMD64:\n1  docker pull traffmonetizer/cli:latest   ARM 平台支持，主要是树莓派或者手机:\n1 2 3 4 5  # 64位 docker pull traffmonetizer/cli:arm64v8 # 32位 docker pull traffmonetizer/cli:arm32v7   启动容器命令 1  docker run -d --restart unless-stopped --name tm traffmonetizer/cli start accept --token \u0026lt;dashboard主页上token\u0026gt; --device-name \u0026lt;自定义名字\u0026gt;   内置命令参考\n1 2 3 4 5 6 7  start - connects to the server stop - disconnects from the server accept - indicates that the application can accept traffic end-accept - indicates that the application couldn’t accept traffic, but does not disconnect from the server statistics - statistics. Outputted in the format \u0026#34;Inbound: {value}; Outgoing: {value}; Requests: {value}\u0026#34; status - connection status. Outputted in the format \u0026#34;Connected: {True / False}; Accepting: {True / False}\u0026#34; exit - stopping the application   启动之后可以在Stats界面看到对应节点注册\n结束语 Traffmonetizer 比较好的一点是对IP 没有那么严格的限制，走的服务器也行，平时如果有限制机器也可以跑一跑这个来回一下血。在笔者这边看来，用东南亚的节点来跑貌似也可以跑到稍微多一点流量，国内节点的话分配的流量较少。\n其他被动网赚项目参考\n  网络流量被动收入之Honeygain Docker部署教程\n  网络流量被动收入之Traffmonetizer Docker部署教程\n  网络流量被动收入之Bitping Docker部署教程\n  网络流量被动收入之Iproyal Docker部署教程\n  网络流量被动收入之Peer2profit Docker部署教程\n  网络流量被动收入之Earnapp Docker部署教程\n  ","date":"2023-01-17T00:00:00Z","image":"https://yysy.site/p/passive-income-traffmonetizer/Passive-Income-Traffmonetizer-Front_hufcf2301eede78afda1d33c6ccae7086f_74794_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/passive-income-traffmonetizer/","title":"网络流量被动收入之Traffmonetizer Docker部署教程"},{"content":"Honeygain 是什么 HoneyGain 是一个通过共享自己闲置不用的网络带宽赚钱的平台。HoneyGain 支持多种不同的操作系统和设备，安装后既可自动分享闲置的网络带宽，分享的越多，赚得越多，是一个完全免费、简单易用、有网络就能用的 “躺赚” 被动收入平台。\nHoneyGain 应该算是众多网络共享平台里最流行的，而且网上非常多的人已经真实的拿到了现金奖励，可以说是一个非常靠谱的平台。\n注册 新用户注册会送5美元奖励，注册链接。\n默认Honeygain是满20美元提现（通过paypal手续费较高），不过现在有一个JumpTask的模式，和电子货币平台合作（手续费较低，而且不限制提现额度），不过涉及电子货币需要对应的电子钱包。\nHoneygain 的收益如何 首先要先明确，使用Honeygain客户端跑的结果并不是直接的收益，而是honeygain的积分。按照官网说法，每1000积分对应的是1美元，而10MB流量对应3积分，也就是大概1美元/3GB流量。\n截止2023-01-16，笔者还没有提现，不过在JumpTask是能够按照操作提现到对应地址钱包的，所以提现应该问题不大。笔者从2022年大概9月、10月左右开始玩，一开始的收益（3个设备）有大概50-80积分是浮动，折算回来每天大概0.05-0.08美元/天，而且这个估计和国内网络有关，连接hoenygain的服务器质量比较差可能是，所以跑的流量稍微低一些。\nHoneygain 优缺点 优点  老牌闲置带宽兑现的厂商 目前支持的JumpTask平台能把提现门槛降低 分别有几种积分获取途径，除了纯挂机，调整为JumpTask模式也能稍微提高一些收益，还有就是每日Winnings，以前是手点，后面其实有人写了脚本，我这边也整理了出来，增加收入来源  缺点  只能家宽IP，否则会运行失败，提示Not Resdential ip 同一个出口IP只能有一个设备挂着，否则会提示OverUsed 国内IP访问可能会有时候连接失败，因为官网使用Cloudflare CDN有时候国内网络到海外会延迟较大，客户端访问API会报错，这也是影响收益的原因之一  Honeygain 部署 Honeygain 目前支持MacOS、Android、Windows、IOS、Linux\n桌面端和移动端，可以直接通过注册，登陆Dashboard，右上角可以自行下载，这里不展开讨论，都是按照步骤安装而已。\n备注：个人建议优先推荐桌面端，能打开Content Delivery功能，理论上是CDN的功能，不过笔者目前还没有看到这个类别的收入。不过桌面端的客户端我这边跑了几个月，看起来分配的流量比容器部署更加多。\nDocker 容器化部署 Docker安装这里不展开描述，可以参考文章 Docker安装部署\nHoneygain一键安装命令\n1  docker run -d --name honeygain --restart=always honeygain/honeygain -tou-accept -email \u0026lt;邮箱地址-账号名\u0026gt; -pass \u0026lt;密码\u0026gt; -device \u0026lt;设备名\u0026gt;    email 参数后需要替换为你 Honeygain 对应的账号名，一般是邮箱地址 pass 参数后需要替换为你 Honeygain 对应的密码 device 参数后需要替换为你这个设备的名字，如果成功的话Dashboard页面中My active devices会看到在线  执行后可以通过命令行查看日志\n1  docker logs -f honeygain   返回如下图\n(可选) Winnings 自动获取脚本 现在Honeygain的Dashboard界面每天会有一个蜜罐，是随机发放积分的，不过需要跑够一定流量之后才能打开，而且每天都要操作的话比较麻烦，不符合网赚挂机躺赚原则，所以这边分享一个脚本，可以检测流量是否满足打开这个蜜罐的动画，如果满足的话脚本会调用api领取积分。\n脚本（Honeygain_checkin.py）内容，需要在USERNAME和PASSWORD填入你对应Honeygain的账号密码，运行前需要安装pyHoneygain==0.3.5和requests模块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #!/usr/bin/env python from datetime import date import os,sys from pyHoneygain import HoneyGain import requests import time t = time.time() time_string = time.strftime(\u0026#34;%Y-%m-%d%H:%M:%S\u0026#34;, time.localtime(t)) utc_t = time.time() - 8 * 60 * 60 utc_time_string = time.strftime(\u0026#34;%Y-%m-%d\u0026#34;, time.localtime(utc_t)) # Your HoneyGain (HG) login username and password USERNAME = \u0026#34;\u0026#34; PASSWORD = \u0026#34;\u0026#34; # Initialise the HoneyGain object user = HoneyGain() # Call the login method user.login(USERNAME, PASSWORD) user_balance = \u0026#34;\\nUser HG balance {}, JT balance {}\u0026#34;.format(user.wallet_stats()[\u0026#34;data\u0026#34;][\u0026#34;{}\u0026#34;.format(utc_time_string)][\u0026#34;hg_credits\u0026#34;], user.wallet_stats()[\u0026#34;data\u0026#34;][\u0026#34;{}\u0026#34;.format(utc_time_string)][\u0026#34;jt_credits\u0026#34;]) honeypot_status = user.get_honeypot_status() message = \u0026#34;error\u0026#34; if str(honeypot_status[\u0026#34;winning_credits\u0026#34;]) != \u0026#34;None\u0026#34;: message = \u0026#34;{}already claimed the honeypot today.{}\u0026#34;.format(user.me()[\u0026#39;email\u0026#39;], user_balance) else: if honeypot_status[\u0026#34;progress_bytes\u0026#34;] == honeypot_status[\u0026#34;max_bytes\u0026#34;]: result = user.open_honeypot() if result[\u0026#34;success\u0026#34;]: message = \u0026#34;Opened honeypot for {}, resulting in {}credits.{}\u0026#34;.format(user.me()[\u0026#39;email\u0026#39;], result[\u0026#34;credits\u0026#34;], user_balance) else: message = \u0026#34;Couldn\\\u0026#39;t open honeypot for {}, unknown error.{}\u0026#34;.format(user.me()[\u0026#39;email\u0026#39;], user_balance) else: message = \u0026#34;Couldn\\\u0026#39;t open honeypot for {}, did not gather 15MB.{}\\nProgress in bytes: {}- 15000000\u0026#34;.format(user.me()[\u0026#39;email\u0026#39;], user_balance, user.get_honeypot_status()[\u0026#34;progress_bytes\u0026#34;]) print(message)   结束语 如果有其他疑问或者部署上有什么难题，欢迎联系 我 或者加入 讨论群 一起讨论\n其他网赚/网络流量挂机/被动收入项目：\n  网络流量被动收入之Traffmonetizer Docker部署教程\n  网络流量被动收入之Bitping Docker部署教程\n  网络流量被动收入之Traffmonetizer Docker部署教程\n  网络流量被动收入之Iproyal Docker部署教程\n  网络流量被动收入之Peer2profit Docker部署教程\n  网络流量被动收入之Earnapp Docker部署教程\n  ","date":"2023-01-16T00:00:00Z","image":"https://yysy.site/p/passive-income-honeygain/Passive-Income-Honeygain-Front_hufcf2301eede78afda1d33c6ccae7086f_45923_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/passive-income-honeygain/","title":"网络流量被动收入之Honeygain Docker部署教程"},{"content":"Docker 是什么 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。\nDocker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\nDocker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。\nDocker 官网\nGithub Docker 社区版源码\nDocker 各平台部署 Windows Windows 64位官网下载地址\nEXE文件，按步骤安装即可，是桌面版，有UI，也可以使用powershell的docker命令管理\nMacOS Mac DMG包官网下载地址\nDMG文件，按步骤安装即可，是桌面版，有UI，也可以使用终端的docker命令管理\nLinux 个人比较推荐脚本一键安装，自动判断系统然后进行安装，也可以添加对应镜像加速器\n安装命令如下：\n1 2 3 4 5  ## 阿里云作为镜像加速 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun ## 微软云作为镜像加速 curl -fsSL https://get.docker.com | bash -s docker --mirror AzureChinaCloud   也可以使用国内 daocloud 一键安装命令：\n1  curl -sSL https://get.daocloud.io/docker | sh   一句话命令，如果顺利跑完的话，最后会显示docker相关信息，即已经安装完成。\n（可选）国内镜像加速 国内由于连接国外网络原因，所以一般需要加速代理\n 科大镜像：https://docker.mirrors.ustc.edu.cn/ 网易：https://hub-mirror.c.163.com/ 阿里云：https://\u0026lt;你的ID\u0026gt;.mirror.aliyuncs.com 七牛云加速器：https://reg-mirror.qiniu.com  修改文件/etc/docker/daemon.json（没有的话就新建），文件内容为\n1 2 3 4 5  { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://hub-mirror.c.163.com/\u0026#34; ] }   注意：一定要保证该文件符合 json 规范，否则 Docker 将不能启动。\n之后重新启动服务\n1 2  sudo systemctl daemon-reload sudo systemctl restart docker   检查加速器是否生效\n1  docker info   如果从结果中看到了如下内容，说明配置成功\n1 2  Registry Mirrors: https://hub-mirror.c.163.com/   结束语 Docker容器作为一个用于开发，交付和运行应用程序的开放平台，能够将应用程序与基础架构分开，从而可以快速交付软件。而且很多平台搭建或者软件工具，因为环境的差异性，导致我们运行起来会有一定难度，所以容器的部署是我们之后教程的一个重要基础。\n如有什么疑问可以进入讨论群一起讨论解决。\n","date":"2023-01-16T00:00:00Z","image":"https://yysy.site/p/docker-installation/Docker-Installation-Front_hufcf2301eede78afda1d33c6ccae7086f_50456_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/docker-installation/","title":"Docker安装部署"},{"content":"简介 utterances 是一款基于 GitHub issues 的评论工具 相比同类的工具 gitment、gitalk 以及 disqus 评论工具，优点如下：\n 极其轻量 加载非常快 配置比较简单 disqus 这个工具配置也比较简单，也是免费的。但是，广告多，而且加载也比较慢 utterances 基于github issue，拥有多种主题的开源免费小组件  部署 前期准备  Github账号 Hugo框架的博客  Github仓库配置  先创建yysy_comment仓库，仓库名可以自定义，不冲突就行。然后仓库依然选择Public公开仓库，因为评论功能需要利用到Github仓库的Issue功能  安装 utterances app的安装较为简单，直接在GitHub上安装即可。GitHub App链接：https://github.com/apps/utterances访问utterances应用程序 然后点击Install按钮进行安装。选在在第一步创建的yysy_comment仓库  点击\u0026quot;Install\u0026quot;后完成utterances的安装。\nHugo 配置 在Hugo主目录中找到目录文件config.yaml（有些教程写config.toml，可能是主题、版本不一样，现在我是使用Hugo版本是hugo v0.96.0+extended和主题hugo-theme-stack，所以配置文件是config.yaml）\n一共修改三处地方，如下图：\n params.comments位置中，provider字段改成utterances，下面的utterances字段中repo的值改成对上述创建的Github仓库名称，所以这里填入的是Polaris0112/yysy_comment，issueTerm的值填入pathname（保留原值），label的值填入none即可，如下图  最终效果 通过Github的Issue功能达到评论效果。\n结束语 到这里已经完成评论功能添加，其他功能、插件的话可以参考其他文章\n   ","date":"2023-01-15T00:00:00Z","image":"https://yysy.site/p/github-pages-hugo-utterances/Hugo-utterances-Front_hufcf2301eede78afda1d33c6ccae7086f_56965_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/github-pages-hugo-utterances/","title":"在Hugo中添加utterances评论功能"},{"content":"背景 从之前部署博客的文章可以获得一个无需自己购买服务器和域名的博客，并且能自主更新博客内容，再优化一下可以增加评论、统计访问量等插件。本文就是在这个基础上，继续低成本让个人博客使用自己的个人域名然后公网能支持HTTPS访问。\n前期准备  一个域名（低成本建议使用腾讯云/阿里云按需购买） github pages配置完成的状态，能通过\u0026lt;username\u0026gt;.github.io正常访问 一个Cloudflare账号  部署配置 将域名转移到cloudflare托管 以腾讯云为例（因为我域名是在腾讯云买）\n在“DNS解析”内容中，修改DNS服务器改成Cloudflare中添加站点后按照流程给出的NS服务器，对应填进去，等待几分钟之后Cloudflare就可以托管我们买的域名了。\n原因：使用DNSpod也不是不行，但是Cloudflare的话可以白嫖他家的CDN（虽然本次不会用到），而且Cloudflare虽然我们是用免费的穷鬼套餐，不过配置项也不少，有很多配置项很有折腾空间（比如根据哪个地区解析成哪些IP，或者CName到哪些域名，这个有兴趣的同学可以研究一下）\n只要Cloudflare中域名网站能设置DNS，可以自主添加一两个记录，测试一下解析结果，如果能正常解析就是托管成功，一般域名记录修改完几秒内就生效了。\n添加DNS记录    类型 名称 值     A @ 185.199.108.153   A @ 185.199.109.153   A @ 185.199.110.153   A @ 185.199.111.153   CNAME www polaris0112.github.io    注意：暂时不建议使用CDN，因为会影响github解析校验流程。\n尝试解析结果\n1 2 3 4 5 6 7 8 9 10  nslookup yysy.site ## 结果返回 Server:\t8.8.8.8 Address:\t8.8.8.8#53 Non-authoritative answer: Name:\tyysy.site Address: 172.67.220.171 Name:\tyysy.site Address: 104.21.70.63   这个是正常的，这两个IP是Cloudflare的CDN IP，因为Proxy status是打开的状态，所以对应的DNS配置都会走Cloudflare的CDN代理。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  nslookup www.yysy.site ## 结果返回 Server:\t8.8.8.8 Address:\t8.8.8.8#53 Non-authoritative answer: www.yysy.site\tcanonical name = polaris0112.github.io. Name:\tpolaris0112.github.io Address: 185.199.108.153 Name:\tpolaris0112.github.io Address: 185.199.109.153 Name:\tpolaris0112.github.io Address: 185.199.110.153 Name:\tpolaris0112.github.io Address: 185.199.111.153   设置HTTPS 如下图，选择对应域名，然后进入\u0026quot;SSL/TLS\u0026quot; \u0026ndash;\u0026gt; \u0026ldquo;Overview\u0026rdquo; ，在\u0026quot;Your SSL/TLS encryption mode\u0026quot;选择\u0026quot;Full\u0026quot;\n如下图，选择对应域名，然后进入\u0026quot;SSL/TLS\u0026quot; \u0026ndash;\u0026gt; \u0026ldquo;Edge Certificates\u0026rdquo; ，找到\u0026quot;Always Use HTTPS\u0026quot;点击右侧按钮，绿色✅即为打开跳转https\n配置GitHub Pages仓库 注意：这里说的是\u0026lt;username\u0026gt;.github.io这个仓库，不要操作博客源代码仓库，不然无效。\n填入自定义域名，然后“Save”保存，然后github会对该域名进行检查，主要是检查该域名是否指向github地址。\n更新博客源文件/博客静态文件   上述步骤操作后我们需要修改博客源文件，yysy目录下config.yaml需要把第一行baseurl的值改成对应域名，比如我现在是yysy.site，那么我第一行就改成baseurl: https://yysy.site\n  提交博客源代码到仓库\n  执行hugo命令，刷新public目录\n  此时进入public目录，但不要直接提交代码。这里有一个坑，因为刚才更新域名之后\u0026lt;username\u0026gt;.github.io仓库会多一个CNAME文件，所以需要先拉取更新远程仓库到本地后，再推送新的文件\n  1 2 3 4 5  cd public git pull git add . git commit -m \u0026#34;更新个人域名配置\u0026#34; git push -u origin main   配置完毕如下图\n结束语 本文使用自定义域名来代替Github给我们的域名，主要能缩短地址长度，方便记忆，后续用途需要继续开发。我买的这个域名是108元/3年，网上还有其他还可以更低价的域名可以买，大家可以按需查找，国内我建议还是腾讯云域名注册和阿里云域名注册，主要因为是交易方便。海外的话可能也有不少能使用支付宝/微信/银联，不过很多都是需要paypal等海外支付方式，较为麻烦，所以还是推荐国内的常见的域名注册厂商。\n后续还会继续分享如何低成本获取域名的教程，有兴趣的读者可以参考以下文章：\n 免费域名（附带续费方式，相当于永久免费）  ","date":"2023-01-14T00:00:00Z","image":"https://yysy.site/p/github-pages-https/Github-Pages-Cloudflare-Front_hufcf2301eede78afda1d33c6ccae7086f_55541_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/github-pages-https/","title":"将Github Pages设置个人域名并且支持HTTPS"},{"content":"背景 无论是在工作还是闲时，笔者都会折腾一些软件工具、系统等等东西，有时候仅靠备忘录或者是其他备注/文档工具使用的局限性会比较大，近期翻了翻自己的GitHub，发现2018年的自己弄的博客还在，但是属于几年前自己工作刚开始几年随便记录的一些工作上的知识相关的文章，不过保存也还算不错。虽然自己在家里也有Mac Mini来做工作站，用来跑一些网赚脚本和当做私人网盘，不过在可视化和发布上面还是比不上直接在公网上更为直接。\n这里我考虑的有几点需求：\n  成本尽量降到最低\n  发布需要自动化\n  文章整理方便，条理化\n  附加：需要账号体系或者评论系统，导流tg群可以大家一起讨论，互助互利\n  根据以上几点进行方案筛选，以前的框架使用过hexo，其实整体用起来还不错。不过秉着折腾的原则，这次就使用Hugo，网上教程文章数量也不少，但是质量参差不齐，有不少文章按照实际操作起来其实是跑不下来的，所以本文是我部署的全流程+踩坑过程和解决方案。\n概念、前期准备 GitHub Pages GitHub Pages 是一组静态网页集合(Static Web Page)，这些静态网页由 GitHub 托管(host)和发布，所以是 GitHub + Pages。\nHugo Hugo 是用Go语言写的静态网站生成器(Static Site Generator)。可以把Markdown文件转化成HTML文件。\n准备工作  准备好github账号 准备好git的操作环境 前往Hugo Themes找到自己想要的主题并且记录仓库地址（比如我已经选好了hugo-theme-stack） （建议）先了解命令行的操作，比如ls,cd,git,cp等等 （可选）准备好域名，永久免费域名我后续会出教程  部署过程 安装Hugo 官方安装文档，这里仅展示每个平台中其中一种安装方式。\nWindows  设置你的文件夹  你将需要一个存储 Hugo 可执行文件、博客内容（你创建的的那些文件），以及生成文件（Hugo 为你创建的 HTML）的地方。\n 打开 Windows Explorer。 创建一个新的文件夹，D:\\Hugo。 创建一个新的文件夹，D:\\Hugo\\bin。 创建一个新的文件夹，D:\\Hugo\\Sites。   下载预先编译好的 Windows 版本的 Hugo 可执行文件  使用 go 编译 Hugo 的一个优势就是仅有一个二进制文件。你不需要运行安装程序来使用它。相反，你需要把这个二进制文件复制到你的硬盘上。我假设你将把它放在 D:\\Hugo\\bin 文件夹内。如果你选择放在其它的位置，你需要在下面的命令中替换为那些路径。\n 在浏览器中打开 https://github.com/spf13/hugo/releases 当前的版本是 hugo_0.13_windows_amd64.zip。 下载那个 ZIP 文件，并保存到 D:\\Hugo\\bin 文件夹中。 在 Windows Explorer 中找到那个 ZIP 文件，并从中提取所有的文件。 你应该可以看到一个 hugo_0.13_windows_amd64.exe 文件。 把那个文件重命名为 hugo.exe。 确保 hugo.exe 文件在 D:\\Hugo\\bin 文件夹。（有可能提取过程会把它放在一个子文件夹中。如果确实这样的话，使用 Windows Explorer 把它移动到 D:\\Hugo\\bin。） 使用 D:\\Hugo\\bin\u0026gt;set PATH=%PATH%;D:\\Hugo\\bin 把 hugo.exe 可执行文件添加到你的 PATH路径中。  MacOS 1  brew install hugo   Linux 根据自身Linux版本选择对应的安装方式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  ## 安装包管理snap sudo snap install hugo ## 安装包管理Homebrew brew install hugo ## 存储库包Arch Linux sudo pacman -S hugo ## 存储库包Debian sudo apt install hugo ## 存储库包Fedora sudo dnf install hugo ## 存储库包openSUSE sudo zypper install hugo ## 存储库包Solus sudo eopkg install hugo ## 容器Docker docker pull klakegg/hugo ## 源码安装 ## 1.先安装Git（这里不展开说明） ## 2.再安装Go环境（这里不展开说明） ## 3.最后安装Hugo go install -tags extended github.com/gohugoio/hugo@latest   检查Hugo 以MacOS系统为例\n1 2  hugo version hugo v0.96.0+extended darwin/amd64 BuildDate=unknown   能正常返回结果即安装成功。目前这里我还没有踩过坑，但是安装Hugo成功率是比较大的。\n注意：建议安装带有extended字样的版本，主要是extended支持Sass/SCSS，有些主题可能需要会用到，所以避免重复部署，还是安装有extended字样的。\n设置Github博客源代码仓库/本地启动 注意：这里其实是需要创建两个仓库，一个用来放博客源代码，一个用来放Hugo生成出来的静态文件。他们的关系是：A仓库放源代码（只是存放，不涉及Pages和访问），B仓库放静态文件（用于Pages和外网访问）\n创建博客源代码仓库  仓库命名（随意） 勾选Public，设置为公开仓库  部署Hugo源代码到本地  使用hugo命令创建网页文件夹  1  hugo new site yysy   配置上述yysy文件夹的git配置绑定博客源代码仓库  1 2 3  cd yysy git init git remote add https://github.com/Polaris0112/yysy_blog.git   此时，yysy文件夹下目录状态应该是这样的\n archetypes：存放用hugo命令新建的md文件应用的front matter模版 config.toml：网站配置文件 content：存放内容页面，如Blog data：存放创建站点时Hugo使用的其他数据 layouts：存放定义网站的样式，写在layouts文件下的样式会覆盖安装的主题中的 layouts文件同名的样式 static：存放所有静态文件，如图片 themes：存放主题文件  部署hugo-theme-stack主题  拉取主题hugo-theme-stack  1  git submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack   把主题所需文件拷贝到主目录yysy下  1  cp -r themes/hugo-theme-stack/exampleSite/ ./   注意：这里复制之后，yysy目录下会多一个config.yaml，这个yaml文件才是适配这个主题的文件，后面是用这个来配置，所以config.toml需要删除。若同时保留两个config文件，之后Github Pages会读取config.toml而不是config.yaml。\n测试Hugo Server 可以启动本地服务，来测试我们的配置是否正确\n1 2  ## 在yysy目录下运行 hugo server -D   正常返回是这时候就能打开浏览器访问 http://localhost:1313/\n显示以下页面就是最最最原始的测试页面，元素都能正常展示。（到目前为止还没联动Github Pages，只是本地启动调试）\n设置Github Pages仓库 创建Github Pages仓库  命名GitHub Pages仓库，这个仓库名必须是 \u0026lt;username\u0026gt;.github.io 的格式，\u0026lt;username\u0026gt; 是自己的GitHub的用户名。比如我的Github用户名是Polaris0112，那我就要创建polaris0112.github.io作为Pages的仓库名。 勾选Public，设置为公开仓库。  推送静态文件  创建workflows文件。进入上述yysy目录，创建.github/workflows/gh-pages.yml文件（目录不存在的话就创建目录），文件内容如下，复制后保存文件。  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  ## cat .github/workflows/gh-pages.yml# 将 Hubo 博客构建后部署到 Github Pagesname:Deploy github-pages# 在 master 主干分支的任何 push 事件都会触发本 DevOps 工作流水线on:push:branches:[master ]# 以下是本串行执行工作流的所有组成部分jobs:# 这里只定义了一个名为 \u0026#34;deploy\u0026#34; 的多步骤作业build-deploy-hugo-blog:# 将后续的所有工作步骤都运行在最新版的 ubuntu 操作系统上runs-on:ubuntu-latest# 本构建和部署作业的所有步骤定义如下steps:# Step 1 - Checks-out 你的代码库到 $GITHUB_WORKSPACE- name:Checkout blog code repouses:actions/checkout@v2# 这是 Github 官方提供的一个动作模块with:submodules:true# 同步更新所使用的 Hugo 模板fetch-depth:0# 更新到该模板最新的版本# Step 2 - 配置最新版本的 Hugo 环境- name:Setup Hugouses:peaceiris/actions-hugo@v2 # 这是 Github Actions 市场中的一个动作模块with:hugo-version:\u0026#39;latest\u0026#39;# Step 3 - 清理代码库中 public 目录中的内容- name:Clean public directoryrun:rm -rf public # 彻底删除这个目录# Step 4 - 用最新版本的 Hugo 构建个人博客站点- name:Build blog siterun:hugo --minify# Step 5 - 创建用于私有域名所需要的 CNAME 文件- name:Create CNAME filerun:echo \u0026#39;martinliu.cn\u0026#39; \u0026gt; public/CNAME# Step 6 - 将构建好的博客站点推送发布到 gh-pages 分支- name:Deploy blog to Github-pagesuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.DEPLOY_KEY }}publish_dir:./public  保存文件后先更新博客源代码仓库\n1 2 3 4  ## yysy目录下执行 git add . git commit -m \u0026#34;提交更新workflows\u0026#34; git push -u origin main   使用hugo命令生成对应静态文件  1  hugo   运行后，yysy目录下会生成public文件夹，里面就是根据其他文件生成出来，整个网站的静态文件。\n进入public目录后，配置git仓库并上传  1 2 3 4 5 6  cd public git init git remote add https://github.com/Polaris0112/Polaris0112.github.io.git git add . git commit -m \u0026#34;提交更新博客静态文件\u0026#34; git push -u origin main   成功推送之后应该是会触发Github Actions，具体在Github Pages仓库（就是仓库名有github.io那个）中Issue那一栏会有Action标签，在那里可以看到每次推送之后触发任务的全部流程细节。\n在Pages页面可以看到部署状态，并且可以尝试从github提供的连接（比如我的就是https://polaris0112.github.io/）进行访问，访问结果应该要与本地跑的localhost地址显示的要一样。  结束语 到这里，已经完成了博客的部署，接下来就是调整配置等等相关细节问题。如果部署上有什么不清晰或者是教程上写错的地方，欢迎联系Email: jjc27017@gmail.com 或者添加TG群(https://t.me/yysy_blog_chat)一起讨论。后续会根据笔者使用情况出对应的教程，有兴趣的朋友可以继续阅读以下文章：\n 将Github Pages设置个人域名并且支持HTTPS 让搜索引擎能搜索该网站 Hugo-theme-stack的配置 Hugo-theme-stack添加搜索栏、Archive栏、Links栏、Abount栏 Hugo-theme-stack添加评论插件 免费域名（附带续费方式，相当于永久免费）  ","date":"2023-01-13T00:00:00Z","image":"https://yysy.site/p/github-pages-hugo/Github-Pages-Hugo-Front_hufcf2301eede78afda1d33c6ccae7086f_66668_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/github-pages-hugo/","title":"Github Pages + Hugo + hugo-theme-stack主题搭建全记录"}]