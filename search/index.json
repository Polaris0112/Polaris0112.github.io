[{"content":"简介 utterances 是一款基于 GitHub issues 的评论工具 相比同类的工具 gitment、gitalk 以及 disqus 评论工具，优点如下：\n 极其轻量 加载非常快 配置比较简单 disqus 这个工具配置也比较简单，也是免费的。但是，广告多，而且加载也比较慢 utterances 基于github issue，拥有多种主题的开源免费小组件  部署 前期准备  Github账号 Hugo框架的博客  Github仓库配置  先创建yysy_comment仓库，仓库名可以自定义，不冲突就行。然后仓库依然选择Public公开仓库，因为评论功能需要利用到Github仓库的Issue功能  安装 utterances app的安装较为简单，直接在GitHub上安装即可。GitHub App链接：https://github.com/apps/utterances访问utterances应用程序 然后点击Install按钮进行安装。选在在第一步创建的yysy_comment仓库  点击\u0026quot;Install\u0026quot;后完成utterances的安装。\nHugo 配置 在Hugo主目录中找到目录文件config.yaml（有些教程写config.toml，可能是主题、版本不一样，现在我是使用Hugo版本是hugo v0.96.0+extended和主题hugo-theme-stack，所以配置文件是config.yaml）\n一共修改三处地方，如下图：\n params.comments位置中，provider字段改成utterances，下面的utterances字段中repo的值改成对上述创建的Github仓库名称，所以这里填入的是Polaris0112/yysy_comment，issueTerm的值填入pathname（保留原值），label的值填入none即可，如下图  最终效果 通过Github的Issue功能达到评论效果。\n结束语 到这里已经完成评论功能添加，其他功能、插件的话可以参考其他文章\n   ","date":"2023-01-15T00:00:00Z","image":"https://yysy.site/p/github-pages-hugo-utterances/Hugo-utterances-Front_hufcf2301eede78afda1d33c6ccae7086f_56965_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/github-pages-hugo-utterances/","title":"在Hugo中添加utterances评论功能"},{"content":"背景 从之前部署博客的文章可以获得一个无需自己购买服务器和域名的博客，并且能自主更新博客内容，再优化一下可以增加评论、统计访问量等插件。本文就是在这个基础上，继续低成本让个人博客使用自己的个人域名然后公网能支持HTTPS访问。\n前期准备  一个域名（低成本建议使用腾讯云/阿里云按需购买） github pages配置完成的状态，能通过\u0026lt;username\u0026gt;.github.io正常访问 一个Cloudflare账号  部署配置 将域名转移到cloudflare托管 以腾讯云为例（因为我域名是在腾讯云买）\n在“DNS解析”内容中，修改DNS服务器改成Cloudflare中添加站点后按照流程给出的NS服务器，对应填进去，等待几分钟之后Cloudflare就可以托管我们买的域名了。\n原因：使用DNSpod也不是不行，但是Cloudflare的话可以白嫖他家的CDN（虽然本次不会用到），而且Cloudflare虽然我们是用免费的穷鬼套餐，不过配置项也不少，有很多配置项很有折腾空间（比如根据哪个地区解析成哪些IP，或者CName到哪些域名，这个有兴趣的同学可以研究一下）\n只要Cloudflare中域名网站能设置DNS，可以自主添加一两个记录，测试一下解析结果，如果能正常解析就是托管成功，一般域名记录修改完几秒内就生效了。\n添加DNS记录    类型 名称 值     A @ 185.199.108.153   A @ 185.199.109.153   A @ 185.199.110.153   A @ 185.199.111.153   CNAME www polaris0112.github.io    注意：暂时不建议使用CDN，因为会影响github解析校验流程。\n尝试解析结果\n1 2 3 4 5 6 7 8 9 10  nslookup yysy.site ## 结果返回 Server:\t8.8.8.8 Address:\t8.8.8.8#53 Non-authoritative answer: Name:\tyysy.site Address: 172.67.220.171 Name:\tyysy.site Address: 104.21.70.63   这个是正常的，这两个IP是Cloudflare的CDN IP，因为Proxy status是打开的状态，所以对应的DNS配置都会走Cloudflare的CDN代理。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  nslookup www.yysy.site ## 结果返回 Server:\t8.8.8.8 Address:\t8.8.8.8#53 Non-authoritative answer: www.yysy.site\tcanonical name = polaris0112.github.io. Name:\tpolaris0112.github.io Address: 185.199.108.153 Name:\tpolaris0112.github.io Address: 185.199.109.153 Name:\tpolaris0112.github.io Address: 185.199.110.153 Name:\tpolaris0112.github.io Address: 185.199.111.153   设置HTTPS 如下图，选择对应域名，然后进入\u0026quot;SSL/TLS\u0026quot; \u0026ndash;\u0026gt; \u0026ldquo;Overview\u0026rdquo; ，在\u0026quot;Your SSL/TLS encryption mode\u0026quot;选择\u0026quot;Full\u0026quot;\n如下图，选择对应域名，然后进入\u0026quot;SSL/TLS\u0026quot; \u0026ndash;\u0026gt; \u0026ldquo;Edge Certificates\u0026rdquo; ，找到\u0026quot;Always Use HTTPS\u0026quot;点击右侧按钮，绿色✅即为打开跳转https\n配置GitHub Pages仓库 注意：这里说的是\u0026lt;username\u0026gt;.github.io这个仓库，不要操作博客源代码仓库，不然无效。\n填入自定义域名，然后“Save”保存，然后github会对该域名进行检查，主要是检查该域名是否指向github地址。\n更新博客源文件/博客静态文件   上述步骤操作后我们需要修改博客源文件，yysy目录下config.yaml需要把第一行baseurl的值改成对应域名，比如我现在是yysy.site，那么我第一行就改成baseurl: https://yysy.site\n  提交博客源代码到仓库\n  执行hugo命令，刷新public目录\n  此时进入public目录，但不要直接提交代码。这里有一个坑，因为刚才更新域名之后\u0026lt;username\u0026gt;.github.io仓库会多一个CNAME文件，所以需要先拉取更新远程仓库到本地后，再推送新的文件\n  1 2 3 4 5  cd public git pull git add . git commit -m \u0026#34;更新个人域名配置\u0026#34; git push -u origin main   配置完毕如下图\n结束语 本文使用自定义域名来代替Github给我们的域名，主要能缩短地址长度，方便记忆，后续用途需要继续开发。我买的这个域名是108元/3年，网上还有其他还可以更低价的域名可以买，大家可以按需查找，国内我建议还是腾讯云域名注册和阿里云域名注册，主要因为是交易方便。海外的话可能也有不少能使用支付宝/微信/银联，不过很多都是需要paypal等海外支付方式，较为麻烦，所以还是推荐国内的常见的域名注册厂商。\n后续还会继续分享如何低成本获取域名的教程，有兴趣的读者可以参考以下文章：\n 免费域名（附带续费方式，相当于永久免费）  ","date":"2023-01-14T00:00:00Z","image":"https://yysy.site/p/github-pages-https/Github-Pages-Cloudflare-Front_hufcf2301eede78afda1d33c6ccae7086f_55541_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/github-pages-https/","title":"将Github Pages设置个人域名并且支持HTTPS"},{"content":"背景 无论是在工作还是闲时，笔者都会折腾一些软件工具、系统等等东西，有时候仅靠备忘录或者是其他备注/文档工具使用的局限性会比较大，近期翻了翻自己的GitHub，发现2018年的自己弄的博客还在，但是属于几年前自己工作刚开始几年随便记录的一些工作上的知识相关的文章，不过保存也还算不错。虽然自己在家里也有Mac Mini来做工作站，用来跑一些网赚脚本和当做私人网盘，不过在可视化和发布上面还是比不上直接在公网上更为直接。\n这里我考虑的有几点需求：\n  成本尽量降到最低\n  发布需要自动化\n  文章整理方便，条理化\n  附加：需要账号体系或者评论系统，导流tg群可以大家一起讨论，互助互利\n  根据以上几点进行方案筛选，以前的框架使用过hexo，其实整体用起来还不错。不过秉着折腾的原则，这次就使用Hugo，网上教程文章数量也不少，但是质量参差不齐，有不少文章按照实际操作起来其实是跑不下来的，所以本文是我部署的全流程+踩坑过程和解决方案。\n概念、前期准备 GitHub Pages GitHub Pages 是一组静态网页集合(Static Web Page)，这些静态网页由 GitHub 托管(host)和发布，所以是 GitHub + Pages。\nHugo Hugo 是用Go语言写的静态网站生成器(Static Site Generator)。可以把Markdown文件转化成HTML文件。\n准备工作  准备好github账号 准备好git的操作环境 前往Hugo Themes找到自己想要的主题并且记录仓库地址（比如我已经选好了hugo-theme-stack） （建议）先了解命令行的操作，比如ls,cd,git,cp等等 （可选）准备好域名，永久免费域名我后续会出教程  部署过程 安装Hugo 官方安装文档，这里仅展示每个平台中其中一种安装方式。\nWindows  设置你的文件夹  你将需要一个存储 Hugo 可执行文件、博客内容（你创建的的那些文件），以及生成文件（Hugo 为你创建的 HTML）的地方。\n 打开 Windows Explorer。 创建一个新的文件夹，D:\\Hugo。 创建一个新的文件夹，D:\\Hugo\\bin。 创建一个新的文件夹，D:\\Hugo\\Sites。   下载预先编译好的 Windows 版本的 Hugo 可执行文件  使用 go 编译 Hugo 的一个优势就是仅有一个二进制文件。你不需要运行安装程序来使用它。相反，你需要把这个二进制文件复制到你的硬盘上。我假设你将把它放在 D:\\Hugo\\bin 文件夹内。如果你选择放在其它的位置，你需要在下面的命令中替换为那些路径。\n 在浏览器中打开 https://github.com/spf13/hugo/releases 当前的版本是 hugo_0.13_windows_amd64.zip。 下载那个 ZIP 文件，并保存到 D:\\Hugo\\bin 文件夹中。 在 Windows Explorer 中找到那个 ZIP 文件，并从中提取所有的文件。 你应该可以看到一个 hugo_0.13_windows_amd64.exe 文件。 把那个文件重命名为 hugo.exe。 确保 hugo.exe 文件在 D:\\Hugo\\bin 文件夹。（有可能提取过程会把它放在一个子文件夹中。如果确实这样的话，使用 Windows Explorer 把它移动到 D:\\Hugo\\bin。） 使用 D:\\Hugo\\bin\u0026gt;set PATH=%PATH%;D:\\Hugo\\bin 把 hugo.exe 可执行文件添加到你的 PATH路径中。  MacOS 1  brew install hugo   Linux 根据自身Linux版本选择对应的安装方式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  ## 安装包管理snap sudo snap install hugo ## 安装包管理Homebrew brew install hugo ## 存储库包Arch Linux sudo pacman -S hugo ## 存储库包Debian sudo apt install hugo ## 存储库包Fedora sudo dnf install hugo ## 存储库包openSUSE sudo zypper install hugo ## 存储库包Solus sudo eopkg install hugo ## 容器Docker docker pull klakegg/hugo ## 源码安装 ## 1.先安装Git（这里不展开说明） ## 2.再安装Go环境（这里不展开说明） ## 3.最后安装Hugo go install -tags extended github.com/gohugoio/hugo@latest   检查Hugo 以MacOS系统为例\n1 2  hugo version hugo v0.96.0+extended darwin/amd64 BuildDate=unknown   能正常返回结果即安装成功。目前这里我还没有踩过坑，但是安装Hugo成功率是比较大的。\n注意：建议安装带有extended字样的版本，主要是extended支持Sass/SCSS，有些主题可能需要会用到，所以避免重复部署，还是安装有extended字样的。\n设置Github博客源代码仓库/本地启动 注意：这里其实是需要创建两个仓库，一个用来放博客源代码，一个用来放Hugo生成出来的静态文件。他们的关系是：A仓库放源代码（只是存放，不涉及Pages和访问），B仓库放静态文件（用于Pages和外网访问）\n创建博客源代码仓库  仓库命名（随意） 勾选Public，设置为公开仓库  部署Hugo源代码到本地  使用hugo命令创建网页文件夹  1  hugo new site yysy   配置上述yysy文件夹的git配置绑定博客源代码仓库  1 2 3  cd yysy git init git remote add https://github.com/Polaris0112/yysy_blog.git   此时，yysy文件夹下目录状态应该是这样的\n archetypes：存放用hugo命令新建的md文件应用的front matter模版 config.toml：网站配置文件 content：存放内容页面，如Blog data：存放创建站点时Hugo使用的其他数据 layouts：存放定义网站的样式，写在layouts文件下的样式会覆盖安装的主题中的 layouts文件同名的样式 static：存放所有静态文件，如图片 themes：存放主题文件  部署hugo-theme-stack主题  拉取主题hugo-theme-stack  1  git submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack   把主题所需文件拷贝到主目录yysy下  1  cp -r themes/hugo-theme-stack/exampleSite/ ./   注意：这里复制之后，yysy目录下会多一个config.yaml，这个yaml文件才是适配这个主题的文件，后面是用这个来配置，所以config.toml需要删除。若同时保留两个config文件，之后Github Pages会读取config.toml而不是config.yaml。\n测试Hugo Server 可以启动本地服务，来测试我们的配置是否正确\n1 2  ## 在yysy目录下运行 hugo server -D   正常返回是这时候就能打开浏览器访问 http://localhost:1313/\n显示以下页面就是最最最原始的测试页面，元素都能正常展示。（到目前为止还没联动Github Pages，只是本地启动调试）\n设置Github Pages仓库 创建Github Pages仓库  命名GitHub Pages仓库，这个仓库名必须是 \u0026lt;username\u0026gt;.github.io 的格式，\u0026lt;username\u0026gt; 是自己的GitHub的用户名。比如我的Github用户名是Polaris0112，那我就要创建polaris0112.github.io作为Pages的仓库名。 勾选Public，设置为公开仓库。  推送静态文件  创建workflows文件。进入上述yysy目录，创建.github/workflows/gh-pages.yml文件（目录不存在的话就创建目录），文件内容如下，复制后保存文件。  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  ## cat .github/workflows/gh-pages.yml# 将 Hubo 博客构建后部署到 Github Pagesname:Deploy github-pages# 在 master 主干分支的任何 push 事件都会触发本 DevOps 工作流水线on:push:branches:[master ]# 以下是本串行执行工作流的所有组成部分jobs:# 这里只定义了一个名为 \u0026#34;deploy\u0026#34; 的多步骤作业build-deploy-hugo-blog:# 将后续的所有工作步骤都运行在最新版的 ubuntu 操作系统上runs-on:ubuntu-latest# 本构建和部署作业的所有步骤定义如下steps:# Step 1 - Checks-out 你的代码库到 $GITHUB_WORKSPACE- name:Checkout blog code repouses:actions/checkout@v2# 这是 Github 官方提供的一个动作模块with:submodules:true# 同步更新所使用的 Hugo 模板fetch-depth:0# 更新到该模板最新的版本# Step 2 - 配置最新版本的 Hugo 环境- name:Setup Hugouses:peaceiris/actions-hugo@v2 # 这是 Github Actions 市场中的一个动作模块with:hugo-version:\u0026#39;latest\u0026#39;# Step 3 - 清理代码库中 public 目录中的内容- name:Clean public directoryrun:rm -rf public # 彻底删除这个目录# Step 4 - 用最新版本的 Hugo 构建个人博客站点- name:Build blog siterun:hugo --minify# Step 5 - 创建用于私有域名所需要的 CNAME 文件- name:Create CNAME filerun:echo \u0026#39;martinliu.cn\u0026#39; \u0026gt; public/CNAME# Step 6 - 将构建好的博客站点推送发布到 gh-pages 分支- name:Deploy blog to Github-pagesuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.DEPLOY_KEY }}publish_dir:./public  保存文件后先更新博客源代码仓库\n1 2 3 4  ## yysy目录下执行 git add . git commit -m \u0026#34;提交更新workflows\u0026#34; git push -u origin main   使用hugo命令生成对应静态文件  1  hugo   运行后，yysy目录下会生成public文件夹，里面就是根据其他文件生成出来，整个网站的静态文件。\n进入public目录后，配置git仓库并上传  1 2 3 4 5 6  cd public git init git remote add https://github.com/Polaris0112/Polaris0112.github.io.git git add . git commit -m \u0026#34;提交更新博客静态文件\u0026#34; git push -u origin main   成功推送之后应该是会触发Github Actions，具体在Github Pages仓库（就是仓库名有github.io那个）中Issue那一栏会有Action标签，在那里可以看到每次推送之后触发任务的全部流程细节。\n在Pages页面可以看到部署状态，并且可以尝试从github提供的连接（比如我的就是https://polaris0112.github.io/）进行访问，访问结果应该要与本地跑的localhost地址显示的要一样。  结束语 到这里，已经完成了博客的部署，接下来就是调整配置等等相关细节问题。如果部署上有什么不清晰或者是教程上写错的地方，欢迎联系Email: jjc27017@gmail.com 或者添加TG群(https://t.me/yysy_blog_chat)一起讨论。后续会根据笔者使用情况出对应的教程，有兴趣的朋友可以继续阅读以下文章：\n 将Github Pages设置个人域名并且支持HTTPS 让搜索引擎能搜索该网站 Hugo-theme-stack的配置 Hugo-theme-stack添加搜索栏、Archive栏、Links栏、Abount栏 Hugo-theme-stack使用emoji表情，增加加载进度条，添加评论插件 免费域名（附带续费方式，相当于永久免费）  ","date":"2023-01-13T00:00:00Z","image":"https://yysy.site/p/github-pages-hugo/Github-Pages-Hugo-Front_hufcf2301eede78afda1d33c6ccae7086f_66668_120x120_fill_q75_box_smart1.jpg","permalink":"https://yysy.site/p/github-pages-hugo/","title":"Github Pages + Hugo + hugo-theme-stack主题搭建全记录"}]