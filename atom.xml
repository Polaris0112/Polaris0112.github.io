<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-27T07:44:51.792Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jayden</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ceph 优化总结</title>
    <link href="http://yoursite.com/2018/03/15/ceph-optimization-summary/"/>
    <id>http://yoursite.com/2018/03/15/ceph-optimization-summary/</id>
    <published>2018-03-14T16:00:00.000Z</published>
    <updated>2018-03-27T07:44:51.792Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是分布式存储系统Ceph的优化点。</p><h2 id="硬件层面"><a href="#硬件层面" class="headerlink" title="硬件层面"></a>硬件层面</h2><ul><li><p>硬件规划</p></li><li><p>SSD选择</p></li><li><p>BIOS设置</p></li></ul><h2 id="软件层面"><a href="#软件层面" class="headerlink" title="软件层面"></a>软件层面</h2><ul><li><p>Linux OS</p></li><li><p>Ceph Configurations</p></li><li><p>PG Number调整</p></li><li><p>CRUSH Map</p></li><li><p>其他因素</p></li></ul><h2 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h2><h3 id="硬件规划"><a href="#硬件规划" class="headerlink" title="硬件规划"></a>硬件规划</h3><ul><li>Processor<br>ceph-osd进程在运行过程中会消耗CPU资源，所以一般会为每一个ceph-osd进程绑定一个CPU核上。当然如果你使用EC方式，可能需要更多的CPU资源。</li></ul><p>ceph-mon进程并不十分消耗CPU资源，所以不必为ceph-mon进程预留过多的CPU资源。</p><p>ceph-msd也是非常消耗CPU资源的，所以需要提供更多的CPU资源。</p><ul><li><p>内存<br>ceph-mon和ceph-mds需要2G内存，每个ceph-osd进程需要1G内存，当然2G更好。</p></li><li><p>网络规划<br>万兆网络现在基本上是跑Ceph必备的，网络规划上，也尽量考虑分离cilent和cluster网络。</p></li></ul><h3 id="SSD选择"><a href="#SSD选择" class="headerlink" title="SSD选择"></a>SSD选择</h3><p>硬件的选择也直接决定了Ceph集群的性能，从成本考虑，一般选择SATA SSD作为Journal，<a href="https://www.intel.com/content/www/us/en/products/memory-storage/solid-state-drives/data-center-ssds/dc-s3500-series.html" target="_blank" rel="noopener">Intel® SSD DC S3500 Series</a>基本是目前看到的方案中的首选。400G的规格4K随机写可以达到11000 IOPS。如果在预算足够的情况下，推荐使用PCIE SSD，性能会得到进一步提升，但是由于Journal在向数据盘写入数据时Block后续请求，所以Journal的加入并未呈现出想象中的性能提升，但是的确会对Latency有很大的改善。</p><p>如何确定你的SSD是否适合作为SSD Journal，可以参考<a href="http://www.sebastien-han.fr/blog/2014/10/10/ceph-how-to-test-if-your-ssd-is-suitable-as-a-journal-device/" target="_blank" rel="noopener">SÉBASTIEN HAN的Ceph: How to Test if Your SSD Is Suitable as a Journal Device?</a>，这里面他也列出了常见的SSD的测试结果，从结果来看SATA SSD中，Intel S3500性能表现最好。</p><h3 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h3><ul><li><p>Hyper-Threading(HT)<br>基本做云平台的，VT和HT打开都是必须的，超线程技术(HT)就是利用特殊的硬件指令，把两个逻辑内核模拟成两个物理芯片，让单个处理器都能使用线程级并行计算，进而兼容多线程操作系统和软件，减少了CPU的闲置时间，提高的CPU的运行效率。</p></li><li><p>关闭节能<br>关闭节能后，对性能还是有所提升的，所以坚决调整成性能型(Performance)。当然也可以在操作系统级别进行调整，详细的调整过程请<a href="http://www.servernoobs.com/avoiding-cpu-speed-scaling-in-modern-linux-distributions-running-cpu-at-full-speed-tips/" target="_blank" rel="noopener">参考链接</a>，但是不知道是不是由于BIOS已经调整的缘故，所以在CentOS 6.6上并没有发现相关的设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> CPUFREQ <span class="keyword">in</span> /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; <span class="keyword">do</span> [ -f <span class="variable">$CPUFREQ</span> ] || <span class="built_in">continue</span>; <span class="built_in">echo</span> -n performance &gt; <span class="variable">$CPUFREQ</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p><a href="http://www.ibm.com/developerworks/cn/linux/l-numa/" target="_blank" rel="noopener">NUMA</a><br>简单来说，NUMA思路就是将内存和CPU分割为多个区域，每个区域叫做NODE,然后将NODE高速互联。 node内cpu与内存访问速度快于访问其他node的内存，NUMA可能会在<a href="http://lists.ceph.com/pipermail/ceph-users-ceph.com/2013-December/036211.html" target="_blank" rel="noopener">某些情况</a>下影响ceph-osd。解决的方案，一种是通过BIOS关闭NUMA，另外一种就是通过cgroup将ceph-osd进程与某一个CPU Core以及同一NODE下的内存进行绑定。但是第二种看起来更麻烦，所以一般部署的时候可以在系统层面关闭NUMA。CentOS系统下，通过修改/etc/grub.conf文件，添加numa=off来关闭NUMA。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel /vmlinuz-2.6.32-504.12.2.el6.x86_64 ro root=UUID=870d47f8-0357-4a32-909f-74173a9f0633 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM   biosdevname=0 numa=off</span><br></pre></td></tr></table></figure></li></ul><h2 id="软件优化"><a href="#软件优化" class="headerlink" title="软件优化"></a>软件优化</h2><h3 id="Linux-OS"><a href="#Linux-OS" class="headerlink" title="Linux OS"></a>Linux OS</h3><ul><li><p>Kernel pid max</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 4194303 &gt; /proc/sys/kernel/pid_max</span><br></pre></td></tr></table></figure></li><li><p>Jumbo frames, 交换机端需要支持该功能，系统网卡设置才有效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig eth0 mtu 9000</span><br></pre></td></tr></table></figure></li></ul><p>永久设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"MTU=9000"</span> | tee -a /etc/sysconfig/network-script/ifcfg-eth0</span><br><span class="line">$ /etc/init.d/networking restart</span><br></pre></td></tr></table></figure></p><ul><li>read_ahead, 通过数据预读并且记载到随机访问内存方式提高磁盘读操作，查看默认值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /sys/block/sda/queue/read_ahead_kb</span><br></pre></td></tr></table></figure></li></ul><p>根据一些Ceph的公开分享，8192是比较理想的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"8192"</span> &gt; /sys/block/sda/queue/read_ahead_kb</span><br></pre></td></tr></table></figure></p><ul><li><p>swappiness, 主要控制系统对swap的使用，这个参数的调整最先见于UnitedStack公开的文档中，猜测调整的原因主要是使用swap会影响系统的性能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"vm.swappiness = 0"</span> | tee -a /etc/sysctl.conf</span><br></pre></td></tr></table></figure></li><li><p>I/O Scheduler，关于I/O Scheculder的调整网上已经有很多资料，这里不再赘述，简单说SSD要用noop，SATA/SAS使用deadline。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"deadline"</span> &gt; /sys/block/sd[x]/queue/scheduler</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"noop"</span> &gt; /sys/block/sd[x]/queue/scheduler</span><br></pre></td></tr></table></figure></li><li><p>cgroup<br>这方面的文章好像比较少，昨天在和Ceph社区交流过程中，Jan Schermer说准备把生产环境中的一些脚本贡献出来，但是暂时还没有，他同时也列举了一些使用cgroup进行隔离的<a href="https://www.mail-archive.com/ceph-users@lists.ceph.com/msg21111.html" target="_blank" rel="noopener">原因</a>。</p><ul><li>不在process和thread在不同的core上移动(更好的缓存利用)</li><li>减少NUMA的影响</li><li>网络和存储控制器影响 - 较小</li><li>通过限制cpuset来限制Linux调度域(不确定是不是重要但是是最佳实践)</li><li>如果开启了HT，可能会造成OSD在thread1上，KVM在thread2上，并且是同一个core。Core的延迟和性能取决于其他一个线程做什么。</li></ul></li></ul><h3 id="Ceph-Configurations"><a href="#Ceph-Configurations" class="headerlink" title="Ceph Configurations"></a>Ceph Configurations</h3><ul><li>[global]</li></ul><table><thead><tr><th>参数名</th><th style="text-align:center">描述</th><th style="text-align:center">默认值</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td>public network</td><td style="text-align:center">客户端访问网络</td><td style="text-align:center">-</td><td style="text-align:center">192.168.100.0/24</td></tr><tr><td>cluster network</td><td style="text-align:center">集群网络</td><td style="text-align:center">-</td><td style="text-align:center">192.168.1.0/24</td></tr><tr><td>max open files</td><td style="text-align:center">如果设置了该选项，Ceph会设置系统的max open fds</td><td style="text-align:center">0</td><td style="text-align:center">131072</td></tr></tbody></table><p>查看系统最大文件打开数可以使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/fs/file-max</span><br></pre></td></tr></table></figure></p><ul><li>[osd] - filestore</li></ul><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">描述</th><th style="text-align:center">默认值</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">filestore xattr use omap</td><td style="text-align:center">为XATTRS使用object map，EXT4文件系统时使用，XFS或者btrfs也可以使用</td><td style="text-align:center">false</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">filestore max sync interval</td><td style="text-align:center">从日志到数据盘最大同步间隔(seconds)</td><td style="text-align:center">5</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">filestore min sync interval</td><td style="text-align:center">从日志到数据盘最小同步间隔(seconds)</td><td style="text-align:center">0.1</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">filestore queue max ops</td><td style="text-align:center">数据盘最大接受的操作数</td><td style="text-align:center">500</td><td style="text-align:center">25000</td></tr><tr><td style="text-align:center">filestore queue max bytes</td><td style="text-align:center">数据盘一次操作最大字节数(bytes)</td><td style="text-align:center">100 &lt;&lt; 20</td><td style="text-align:center">10485760</td></tr><tr><td style="text-align:center">filestore queue committing max ops</td><td style="text-align:center">数据盘能够commit的操作数</td><td style="text-align:center">500</td><td style="text-align:center">5000</td></tr><tr><td style="text-align:center">filestore queue committing max bytes</td><td style="text-align:center">数据盘能够commit的最大字节数(bytes)</td><td style="text-align:center">100 &lt;&lt; 20</td><td style="text-align:center">10485760000</td></tr><tr><td style="text-align:center">filestore op threads</td><td style="text-align:center">并发文件系统操作数</td><td style="text-align:center">2</td><td style="text-align:center">32</td></tr></tbody></table><ul><li>调整omap的原因主要是EXT4文件系统默认仅有4K</li><li>filestore queue相关的参数对于性能影响很小，参数调整不会对性能优化有本质上提升</li></ul><ul><li>[osd] - journal</li></ul><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">描述</th><th style="text-align:center">默认值</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">osd journal size</td><td style="text-align:center">OSD日志大小(MB)</td><td style="text-align:center">5120</td><td style="text-align:center">20000</td></tr><tr><td style="text-align:center">journal max write bytes</td><td style="text-align:center">journal一次性写入的最大字节数(bytes)</td><td style="text-align:center">10 &lt;&lt; 20</td><td style="text-align:center">1073714824</td></tr><tr><td style="text-align:center">journal max write entries</td><td style="text-align:center">journal一次性写入的最大记录数</td><td style="text-align:center">100</td><td style="text-align:center">10000</td></tr><tr><td style="text-align:center">journal queue max ops</td><td style="text-align:center">journal一次性最大在队列中的操作数</td><td style="text-align:center">500</td><td style="text-align:center">50000</td></tr><tr><td style="text-align:center">journal queue max bytes</td><td style="text-align:center">journal一次性最大在队列中的字节数(bytes)</td><td style="text-align:center">10 &lt;&lt; 20</td><td style="text-align:center">10485760000</td></tr></tbody></table><ul><li>Ceph OSD Daemon stops writes and synchronizes the journal with the filesystem, allowing Ceph OSD Daemons to trim operations from the journal and reuse the space.</li><li>上面这段话的意思就是，Ceph OSD进程在往数据盘上刷数据的过程中，是停止写操作的。</li></ul><ul><li>[osd] - osd config tuning</li></ul><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">描述</th><th style="text-align:center">默认值</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">osd max write size</td><td style="text-align:center">OSD一次可写入的最大值(MB)</td><td style="text-align:center">90</td><td style="text-align:center">512</td></tr><tr><td style="text-align:center">osd client message size cap</td><td style="text-align:center">客户端允许在内存中的最大数据(bytes)</td><td style="text-align:center">524288000</td><td style="text-align:center">2147483648</td></tr><tr><td style="text-align:center">osd deep scrub stride</td><td style="text-align:center">在Deep Scrub时候允许读取的字节数(bytes)</td><td style="text-align:center">524288</td><td style="text-align:center">131072</td></tr><tr><td style="text-align:center">osd op threads</td><td style="text-align:center">OSD进程操作的线程数</td><td style="text-align:center">2</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">osd disk threads</td><td style="text-align:center">OSD密集型操作例如恢复和Scrubbing时的线程</td><td style="text-align:center">1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">osd map cache size</td><td style="text-align:center">保留OSD Map的缓存(MB)</td><td style="text-align:center">500</td><td style="text-align:center">1024</td></tr><tr><td style="text-align:center">osd map cache bl size</td><td style="text-align:center">OSD进程在内存中的OSD Map缓存(MB)</td><td style="text-align:center">50</td><td style="text-align:center">128</td></tr><tr><td style="text-align:center">osd mount options xfs</td><td style="text-align:center">Ceph OSD xfs Mount选项</td><td style="text-align:center">rw,noatime,inode64</td><td style="text-align:center">rw,noexec,nodev,noatime,nodiratime,nobarrier</td></tr></tbody></table><ul><li>增加osd op threads和disk threads会带来额外的CPU开销</li></ul><ul><li>[osd] - recovery tuning</li></ul><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">描述</th><th style="text-align:center">默认值</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">osd recovery op priority</td><td style="text-align:center">恢复操作优先级，取值1-63，值越高占用资源越高</td><td style="text-align:center">10</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">osd recovery max active</td><td style="text-align:center">同一时间内活跃的恢复请求数</td><td style="text-align:center">15</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">osd max backfills</td><td style="text-align:center">一个OSD允许的最大backfills数</td><td style="text-align:center">10</td><td style="text-align:center">4</td></tr></tbody></table><ul><li>[osd] - client tuning</li></ul><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">描述</th><th style="text-align:center">默认值</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">rbd cache</td><td style="text-align:center">RBD缓存</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">rbd cache size</td><td style="text-align:center">RBD缓存大小(bytes)</td><td style="text-align:center">33554432</td><td style="text-align:center">268435456</td></tr><tr><td style="text-align:center">rbd cache max dirty</td><td style="text-align:center">缓存为write-back时允许的最大dirty字节数(bytes)，如果为0，使用write-through</td><td style="text-align:center">25165824</td><td style="text-align:center">134217728</td></tr><tr><td style="text-align:center">rbd cache max dirty age</td><td style="text-align:center">在被刷新到存储盘前dirty数据存在缓存的时间(seconds)</td><td style="text-align:center">1</td><td style="text-align:center">5</td></tr></tbody></table><p>关闭Debug</p><h3 id="PG-Number"><a href="#PG-Number" class="headerlink" title="PG Number"></a>PG Number</h3><p>PG和PGP数量一定要根据OSD的数量进行调整，计算公式如下，但是最后算出的结果一定要接近或者等于一个2的指数</p><p><img src="/images/ceph-14.png" alt="ceph-14"></p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">说明</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">PoolPGCount</td><td style="text-align:center">单个Pool的PG数量</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Target PGs per OSD</td><td style="text-align:center">每个OSD的PGS数量</td><td style="text-align:left">1.如果未来集群的OSD数量基本不再增长，Target PGs per OSD=100<br>2.如果未来集群的OSD数量可能增长到目前规模的2倍以内，Target PGs per OSD=200<br>3.如果未来集群的OSD数量可能增长到大于目前规模的2倍且小于3倍，Target PGs per OSD=300。</td></tr><tr><td style="text-align:center">OSD #</td><td style="text-align:center">集群OSD的总数，默认是全部OSD数量</td><td style="text-align:left">如果通过CRUSH rules进行了SSD和SATA设备的规则拆分(比如SSD和SATA划分两个zone)，需要单独填写对应rule的数量</td></tr><tr><td style="text-align:center">%Data</td><td style="text-align:center">Pool占用所在OSD总容量的百分比(预估值)</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Size</td><td style="text-align:center">每个pool的replicas size，默认是3</td><td style="text-align:left">如果使用Erasure Coded Pools简称EC pool，Pool Size=k+m</td></tr></tbody></table><p><strong>结果：</strong><br>１．如果上述计算的值小于（OSD＃）/（Size）的值，则将该值更新为（OSD＃）/（Size）的值。 这是为了通过为每个池分配至少一个主或辅助PG到每个OSD来确保均匀加载/数据分发。</p><p>２．然后将输出值四舍五入为最接近的2的幂。</p><p>提示：最接近的2的幂提供了CRUSH算法的效率的边际改进。</p><p>３．如果最接近的2的幂大于原始值的25％以上，则使用下一个更高的2的幂。</p><p>例如15个OSD，副本数为3的情况下，根据公式计算的结果应该为500，最接近512，所以需要设定该pool(volumes)的pg_num和pgp_num都为512.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd pool <span class="built_in">set</span> volumes pg_num 512</span><br><span class="line">$ ceph osd pool <span class="built_in">set</span> volumes pgp_num 512</span><br></pre></td></tr></table></figure></p><h3 id="CRUSH-Map"><a href="#CRUSH-Map" class="headerlink" title="CRUSH Map"></a>CRUSH Map</h3><p>CRUSH是一个非常灵活的方式，CRUSH MAP的调整取决于部署的具体环境，这个可能需要根据具体情况进行分析，这里面就不再赘述了。</p><h3 id="其他因素的影响"><a href="#其他因素的影响" class="headerlink" title="其他因素的影响"></a>其他因素的影响</h3><p>在2015年的Ceph Day上，海云捷迅在调优过程中分享过一个由于在集群中存在一个性能不好的磁盘，导致整个集群性能下降的case。通过osd perf可以提供磁盘latency的状况，同时在运维过程中也可以作为监控的一个重要指标，很明显在下面的例子中，OSD 8的磁盘延时较长，所以需要考虑将该OSD剔除出集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">$ ceph osd perf</span><br><span class="line">osd fs_commit_latency(ms) fs_apply_latency(ms)</span><br><span class="line">  0                    14                   17</span><br><span class="line">  1                    14                   16</span><br><span class="line">  2                    10                   11</span><br><span class="line">  3                     4                    5</span><br><span class="line">  4                    13                   15</span><br><span class="line">  5                    17                   20</span><br><span class="line">  6                    15                   18</span><br><span class="line">  7                    14                   16</span><br><span class="line">  8                   299                  329</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ cat /etc/ceph.conf</span><br><span class="line">[global]</span><br><span class="line">fsid = 059f27e8-a23f-4587-9033-3e3679d03b31</span><br><span class="line">mon_host = 10.10.20.102, 10.10.20.101, 10.10.20.100</span><br><span class="line">auth cluster required = cephx</span><br><span class="line">auth service required = cephx</span><br><span class="line">auth client required = cephx</span><br><span class="line">osd pool default size = 3</span><br><span class="line">osd pool default min size = 1</span><br><span class="line"></span><br><span class="line">public network = 10.10.20.0/24</span><br><span class="line">cluster network = 10.10.20.0/24</span><br><span class="line"></span><br><span class="line">max open files = 131072</span><br><span class="line"></span><br><span class="line">[mon]</span><br><span class="line">mon data = /var/lib/ceph/mon/ceph-<span class="variable">$id</span></span><br><span class="line"></span><br><span class="line">[osd]</span><br><span class="line">osd data = /var/lib/ceph/osd/ceph-<span class="variable">$id</span></span><br><span class="line">osd journal size = 20000</span><br><span class="line">osd mkfs <span class="built_in">type</span> = xfs</span><br><span class="line">osd mkfs options xfs = -f</span><br><span class="line"></span><br><span class="line">filestore xattr use omap = <span class="literal">true</span></span><br><span class="line">filestore min sync interval = 10</span><br><span class="line">filestore max sync interval = 15</span><br><span class="line">filestore queue max ops = 25000</span><br><span class="line">filestore queue max bytes = 10485760</span><br><span class="line">filestore queue committing max ops = 5000</span><br><span class="line">filestore queue committing max bytes = 10485760000</span><br><span class="line"></span><br><span class="line">journal max write bytes = 1073714824</span><br><span class="line">journal max write entries = 10000</span><br><span class="line">journal queue max ops = 50000</span><br><span class="line">journal queue max bytes = 10485760000</span><br><span class="line"></span><br><span class="line">osd max write size = 512</span><br><span class="line">osd client message size <span class="built_in">cap</span> = 2147483648</span><br><span class="line">osd deep scrub stride = 131072</span><br><span class="line">osd op threads = 8</span><br><span class="line">osd disk threads = 4</span><br><span class="line">osd map cache size = 1024</span><br><span class="line">osd map cache bl size = 128</span><br><span class="line">osd mount options xfs = <span class="string">"rw,noexec,nodev,noatime,nodiratime,nobarrier"</span></span><br><span class="line">osd recovery op priority = 4</span><br><span class="line">osd recovery max active = 10</span><br><span class="line">osd max backfills = 4</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">rbd cache = <span class="literal">true</span></span><br><span class="line">rbd cache size = 268435456</span><br><span class="line">rbd cache max dirty = 134217728</span><br><span class="line">rbd cache max dirty age = 5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是分布式存储系统Ceph的优化点。&lt;/p&gt;
&lt;h2 id=&quot;硬件层面&quot;&gt;&lt;a href=&quot;#硬件层面&quot; class=&quot;headerlink&quot; title=&quot;硬件层面&quot;&gt;&lt;/a&gt;硬件层面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;硬件规划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Ceph 优化总结" scheme="http://yoursite.com/categories/Ceph-%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Ceph" scheme="http://yoursite.com/tags/Ceph/"/>
    
  </entry>
  
  <entry>
    <title>分布式存储系统Ceph原理</title>
    <link href="http://yoursite.com/2018/03/13/ceph-introduction/"/>
    <id>http://yoursite.com/2018/03/13/ceph-introduction/</id>
    <published>2018-03-12T16:00:00.000Z</published>
    <updated>2018-03-26T03:04:59.609Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是分布式存储系统Ceph的原理介绍。</p><h2 id="Ceph简单概述"><a href="#Ceph简单概述" class="headerlink" title="Ceph简单概述"></a>Ceph简单概述</h2><p>Ceph是一个分布式存储系统，诞生于2004年，最早致力于开发下一代高性能分布式文件系统的项目。<a href="http://ceph.com/download/" target="_blank" rel="noopener">Ceph源码下载</a>。随着云计算的发展，ceph乘上了OpenStack的春风，进而成为了开源社区受关注较高的项目之一。Ceph可以将多台服务器组成一个超大集群，把这些机器中的磁盘资源整合到一块儿，形成一个大的资源池（PB级别），然后按需分配给应用使用。Ceph分布式存储的优势：</p><ul><li><p>CRUSH算法<br>CRUSH算法是ceph的两大创新之一，简单来说，ceph摒弃了传统的集中式存储元数据寻址的方案，转而使用CRUSH算法完成数据的寻址操作。<br>CRUSH在一致性哈希基础上很好的考虑了容灾域的隔离，能够实现各类负载的副本放置规则，例如跨机房、机架感知等。<br>CRUSH算法有相当强大的扩展性，理论上支持数千个存储节点。</p></li><li><p>高可用<br>Ceph中的数据副本数量可以由管理员自行定义，并可以通过CRUSH算法指定副本的物理存储位置以分隔故障域，支持数据强一致性；<br>Ceph可以忍受多种故障场景并自动尝试并行修复；<br>Ceph支持多份强一致性副本，副本能够垮主机、机架、机房、数据中心存放。所以安全可靠。<br>Ceph存储节点可以自管理、自动修复。无单点故障，容错性强。</p></li><li><p>高性能<br>因为是多个副本，因此在读写操作时候能够做到高度并行化。理论上，节点越多，整个集群的IOPS和吞吐量越高。<br>另外一点ceph客户端读写数据直接与存储设备(osd) 交互。在块存储和对象存储中无需元数据服务器。</p></li><li><p>高扩展性<br>Ceph不同于swift，客户端所有的读写操作都要经过代理节点。一旦集群并发量增大时，代理节点很容易成为单点瓶颈。<br>Ceph本身并没有主控节点，扩展起来比较容易，并且理论上，它的性能会随着磁盘数量的增加而线性增长。<br>Ceph扩容方便、容量大。能够管理上千台服务器、EB级的容量。</p></li><li><p>特性丰富<br>Ceph支持三种调用接口：对象存储，块存储，文件系统挂载。三种方式可以一同使用。<br>在国内一些公司的云环境中，通常会采用Ceph作为openstack的唯一后端存储来提升数据转发效率。<br>Ceph统一存储，虽然Ceph底层是一个分布式文件系统，但由于在上层开发了支持对象和块的接口。所以在开源存储软件中，能够一统江湖。至于能不能千秋万代，就不知了。</p></li></ul><p>Ceph提供3种存储方式分别是对象存储，块存储和文件系统，一般我们主要关心的还是块存储，推荐将虚拟机后端存储从SAN过渡到Ceph。Ceph 现在是云计算、虚拟机部署的最火开源存储解决方案，据说有20%的OpenStack部署存储用的都是Ceph的block storage。</p><h2 id="Ceph分布式存储的基本架构"><a href="#Ceph分布式存储的基本架构" class="headerlink" title="Ceph分布式存储的基本架构"></a>Ceph分布式存储的基本架构</h2><p><img src="/images/ceph-1.png" alt="ceph-1"></p><p>Ceph的底层是RADOS，RADOS本身也是分布式存储系统，CEPH所有的存储功能都是基于RADOS实现。RADOS采用C++开发，所提供的原生Librados API包括C和C++两种。Ceph的上层应用调用本机上的librados API，再由后者通过socket与RADOS集群中的其他节点通信并完成各种操作。</p><p>RADOS向外界暴露了调用接口，即LibRADOS,应用程序只需要调用LibRADOS的接口，就可以操纵Ceph了。这其中，RADOS GW用于对象存储，RBD用于块存储，它们都属于LibRADOS;CephFS是内核态程序，向外界提供了POSIX接口，用户可以通过客户端直接挂载使用。</p><p>RADOS GateWay、RBD其作用是在librados库的基础上提供抽象层次更高、更便于应用或客户端使用的上层接口。其中，RADOS GW是一个提供与Amazon S3和Swift兼容的RESTful API的gateway，以供相应的对象存储应用开发使用。RBD则提供了一个标准的块设备接口，常用于在虚拟化的场景下为虚拟机创建volume。目前，Red Hat已经将RBD驱动集成在KVM/QEMU中，以提高虚拟机访问性能。这两种方式目前在云计算中应用的比较多。</p><p>CEPHFS则提供了POSIX接口，用户可直接通过客户端挂载使用。它是内核态的程序，所以无需调用用户空间的librados库。它通过内核中的net模块来与Rados进行交互。</p><h2 id="Ceph之RADOS浅析"><a href="#Ceph之RADOS浅析" class="headerlink" title="Ceph之RADOS浅析"></a>Ceph之RADOS浅析</h2><p>RADOS (Reliable, Autonomic Distributed Object Store) 是Ceph的核心之一，作为Ceph分布式文件系统的一个子项目，特别为Ceph的需求设计，能够在动态变化和异质结构的存储设备机群之上提供一种稳定、可扩展、高性能的单一逻辑对象(Object)存储接口和能够实现节点的自适应和自管理的存储系统。</p><p>在传统分布式存储架构中，存储节点往往仅作为被动查询对象来使用，随着存储规模的增加，数据一致性的管理会出现很多问题。</p><p>而新型的存储架构倾向于将基本的块分配决策和安全保证等操作交给存储节点来做，然后通过提倡客户端和存储节点直接交互来简化数据布局并减小io瓶颈。</p><p>RADOS就是这样一个可用于PB级规模数据存储集群的可伸缩的、可靠的对象存储服务。它包含两类节点：存储节点、管理节点。它通过利用存储设备的智能性，将诸如一致性数据访问、冗余存储、错误检测、错误恢复分布到包含了上千存储节点的集群中，而不是仅仅依靠少数管理节点来处理。</p><p>RADOS中的存储节点被称为OSD(object storage device)，它可以仅由很普通的组件来构成，只需要包含CPU、网卡、本地缓存和一个磁盘或者RAID，并将传统的块存储方式替换成面向对象的存储。</p><p>在PB级的存储规模下，存储系统一定是动态的：系统会随着新设备的部署和旧设备的淘汰而增长或收缩，系统内的设备会持续地崩溃和恢复，大量的数据被创建或者删除。RADOS通过 cluster map来实现这些，cluster map会被复制到集群中的所有部分（存储节点、控制节点，甚至是客户端），并且通过怠惰地传播小增量更新而更新。cluster map中存储了整个集群的数据的分布以及成员。</p><p>通过在每个存储节点存储完整的cluster map，存储设备可以表现的半自动化，通过peer-to-peer的方式（比如定义协议）来进行数据备份、更新，错误检测、数据迁移等等操作。这无疑减轻了占少数的monitor cluster（管理节点组成的集群）的负担。</p><h3 id="设计如下："><a href="#设计如下：" class="headerlink" title="设计如下："></a>设计如下：</h3><p><img src="/images/ceph-2.png" alt="ceph-2"></p><p>一个RADOS系统包含大量的OSDs 和 很少的用于管理OSD集群成员的monitors。OSD的组成如简介所说。而monitor是一些独立的进程，以及少量的本地存储，monitor之间通过一致性算法保证数据的一致性。</p><h3 id="Cluster-Map"><a href="#Cluster-Map" class="headerlink" title="Cluster Map"></a>Cluster Map</h3><p>存储节点集群通过monitor集群操作cluster map来实现成员的管理。cluster map 描述了哪些OSD被包含进存储集群以及所有数据在存储集群中的分布。<br><img src="/images/ceph-3.png" alt="ceph-3"></p><p>cluster map不仅存储在monitor节点，它被复制到集群中的每一个存储节点，以及和集群交互的client。</p><p>当因为一些原因，比如设备崩溃、数据迁移等，cluster map的内容需要改变时，cluster map的版本号被增加，map的版本号可以使通信的双方确认自己的map是否是最新的，版本旧的一方会先将map更新成对方的map，然后才会进行后续操作。</p><h3 id="Data-Placement"><a href="#Data-Placement" class="headerlink" title="Data Placement"></a>Data Placement</h3><p>首先，如下图，总体说下RADOS的存储层次，RADOS中基本的存储单位是对象，一般为2MB或4MB，当一个文件要存入RADOS时，首先会被切分成大小固定的对象（最后一个对象大小可能不同），然后将对象分配到一个PG（Placement Group）中，然后PG会复制几份，伪随机地派给不同的存储节点。当新的存储节点被加入集群，会在已有数据中随机抽取一部分数据迁移到新节点。这种概率平衡的分布方式可以保证设备在潜在的高负载下正常工作。更重要的是，数据的分布过程仅需要做几次随机映射，不需要大型的集中式分配表。</p><p><img src="/images/ceph-4.png" alt="ceph-4"></p><p><strong>对于每个层次的详细说明：</strong></p><ul><li><p>File—— 用户需要存储或者访问的文件。</p></li><li><p>Object—— RADOS的基本存储单元。Object与上面提到的file的区别是，object的最大size由RADOS限定（通常为2MB或4MB），以便实现底层存储的组织管理。因此，当上层应用向RADOS存入size很大的file时，需要将file切分成统一大小的一系列object（最后一个的大小可以不同）进行存储。</p></li><li><p>PG（Placement Group）—— 对object的存储进行组织和位置映射。具体而言，一个PG负责组织若干个object（可以为数千个甚至更多），但一个object只能被映射到一个PG中，即，PG和object之间是“一对多”映射关系。同时，一个PG会被映射到n个OSD上，而每个OSD上都会承载大量的PG，即，PG和OSD之间是“多对多”映射关系。在实践当中，n至少为2（n代表冗余的份数），如果用于生产环境，则至少为3。一个OSD上的PG则可达到数百个。事实上，PG数量的设置牵扯到数据分布的均匀性问题。</p></li><li><p>OSD—— 即object storage device，前文已经详细介绍，此处不再展开。唯一需要说明的是，OSD的数量事实上也关系到系统的数据分布均匀性，因此其数量不应太少。在实践当中，至少也应该是数十上百个的量级才有助于Ceph系统的设计发挥其应有的优势。</p></li></ul><p><strong>各层次之间的映射关系：</strong></p><ul><li><p>file -&gt; object<br>object的最大size是由RADOS配置的，当用户要存储一个file，需要将file切分成几个object。</p></li><li><p>object -&gt; PG<br>每个object都会被映射到一个PG中，然后以PG为单位进行备份以及进一步映射到具体的OSD上。</p></li><li><p>PG -&gt; OSD<br>根据用户设置的冗余存储的个数r，PG会最终存储到r个OSD上，这个映射是通过一种伪随机的映射算法 CRUSH 来实现的，这个算法的特点是可以进行配置。</p></li></ul><h3 id="Ceph集群维护"><a href="#Ceph集群维护" class="headerlink" title="Ceph集群维护"></a>Ceph集群维护</h3><p>前面已经介绍了，由若干个monitor共同负责整个RADOS集群中所有OSD状态的发现与记录，并且共同形成cluster map的master版本，然后扩散至全体OSD以及client。OSD使用cluster map进行数据的维护，而client使用cluster map进行数据的寻址。</p><p>monitor并不主动轮询各个OSD的当前状态。相反，OSD需要向monitor上报状态信息。常见的上报有两种情况：一是新的OSD被加入集群，二是某个OSD发现自身或者其他OSD发生异常。在收到这些上报信息后，monitor将更新cluster map信息并加以扩散。其细节将在下文中加以介绍。</p><p><strong>Cluster map的实际内容包括：</strong></p><ul><li><p>Epoch，即版本号。cluster map的epoch是一个单调递增序列。epoch越大，则cluster map版本越新。因此，持有不同版本cluster map的OSD或client可以简单地通过比较epoch决定应该遵从谁手中的版本。而monitor手中必定有epoch最大、版本最新的cluster map。当任意两方在通信时发现彼此epoch值不同时，将默认先将cluster map同步至高版本一方的状态，再进行后续操作。</p></li><li><p>各个OSD的网络地址。</p></li><li><p>各个OSD的状态。OSD状态的描述分为两个维度：up或者down（表明OSD是否正常工作），in或者out（表明OSD是否在至少一个PG中）。因此，对于任意一个OSD，共有四种可能的状态：<br>up且in：说明该OSD正常运行，且已经承载至少一个PG的数据。这是一个OSD的标准工作状态；</p></li></ul><p>up且out：说明该OSD正常运行，但并未承载任何PG，其中也没有数据。一个新的OSD刚刚被加入Ceph集群后，便会处于这一状态。而一个出现故障的OSD被修复后，重新加入Ceph集群时，也是处于这一状态；</p><p>down且in：说明该OSD发生异常，但仍然承载着至少一个PG，其中仍然存储着数据。这种状态下的OSD刚刚被发现存在异常，可能仍能恢复正常，也可能会彻底无法工作；</p><p>down且out：说明该OSD已经彻底发生故障，且已经不再承载任何PG。</p><ul><li>CRUSH算法配置参数。表明了Ceph集群的物理层级关系（cluster hierarchy），位置映射规则（placement rules）。<br>根据cluster map的定义可以看出，其版本变化通常只会由（3）和（4）两项信息的变化触发。而这两者相比，（3）发生变化的概率更高一些。这可以通过下面对OSD工作状态变化过程的介绍加以反映。</li></ul><p>一个新的OSD上线后，首先根据配置信息与monitor通信。Monitor将其加入cluster map，并设置为up且out状态，再将最新版本的cluster map发给这个新OSD。</p><p>收到monitor发来的cluster map之后，这个新OSD计算出自己所承载的PG（为简化讨论，此处我们假定这个新的OSD开始只承载一个PG），以及和自己承载同一个PG的其他OSD。然后，新OSD将与这些OSD取得联系。如果这个PG目前处于降级状态（即承载该PG的OSD个数少于正常值，如正常应该是3个，此时只有2个或1个。这种情况通常是OSD故障所致），则其他OSD将把这个PG内的所有对象和元数据复制给新OSD。数据复制完成后，新OSD被置为up且in状态。而cluster map内容也将据此更新。这事实上是一个自动化的failure recovery过程。当然，即便没有新的OSD加入，降级的PG也将计算出其他OSD实现failure recovery。</p><p>如果该PG目前一切正常，则这个新OSD将替换掉现有OSD中的一个（PG内将重新选出Primary OSD），并承担其数据。在数据复制完成后，新OSD被置为up且in状态，而被替换的OSD将退出该PG（但状态通常仍然为up且in，因为还要承载其他PG）。而cluster map内容也将据此更新。这事实上是一个自动化的数据re-balancing过程。</p><p>如果一个OSD发现和自己共同承载一个PG的另一个OSD无法联通，则会将这一情况上报monitor。此外，如果一个OSD deamon发现自身工作状态异常，也将把异常情况主动上报给monitor。在上述情况下，monitor将把出现问题的OSD的状态设为down且in。如果超过某一预订时间期限，该OSD仍然无法恢复正常，则其状态将被设置为down且out。反之，如果该OSD能够恢复正常，则其状态会恢复为up且in。在上述这些状态变化发生之后，monitor都将更新cluster map并进行扩散。这事实上是自动化的failure detection过程。</p><p>对于一个RADOS集群而言，即便由数千个甚至更多OSD组成，cluster map的数据结构大小也并不惊人。同时，cluster map的状态更新并不会频繁发生。即便如此，Ceph依然对cluster map信息的扩散机制进行了优化，以便减轻相关计算和通信压力：</p><p>首先，cluster map信息是以增量形式扩散的。如果任意一次通信的双方发现其epoch不一致，则版本更新的一方将把二者所拥有的cluster map的差异发送给另外一方。</p><p>其次，cluster map信息是以异步且lazy的形式扩散的。也即，monitor并不会在每一次cluster map版本更新后都将新版本广播至全体OSD，而是在有OSD向自己上报信息时，将更新回复给对方。类似的，各个OSD也是在和其他OSD通信时，将更新发送给版本低于自己的对方。</p><p>基于上述机制，Ceph避免了由于cluster map版本更新而引起的广播风暴。这虽然是一种异步且lazy的机制，但对于一个由n个OSD组成的Ceph集群，任何一次版本更新能够在O(log(n))时间复杂度内扩散到集群中的任何一个OSD上。</p><p>一个可能被问到的问题是：既然这是一种异步和lazy的扩散机制，则在版本扩散过程中，系统必定出现各个OSD看到的cluster map不一致的情况，这是否会导致问题？答案是：不会。事实上，如果一个client和它要访问çAPG内部的各个OSD看到的cluster map状态一致，则访问操作就可以正确进行。而如果这个client或者PG中的某个OSD和其他几方的cluster map不一致，则根据Ceph的机制设计，这几方将首先同步cluster map至最新状态，并进行必要的数据re-balancing操作，然后即可继续正常访问。</p><h2 id="Ceph内部架构"><a href="#Ceph内部架构" class="headerlink" title="Ceph内部架构"></a>Ceph内部架构</h2><p><img src="/images/ceph-4.png" alt="ceph-4"></p><p>每台服务器都有好几块磁盘（sda,sdb,sdc等），磁盘又可以进一步分区（sda1,sda2等）。CEPH中最基本的进程就是OSD(对象存储设备)，每个磁盘对应一个OSD。</p><p>如果用户通过客户端想要存储一个文件，那么在RADOS中，该文件实际上会分为一个个4M块大小的对象。每个文件都一个文件ID(例如A),那么这些对象的ID就是（A0,A1,A2等）。然而在分布式储存系统中，有成千上万个对象，光遍历就要花很长的时间，所以对象会先通过hash-取模运算，存放到一个PG（Place Group）中，PG相当于数据库中的索引（PG的数量是固定的，不会随着OSD的增加或者删除而改变），这样一来，只需要首先定位到PG的位置，然后在PG中查询对象即可，大大提高了查询的效率。之后，PG中的对象又会根据设置的副本数量进行复制，并根据Crush算法存储到OSD节点上。</p><p>无论使用哪种存储方式（对象、块、挂载），存储的数据都会被切分成对象（Objects）。Objects size大小可以由管理员调整，通常为2M或4M。每个对象都会有一个唯一的OID，由<br>ino与ono生成。ino即是文件的File ID，用于在全局唯一标示每一个文件，而ono则是分片的编号。比如：一个文件FileID为A，它被切成了两个对象，一个对象编号0，另一个编号1，那么这两个文件的oid则为A0与A1。Oid的好处是可以唯一标示每个不同的对象，并且存储了对象与文件的从属关系。</p><p>但是对象并不会直接存储进OSD中，因为对象的size很小，在一个大规模的集群中可能有几百到几千万个对象。这么多对象光是遍历寻址，速度都是很缓慢的；并且如果将对象直接通过某种固定映射的哈希算法映射到osd上，当这个osd损坏时，对象无法自动迁移至其他osd上面（因为映射函数不允许）。为了解决这些问题，ceph引入了归置组的概念，即PG。</p><p>PG是一个逻辑概念，我们linux系统中可以直接看到对象，但是无法直接看到PG。它在数据寻址时类似于数据库中的索引：每个对象都会固定映射进一个PG中，所以当我们要寻找一个对象时，只需要先找到对象所属的PG，然后遍历这个PG就可以了，无需遍历所有对象。而且在数据迁移时，也是以PG作为基本单位进行迁移，ceph不会直接操作对象。</p><p>对象映射进PG的方式：使用静态hash函数对OID做hash取出特征码，用特征码与PG的数量去模，得出PGID。<br>最后PG会根据管理员设置的副本数量进行复制，然后通过crush算法存储到不同的OSD节点上。</p><h2 id="Ceph的基本组件"><a href="#Ceph的基本组件" class="headerlink" title="Ceph的基本组件"></a>Ceph的基本组件</h2><p><img src="/images/ceph-5.png" alt="ceph-5"></p><p>如上图所示，Ceph主要有三个基本进程</p><ul><li><p>Osd<br>用于集群中所有数据与对象的存储。处理集群数据的复制、恢复、回填、再均衡。并向其他osd守护进程发送心跳，然后向Mon提供一些监控信息。<br>当Ceph存储集群设定数据有两个副本时（一共存两份），则至少需要两个OSD守护进程即两个OSD节点，集群才能达到active+clean状态。</p></li><li><p>MDS(可选)<br>为Ceph文件系统提供元数据计算、缓存与同步。在ceph中，元数据也是存储在osd节点中的，mds类似于元数据的代理缓存服务器。<br>MDS进程并不是必须的进程，只有需要使用CEPHFS时，才需要配置MDS节点。</p></li><li><p>Monitor<br>监控整个集群Cluster map的状态，维护集群的cluster MAP二进制表，保证集群数据的一致性。ClusterMAP描述了对象块存储的物理位置，以及一个将设备<br>聚合到物理位置的桶列表。</p></li></ul><p><strong>Ceph要求必须是奇数个Monitor监控节点，而且至少是3个！</strong>（如果是自己私下测试玩玩的话，可以是1个，但是生产环境绝不建议1个）用于维护和监控整个集群的状态，每个Monitor都有一个Cluster Map，只要有这个Map，就能够清楚知道每个对象存储在什么位置了。客户端会先tcp连接到Monitor，从中获取Cluster Map，并在客户端进行计算，当知道对象的位置后，再直接与OSD通信（去中心化的思想）。OSD节点平常会向Monitor节点发送简单心跳，只有当添加、删除或者出现异常状况时，才会自动上报信息给Monitor。</p><p>MDS是可选的，只有需要使用Ceph FS的时候才需要配置MDS节点。在Ceph中，元数据也是存放在OSD中的，MDS只相当于元数据的缓存服务器。</p><p>在Ceph中，如果要写数据，只能向主OSD写，然后再由主OSD向从OSD同步地写，只有当从OSD返回结果给主OSD后，主OSD才会向客户端报告写入完成的消息。如果要读数据，不会使用读写分离，而是也需要先向主OSD发请求，以保证数据的强一致性。</p><h3 id="OSD"><a href="#OSD" class="headerlink" title="OSD"></a>OSD</h3><p>首先描述一下ceph数据的存储过程，如下图：</p><p><img src="/images/ceph-4.png" alt="ceph-4"></p><p>无论使用哪种存储方式（对象、块、挂载），存储的数据都会被切分成对象（Objects）。Objects size大小可以由管理员调整，通常为2M或4M。<br>每个对象都会有一个唯一的OID，由ino与ono生成，虽然这些名词看上去很复杂，其实相当简单。ino即是文件的File ID，用于在全局唯一标示每一个文件，<br>而ono则是分片的编号。比如：一个文件FileID为A，它被切成了两个对象，一个对象编号0，另一个编号1，那么这两个文件的oid则为A0与A1。<br>Oid的好处是可以唯一标示每个不同的对象，并且存储了对象与文件的从属关系。由于ceph的所有数据都虚拟成了整齐划一的对象，所以在读写时效率都会比较高。</p><p>但是对象并不会直接存储进OSD中，因为对象的size很小，在一个大规模的集群中可能有几百到几千万个对象。这么多对象光是遍历寻址，速度都是很缓慢的；<br>并且如果将对象直接通过某种固定映射的哈希算法映射到osd上，当这个osd损坏时，对象无法自动迁移至其他osd上面（因为映射函数不允许）。<br>为了解决这些问题，ceph引入了归置组的概念，即PG。</p><p>PG是一个逻辑概念，我们linux系统中可以直接看到对象，但是无法直接看到PG。它在数据寻址时类似于数据库中的索引：每个对象都会固定映射进一个PG中，<br>所以当我们要寻找一个对象时，只需要先找到对象所属的PG，然后遍历这个PG就可以了，无需遍历所有对象。而且在数据迁移时，也是以PG作为基本单位进行迁移，<br>ceph不会直接操作对象。</p><p>对象时如何映射进PG的？还记得OID么？首先使用静态hash函数对OID做hash取出特征码，用特征码与PG的数量去模，得到的序号则是PGID。由于这种设计方式，<br>PG的数量多寡直接决定了数据分布的均匀性，所以合理设置的PG数量可以很好的提升CEPH集群的性能并使数据均匀分布。</p><p>最后PG会根据管理员设置的副本数量进行复制，然后通过crush算法存储到不同的OSD节点上（其实是把PG中的所有对象存储到节点上），第一个osd节点即为主节点，<br>其余均为从节点。</p><p>下面是一段ceph中的伪代码,简要描述了ceph的数据存储流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">locator = object_name</span><br><span class="line">obj_hash =  <span class="built_in">hash</span>(locator)</span><br><span class="line">pg = obj_hash % num_pg</span><br><span class="line">osds_for_pg = crush(pg)    <span class="comment"># returns a list of osds</span></span><br><span class="line">primary = osds_for_pg[0]</span><br><span class="line">replicas = osds_for_pg[1:]</span><br></pre></td></tr></table></figure><p><img src="/images/ceph-6.png" alt="ceph-6"></p><p>上图中更好的诠释了ceph数据流的存储过程，数据无论是从三中接口哪一种写入的，最终都要切分成对象存储到底层的RADOS中。逻辑上通过算法先映射到PG上，最终存储近OSD节点里。图中除了之前介绍过的概念之外多了一个pools的概念。</p><p><img src="/images/ceph-7.png" alt="ceph-7"></p><p>Pool是管理员自定义的命名空间，像其他的命名空间一样，用来隔离对象与PG。我们在调用API存储即使用对象存储时，需要指定对象要存储进哪一个POOL中。除了隔离数据，我们也可以分别对不同的POOL设置不同的优化策略，比如副本数、数据清洗次数、数据块及对象大小等。</p><p>OSD是强一致性的分布式存储，它的读写流程如下图：<br><img src="/images/ceph-8.png" alt="ceph-8"></p><p>Ceph的读写操作采用主从模型，客户端要读写数据时，只能向对象所对应的主osd节点发起请求。主节点在接受到写请求时，会同步的向从OSD中写入数据。当所有的OSD节点都写入完成后，主节点才会向客户端报告写入完成的信息。因此保证了主从节点数据的高度一致性。而读取的时候，客户端也只会向主osd节点发起读请求，并不会有类似于数据库中的读写分离的情况出现，这也是出于强一致性的考虑。由于所有写操作都要交给主osd节点来处理，所以在数据量很大时，性能可能会比较慢，为了克服这个问题以及让ceph能支持事物，每个osd节点都包含了一个journal文件，稍后介绍。</p><p>数据流向介绍到这里就告一段落了，现在终于回到正题：osd进程。在ceph中，每一个osd进程都可称作是一个osd节点，也就是说，每台存储服务器上可能包含了众多的osd节点，每个osd节点监听不同的端口，类似于在同一台服务器上跑多个mysql或redis。每个osd节点可以设置一个目录作为实际存储区域，也可以是一个分区，一整块硬盘。如下图，当前这台机器上跑了两个osd进程，每个osd监听4个端口，分别用于接收客户请求、传输数据、发送心跳、同步数据等操作。</p><p><img src="/images/ceph-9.png" alt="ceph-9"></p><p>如上图所示，osd节点默认监听tcp的6800到6803端口，如果同一台服务器上有多个osd节点，则依次往后排序。</p><p>在生产环境中的osd最少可能都有上百个，所以每个osd都有一个全局的编号，类似osd0，osd1，osd2……..序号根据osd诞生的顺序排列，并且是全局唯一的。存储了相同PG的osd节点除了向mon节点发送心跳外，还会互相发送心跳信息以检测pg数据副本是否正常。</p><p><img src="/images/ceph-10.png" alt="ceph-10"></p><p>默认大小为5G，也就说每创建一个osd节点，还没使用就要被journal占走5G的空间。这个值是可以调整的，具体大小要依osd的总大小而定。</p><p>Journal的作用类似于mysql innodb引擎中的事物日志系统。当有突发的大量写入操作时，ceph可以先把一些零散的，随机的IO请求保存到缓存中进行合并，然后再统一向内核发起IO请求。这样做效率会比较高，但是一旦osd节点崩溃，缓存中的数据就会丢失，所以数据在还未写进硬盘中时，都会记录到journal中，当osd崩溃后重新启动时，会自动尝试从journal恢复因崩溃丢失的缓存数据。因此journal的io是非常密集的，而且由于一个数据要io两次，很大程度上也损耗了硬件的io性能，所以通常在生产环境中，使用ssd来单独存储journal文件以提高ceph读写性能。</p><h3 id="monitor节点"><a href="#monitor节点" class="headerlink" title="monitor节点"></a>monitor节点</h3><p>Mon节点监控着整个ceph集群的状态信息，监听于tcp的6789端口。每一个ceph集群中至少要有一个Mon节点，官方推荐每个集群至少部署三台。Mon节点中保存了最新的版本集群数据分布图（cluster map）的主副本。客户端在使用时，需要挂载mon节点的6789端口，下载最新的cluster map，通过crush算法获得集群中各osd的IP地址，然后再与osd节点直接建立连接来传输数据。所以对于ceph来说，并不需要有集中式的主节点用于计算与寻址，客户端分摊了这部分工作。而且客户端也可以直接和osd通信，省去了中间代理服务器的额外开销。</p><p>Mon节点之间使用Paxos算法来保持各节点cluster map的一致性；各mon节点的功能总体上是一样的，相互间的关系可以被简单理解为主备关系。如果主mon节点损坏，其他mon存活节点超过半数时，集群还可以正常运行。当故障mon节点恢复时，会主动向其他mon节点拉取最新的cluster map。</p><p>Mon节点并不会主动轮询各个osd的当前状态，相反，osd只有在一些特殊情况才会上报自己的信息，平常只会简单的发送心跳。特殊情况包括：1、新的OSD被加入集群；2、某个OSD发现自身或其他OSD发生异常。Mon节点在收到这些上报信息时，则会更新cluster map信息并加以扩散。</p><p>cluster map信息是以异步且lazy的形式扩散的。monitor并不会在每一次cluster map版本更新后都将新版本广播至全体OSD，而是在有OSD向自己上报信息时，将更新回复给对方。类似的，各个OSD也是在和其他OSD通信时，如果发现对方的osd中持有的cluster map版本较低，则把自己更新的版本发送给对方。</p><p>推荐使用以下的架构：<br><img src="/images/ceph-11.png" alt="ceph-11.png"></p><p>这里的ceph除了管理网段外，设了两个网段，一个用于客户端读写传输数据。另一个用于各OSD节点之间同步数据和发送心跳信息等。这样做的好处是可以分担网卡的IO压力。否则在数据清洗时，客户端的读写速度会变得极为缓慢。</p><h3 id="MDS"><a href="#MDS" class="headerlink" title="MDS"></a>MDS</h3><p>Mds是ceph集群中的元数据服务器，而通常它都不是必须的，因为只有在使用cephfs的时候才需要它，而目在云计算中用的更广泛的是另外两种存储方式。<br>Mds虽然是元数据服务器，但是它不负责存储元数据，元数据也是被切成对象存在各个osd节点中的，如下图：</p><p><img src="/images/ceph-12.png" alt="ceph-12"></p><p>在创建CEPHFS时，要至少创建两个POOL，一个用于存放数据，另一个用于存放元数据。Mds只是负责接受用户的元数据查询请求，然后从osd中把数据取出来映射进自己的内存中供客户访问。所以mds其实类似一个代理缓存服务器，替osd分担了用户的访问压力,如下图：</p><p><img src="/images/ceph-13.png" alt="ceph-13"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是分布式存储系统Ceph的原理介绍。&lt;/p&gt;
&lt;h2 id=&quot;Ceph简单概述&quot;&gt;&lt;a href=&quot;#Ceph简单概述&quot; class=&quot;headerlink&quot; title=&quot;Ceph简单概述&quot;&gt;&lt;/a&gt;Ceph简单概述&lt;/h2&gt;&lt;p&gt;Ceph是一个分布式存储系统
      
    
    </summary>
    
      <category term="分布式存储系统Ceph原理介绍" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9FCeph%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="Ceph" scheme="http://yoursite.com/tags/Ceph/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像仓库Harbor搭建</title>
    <link href="http://yoursite.com/2018/03/12/harbor-installation/"/>
    <id>http://yoursite.com/2018/03/12/harbor-installation/</id>
    <published>2018-03-11T16:00:00.000Z</published>
    <updated>2018-03-23T03:46:26.193Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是Docker镜像仓库Harbor在CentOS 7环境下搭建全过程</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="/images/harbor-logo.png" alt="harbor-logo"><br>Harbor 是一个企业级的 Docker Registry，可以实现 images 的私有存储和日志统计权限控制等功能，并支持创建多项目(Harbor 提出的概念)，基于官方 Registry V2 实现。官方提供了两种版本：<a href="https://storage.googleapis.com/harbor-releases/release-1.4.0/harbor-online-installer-v1.4.0.tgz" target="_blank" rel="noopener">在线版v1.4.0</a>和<a href="https://storage.googleapis.com/harbor-releases/release-1.4.0/harbor-offline-installer-v1.4.0.tgz" target="_blank" rel="noopener">离线版v1.4.0</a>。<br>更多版本请看，<a href="https://storage.googleapis.com/harbor-releases" target="_blank" rel="noopener">官方release</a></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>CentOS 7</p></li><li><p>Docker Version: 17.12.1</p></li><li><p>Docker-Compose Version: 1.18.0</p></li></ul><p>Docker环境请参考<a href="https://polaris0112.github.io/2018/03/11/docker-install/" target="_blank" rel="noopener">《Docker安装部署教程》</a></p><p><code>Docker-Compose</code>可以使用以下命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="Harbor服务搭建"><a href="#Harbor服务搭建" class="headerlink" title="Harbor服务搭建"></a>Harbor服务搭建</h2><h3 id="从官网下载安装包-推荐离线安装包"><a href="#从官网下载安装包-推荐离线安装包" class="headerlink" title="从官网下载安装包(推荐离线安装包)"></a>从官网下载安装包(推荐离线安装包)</h3><p>因为国内连国外网经常出现慢或者断线的情况，导致安装某些依赖镜像的时候卡住，镜像又不支持断点续传，所以最好使用离线安装包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 下载harbor-v1.4.0离线安装包</span></span><br><span class="line">$ wget https://storage.googleapis.com/harbor-releases/release-1.4.0/harbor-offline-installer-v1.4.0.tgz</span><br><span class="line">$ tar xf harbor-offline-installer-v1.4.0.tgz</span><br></pre></td></tr></table></figure><h3 id="配置Harbor"><a href="#配置Harbor" class="headerlink" title="配置Harbor"></a>配置Harbor</h3><p>解压缩之后，会有一个<code>Harbor</code>的文件夹，里面会有一个<code>harbor.cfg</code>配置文件，我们需要对里面的参数进行更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">$ vim harbor.cfg</span><br><span class="line"><span class="comment">## 配置域名或者直接IP地址</span></span><br><span class="line">hostname = harbor-test.com                              <span class="comment">##需要修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on</span></span><br><span class="line">ui_url_protocol = https</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置进程数</span></span><br><span class="line">max_job_workers = 3 </span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置自定义ssl认证</span></span><br><span class="line">customize_crt = on</span><br><span class="line">ssl_cert = /data/cert/harbor-test.com.crt               <span class="comment">##需要修改</span></span><br><span class="line">ssl_cert_key = /data/cert/harbor-test.com.key           <span class="comment">##需要修改</span></span><br><span class="line">secretkey_path = /data</span><br><span class="line">admiral_url = NA</span><br><span class="line">log_rotate_count = 50</span><br><span class="line">log_rotate_size = 200M</span><br><span class="line"></span><br><span class="line"><span class="comment">## 邮件设置，发送重置密码邮件时使用</span></span><br><span class="line">email_identity = </span><br><span class="line">email_server = smtp.exmail.qq.com                       <span class="comment">##需要修改</span></span><br><span class="line">email_server_port = 645                                 <span class="comment">##需要修改</span></span><br><span class="line">email_username =                                        <span class="comment">##需要修改</span></span><br><span class="line">email_password =                                        <span class="comment">##需要修改</span></span><br><span class="line">email_from = Harbor &lt;xxxx@xxx.com&gt;                      <span class="comment">##需要修改</span></span><br><span class="line">email_ssl = <span class="literal">false</span></span><br><span class="line">email_insecure = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Harbor界面登录密码</span></span><br><span class="line">harbor_admin_password = Harbor123                       <span class="comment">##需要修改</span></span><br><span class="line">auth_mode = db_auth</span><br><span class="line"></span><br><span class="line"><span class="comment">## LDAP认证时配置项，如果上方auth_mode选择db_auth的话，下方其实没用到，但是注释的话会有报错。</span></span><br><span class="line">ldap_url = ldaps://ldap.mydomain.com</span><br><span class="line">ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com</span><br><span class="line">ldap_search_pwd = password</span><br><span class="line">ldap_basedn = ou=people,dc=mydomain,dc=com</span><br><span class="line">ldap_uid = uid </span><br><span class="line">ldap_scope = 2 </span><br><span class="line">ldap_timeout = 5</span><br><span class="line">ldap_verify_cert = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 是否开启自注册</span></span><br><span class="line">self_registration = on</span><br><span class="line"></span><br><span class="line"><span class="comment">## Token有效时间，默认30分钟</span></span><br><span class="line">token_expiration = 30</span><br><span class="line"></span><br><span class="line"><span class="comment">## 用户创建项目权限控制，默认是everyone（所有人），也可以设置为adminonly（只能管理员）</span></span><br><span class="line">project_creation_restriction = everyone</span><br><span class="line"></span><br><span class="line"><span class="comment">## 数据库配置相关</span></span><br><span class="line">db_host = mysql</span><br><span class="line">db_password = </span><br><span class="line">db_port = 3306</span><br><span class="line">db_user = root</span><br><span class="line"></span><br><span class="line"><span class="comment">## redis配置，如果有需要，没有的话可以留空</span></span><br><span class="line">redis_url =</span><br><span class="line"></span><br><span class="line"><span class="comment">## clair镜像扫描功能，可以检查镜像操作系统以及上面安装包是否与已知不安全的包版本相匹配，从而提高镜像安全性。</span></span><br><span class="line">clair_db_host = postgres</span><br><span class="line">clair_db_password = password</span><br><span class="line">clair_db_port = 5432</span><br><span class="line">clair_db_username = postgres</span><br><span class="line">clair_db = postgres</span><br><span class="line"></span><br><span class="line"><span class="comment">## 同理，以下设置的是uaa_auth登录方式</span></span><br><span class="line">uaa_endpoint = uaa.mydomain.org</span><br><span class="line">uaa_clientid = id</span><br><span class="line">uaa_clientsecret = secret</span><br><span class="line">uaa_verify_cert = <span class="literal">true</span></span><br><span class="line">uaa_ca_cert = /path/to/ca.pem</span><br><span class="line"></span><br><span class="line"><span class="comment">## 此处的registry后端使用filesystem</span></span><br><span class="line">registry_storage_provider_name = filesystem</span><br><span class="line">registry_storage_provider_config =</span><br></pre></td></tr></table></figure><p>由于上述配置文件中涉及到ssl证书，生成在<code>/data/cert</code>目录下，所以需要执行以下生成命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/cert</span><br><span class="line">$ <span class="built_in">cd</span> /data/cert</span><br><span class="line">$ localdomain=harbor-test.com   <span class="comment">##修改为自己的域名</span></span><br><span class="line">$ openssl req -nodes -subj <span class="string">"/C=CN/ST=GuangDong/L=GuangZhou/CN=<span class="variable">$localdomain</span>"</span> -newkey rsa:2048 -keyout <span class="variable">$localdomain</span>.key -out <span class="variable">$localdomain</span>.csr</span><br><span class="line">$ openssl x509 -req -days 3650 -<span class="keyword">in</span> <span class="variable">$localdomain</span>.csr -signkey <span class="variable">$localdomain</span>.key -out <span class="variable">$localdomain</span>.crt</span><br><span class="line">$ openssl x509 -req -<span class="keyword">in</span> <span class="variable">$localdomain</span>.csr -CA <span class="variable">$localdomain</span>.crt -CAkey <span class="variable">$localdomain</span>.key -CAcreateserial -out <span class="variable">$localdomain</span>.crt -days 10000</span><br></pre></td></tr></table></figure></p><p>命令正常完成后应该会有四个文件，后缀名分别是.crt，.csr，.key，.srl，文件名就是对应的域名</p><p>修改完配置文件后，在的当前目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">$ ./install.sh</span><br><span class="line"><span class="comment">## 运行结果</span></span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 17.12.1</span><br><span class="line"></span><br><span class="line">Note: docker-compose version: 1.18.0</span><br><span class="line"></span><br><span class="line">[Step 1]: loading Harbor images ...</span><br><span class="line">651f69aef02c: Loading layer [==================================================&gt;]  135.8MB/135.8MB</span><br><span class="line">40a1aad64343: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">3fe2713e4072: Loading layer [==================================================&gt;]  12.16MB/12.16MB</span><br><span class="line">ba3a1eb0e375: Loading layer [==================================================&gt;]   17.3MB/17.3MB</span><br><span class="line">447427ec5e1a: Loading layer [==================================================&gt;]  15.87kB/15.87kB</span><br><span class="line">4ccb4026663c: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">16faa95946a1: Loading layer [==================================================&gt;]  29.46MB/29.46MB</span><br><span class="line">Loaded image: vmware/notary-server-photon:v0.5.1-v1.4.0</span><br><span class="line">fa7ba9fd42c9: Loading layer [==================================================&gt;]  10.95MB/10.95MB</span><br><span class="line">4e400f9ae23e: Loading layer [==================================================&gt;]   17.3MB/17.3MB</span><br><span class="line">2802fb27c88b: Loading layer [==================================================&gt;]  15.87kB/15.87kB</span><br><span class="line">e6367a4e1e1e: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">8ece8dfcdd98: Loading layer [==================================================&gt;]  28.24MB/28.24MB</span><br><span class="line">Loaded image: vmware/notary-signer-photon:v0.5.1-v1.4.0</span><br><span class="line">a7dd1a8afcaf: Loading layer [==================================================&gt;]  396.7MB/396.7MB</span><br><span class="line">05adebbe496f: Loading layer [==================================================&gt;]  9.216kB/9.216kB</span><br><span class="line">86eb534949fa: Loading layer [==================================================&gt;]  9.216kB/9.216kB</span><br><span class="line">d7f127c69380: Loading layer [==================================================&gt;]   7.68kB/7.68kB</span><br><span class="line">5ac1c4dc5ee9: Loading layer [==================================================&gt;]  1.536kB/1.536kB</span><br><span class="line">d0bec56b5b1a: Loading layer [==================================================&gt;]  9.728kB/9.728kB</span><br><span class="line">4bbe83860556: Loading layer [==================================================&gt;]   2.56kB/2.56kB</span><br><span class="line">e526f9e6769f: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">Loaded image: vmware/harbor-db:v1.4.0</span><br><span class="line">1cff102bbda2: Loading layer [==================================================&gt;]  154.1MB/154.1MB</span><br><span class="line">04c9f3e07de1: Loading layer [==================================================&gt;]  10.75MB/10.75MB</span><br><span class="line">7b6c7bf54f5c: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">42f8acdb7fe3: Loading layer [==================================================&gt;]  48.13kB/48.13kB</span><br><span class="line">5b6299d0a1df: Loading layer [==================================================&gt;]   10.8MB/10.8MB</span><br><span class="line">Loaded image: vmware/clair-photon:v2.0.1-v1.4.0</span><br><span class="line">6534131f457c: Loading layer [==================================================&gt;]  94.76MB/94.76MB</span><br><span class="line">73f582101e4b: Loading layer [==================================================&gt;]  6.656kB/6.656kB</span><br><span class="line">86d847823c48: Loading layer [==================================================&gt;]  6.656kB/6.656kB</span><br><span class="line">Loaded image: vmware/postgresql-photon:v1.4.0</span><br><span class="line">5cd250d5a352: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">ad3fd52b54f3: Loading layer [==================================================&gt;]  14.99MB/14.99MB</span><br><span class="line">13b1e24cc368: Loading layer [==================================================&gt;]  14.99MB/14.99MB</span><br><span class="line">Loaded image: vmware/harbor-adminserver:v1.4.0</span><br><span class="line">c26c69706710: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">223f6fe02cc8: Loading layer [==================================================&gt;]  23.45MB/23.45MB</span><br><span class="line">1fc843c8698a: Loading layer [==================================================&gt;]  7.168kB/7.168kB</span><br><span class="line">e09293610ee7: Loading layer [==================================================&gt;]  10.39MB/10.39MB</span><br><span class="line">d59f9780b1d8: Loading layer [==================================================&gt;]  23.44MB/23.44MB</span><br><span class="line">Loaded image: vmware/harbor-ui:v1.4.0</span><br><span class="line">dd4753242e59: Loading layer [==================================================&gt;]  73.07MB/73.07MB</span><br><span class="line">95aed61ca251: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">1864f9818562: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">da2a19f80b81: Loading layer [==================================================&gt;]  4.096kB/4.096kB</span><br><span class="line">058531639e75: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">a84e69fb619b: Loading layer [==================================================&gt;]  10.24kB/10.24kB</span><br><span class="line">Loaded image: vmware/harbor-log:v1.4.0</span><br><span class="line">b1056051f246: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">07678065e08b: Loading layer [==================================================&gt;]  19.19MB/19.19MB</span><br><span class="line">a2d9bdb8f5fb: Loading layer [==================================================&gt;]  19.19MB/19.19MB</span><br><span class="line">Loaded image: vmware/harbor-jobservice:v1.4.0</span><br><span class="line">7f58ce57cd5e: Loading layer [==================================================&gt;]  4.805MB/4.805MB</span><br><span class="line">Loaded image: vmware/nginx-photon:v1.4.0</span><br><span class="line">4c8965978b77: Loading layer [==================================================&gt;]  23.24MB/23.24MB</span><br><span class="line">1466c942edde: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">ac5c17331735: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">86824c7c466a: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">fd3bd0e70d67: Loading layer [==================================================&gt;]   22.8MB/22.8MB</span><br><span class="line">b02195d77636: Loading layer [==================================================&gt;]   22.8MB/22.8MB</span><br><span class="line">Loaded image: vmware/registry-photon:v2.6.2-v1.4.0</span><br><span class="line">Loaded image: vmware/photon:1.0</span><br><span class="line">Loaded image: vmware/mariadb-photon:v1.4.0</span><br><span class="line">454c81edbd3b: Loading layer [==================================================&gt;]  135.2MB/135.2MB</span><br><span class="line">e99db1275091: Loading layer [==================================================&gt;]  395.4MB/395.4MB</span><br><span class="line">051e4ee23882: Loading layer [==================================================&gt;]  9.216kB/9.216kB</span><br><span class="line">6cca4437b6f6: Loading layer [==================================================&gt;]  9.216kB/9.216kB</span><br><span class="line">1d48fc08c8bc: Loading layer [==================================================&gt;]   7.68kB/7.68kB</span><br><span class="line">0419724fd942: Loading layer [==================================================&gt;]  1.536kB/1.536kB</span><br><span class="line">526b2156bd7a: Loading layer [==================================================&gt;]  637.8MB/637.8MB</span><br><span class="line">9ebf6900ecbd: Loading layer [==================================================&gt;]  78.34kB/78.34kB</span><br><span class="line">Loaded image: vmware/harbor-db-migrator:1.4</span><br><span class="line"></span><br><span class="line">[Step 2]: preparing environment ...</span><br><span class="line">Clearing the configuration file: ./common/config/adminserver/env</span><br><span class="line">Clearing the configuration file: ./common/config/ui/env</span><br><span class="line">Clearing the configuration file: ./common/config/ui/app.conf</span><br><span class="line">Clearing the configuration file: ./common/config/ui/private_key.pem</span><br><span class="line">Clearing the configuration file: ./common/config/db/env</span><br><span class="line">Clearing the configuration file: ./common/config/jobservice/env</span><br><span class="line">Clearing the configuration file: ./common/config/jobservice/app.conf</span><br><span class="line">Clearing the configuration file: ./common/config/registry/config.yml</span><br><span class="line">Clearing the configuration file: ./common/config/registry/root.crt</span><br><span class="line">Clearing the configuration file: ./common/config/nginx/cert/harbor.qtz.crt</span><br><span class="line">Clearing the configuration file: ./common/config/nginx/cert/harbor.qtz.key</span><br><span class="line">Clearing the configuration file: ./common/config/nginx/nginx.conf</span><br><span class="line">Clearing the configuration file: ./common/config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">loaded secret from file: /data/secretkey</span><br><span class="line">Generated configuration file: ./common/config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: ./common/config/adminserver/env</span><br><span class="line">Generated configuration file: ./common/config/ui/env</span><br><span class="line">Generated configuration file: ./common/config/registry/config.yml</span><br><span class="line">Generated configuration file: ./common/config/db/env</span><br><span class="line">Generated configuration file: ./common/config/jobservice/env</span><br><span class="line">Generated configuration file: ./common/config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Generated configuration file: ./common/config/jobservice/app.conf</span><br><span class="line">Generated configuration file: ./common/config/ui/app.conf</span><br><span class="line">Generated certificate, key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt</span><br><span class="line">The configuration files are ready, please use docker-compose to start the service.</span><br><span class="line"></span><br><span class="line">Creating harbor-log ... <span class="keyword">done</span></span><br><span class="line">[Step 3]: checking existing instance of Harbor ...</span><br><span class="line"></span><br><span class="line">Creating registry ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-ui ... <span class="keyword">done</span></span><br><span class="line">Creating network <span class="string">"harbor_harbor"</span> with the default driver</span><br><span class="line">Creating nginx ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-db ... </span><br><span class="line">Creating harbor-adminserver ... </span><br><span class="line">Creating registry ... </span><br><span class="line">Creating harbor-ui ... </span><br><span class="line">Creating harbor-jobservice ... </span><br><span class="line">Creating nginx ... </span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at https://harbor.qtz. </span><br><span class="line">For more details, please visit https://github.com/vmware/harbor .</span><br></pre></td></tr></table></figure><h2 id="查看启动后状态"><a href="#查看启动后状态" class="headerlink" title="查看启动后状态"></a>查看启动后状态</h2><ul><li>Docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">vmware/clair-photon                       v2.0.1-v1.4.0       a1df3526fe43        6 weeks ago         300MB</span><br><span class="line">vmware/notary-server-photon               v0.5.1-v1.4.0       3edfddb8ece2        6 weeks ago         211MB</span><br><span class="line">vmware/notary-signer-photon               v0.5.1-v1.4.0       cc70a05cdb6a        6 weeks ago         209MB</span><br><span class="line">vmware/registry-photon                    v2.6.2-v1.4.0       8920f621ddd1        6 weeks ago         198MB</span><br><span class="line">vmware/nginx-photon                       v1.4.0              20c8a01ac6ab        6 weeks ago         135MB</span><br><span class="line">vmware/harbor-log                         v1.4.0              9e818c7a27ab        6 weeks ago         200MB</span><br><span class="line">vmware/harbor-jobservice                  v1.4.0              29c14d91b043        6 weeks ago         191MB</span><br><span class="line">vmware/harbor-ui                          v1.4.0              6cb4318eda6a        6 weeks ago         209MB</span><br><span class="line">vmware/harbor-adminserver                 v1.4.0              8145970fa013        6 weeks ago         182MB</span><br><span class="line">vmware/harbor-db                          v1.4.0              c38da34727f0        6 weeks ago         521MB</span><br><span class="line">vmware/mariadb-photon                     v1.4.0              8457013cf6e3        6 weeks ago         521MB</span><br><span class="line">vmware/postgresql-photon                  v1.4.0              59aa61520094        6 weeks ago         221MB</span><br><span class="line">vmware/harbor-db-migrator                 1.4                 7a4d871b612e        2 months ago        1.15GB</span><br><span class="line">vmware/photon                             1.0                 9b411d78ad9e        2 months ago        130MB</span><br></pre></td></tr></table></figure><ul><li>Docker-Compose</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose ps</span><br><span class="line">       Name                     Command               State                                Ports                              </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">harbor-adminserver   /harbor/start.sh                 Up                                                                      </span><br><span class="line">harbor-db            /usr/<span class="built_in">local</span>/bin/docker-entr ...   Up      3306/tcp                                                        </span><br><span class="line">harbor-jobservice    /harbor/start.sh                 Up                                                                      </span><br><span class="line">harbor-log           /bin/sh -c /usr/<span class="built_in">local</span>/bin/ ...   Up      127.0.0.1:1514-&gt;10514/tcp                                       </span><br><span class="line">harbor-ui            /harbor/start.sh                 Up                                                                      </span><br><span class="line">nginx                nginx -g daemon off;             Up      0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443-&gt;4443/tcp, 0.0.0.0:80-&gt;80/tcp</span><br><span class="line">registry             /entrypoint.sh serve /etc/ ...   Up      5000/tcp</span><br></pre></td></tr></table></figure><h2 id="启动后"><a href="#启动后" class="headerlink" title="启动后"></a>启动后</h2><p>启动完成后，我们访问刚设置的hostname即可，<code>https://harbor-test.com</code></p><p>如果端口占用，我们可以去修改docker-compose.yml文件中，对应服务的端口映射。</p><p>登录<code>https://harbor-test.com</code></p><p>用户名和密码在配置文件中可以查看，这里我设置的是admin/Harbor123</p><p><img src="/images/harbor-login.png" alt="harbor-login"></p><p>创建自己的项目</p><p><img src="/images/harbor-create-project.png" alt="harbor-create-project"></p><p>创建完之后点击对应项目，里面会有教程如何推送/拉取镜像</p><p><img src="/images/harbor-push.png" alt="harbor-push"></p><h2 id="Docker对应相关配置"><a href="#Docker对应相关配置" class="headerlink" title="Docker对应相关配置"></a>Docker对应相关配置</h2><p>以CentOS 7 为例，安装Harbor镜像仓库之后，使用<code>docker login</code>登录会出现certificate signed by unknown authority类似这样的错误，原因是Harbor如果是部署在内网的话没有HTTPS证书。</p><p>对于这种情况，一般有两个解决方法：</p><ul><li><p>部署到外网，然后添加HTTPS证书，如Certbot</p></li><li><p>Docker配置文件中加–insecure-registry参数</p></li></ul><p>这里就说一下怎么添加–insecure-registry参数</p><p>找到Docker的配置文件<code>/usr/lib/systemd/system/docker.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">## 找到对应行ExecStart= 并修改</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry harbor-test.com</span><br><span class="line"></span><br><span class="line"><span class="comment">## 先reload再重启docker服务</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><p>再尝试使用<code>docker login harbor-test.com</code>就可以登录成功并使用仓库进行推送/拉取镜像。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是Docker镜像仓库Harbor在CentOS 7环境下搭建全过程&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/harb
      
    
    </summary>
    
      <category term="Docker镜像仓库Harbor搭建" scheme="http://yoursite.com/categories/Docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93Harbor%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Registry" scheme="http://yoursite.com/tags/Registry/"/>
    
      <category term="Harbor" scheme="http://yoursite.com/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装部署教程</title>
    <link href="http://yoursite.com/2018/03/11/docker-install/"/>
    <id>http://yoursite.com/2018/03/11/docker-install/</id>
    <published>2018-03-10T16:00:00.000Z</published>
    <updated>2018-03-23T08:19:02.486Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是CentOS 7下安装部署Docker教程</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>系统：CentOS 7 最小安装版</li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum update</span><br><span class="line">$ yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h2 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker-CE"></a>安装Docker-CE</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 官方方法添加yum源</span></span><br><span class="line">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">## 国内访问以上官方会很慢，所以推荐使用阿里云源</span></span><br><span class="line">$ vim /etc/yum.repo.d/docker.repo</span><br><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/<span class="variable">$basearch</span>/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-stable-debuginfo]</span><br><span class="line">name=Docker CE Stable - Debuginfo <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/debug-<span class="variable">$basearch</span>/stable</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-stable-source]</span><br><span class="line">name=Docker CE Stable - Sources</span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/<span class="built_in">source</span>/stable</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-edge]</span><br><span class="line">name=Docker CE Edge - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/<span class="variable">$basearch</span>/edge</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-edge-debuginfo]</span><br><span class="line">name=Docker CE Edge - Debuginfo <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/debug-<span class="variable">$basearch</span>/edge</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-edge-source]</span><br><span class="line">name=Docker CE Edge - Sources</span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/<span class="built_in">source</span>/edge</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test]</span><br><span class="line">name=Docker CE Test - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/<span class="variable">$basearch</span>/<span class="built_in">test</span></span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test-debuginfo]</span><br><span class="line">name=Docker CE Test - Debuginfo <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/debug-<span class="variable">$basearch</span>/<span class="built_in">test</span></span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test-source]</span><br><span class="line">name=Docker CE Test - Sources</span><br><span class="line">baseurl=https://download.docker.com/linux/centos/7/<span class="built_in">source</span>/<span class="built_in">test</span></span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 再安装docker-ce</span></span><br><span class="line">$ yum install -y docker-ce</span><br></pre></td></tr></table></figure><p><strong>可选：如果你想安装最新版本的Docker CE，你需要启用这些仓库（默认是关闭的）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum-config-manager --<span class="built_in">enable</span> docker-ce-edge</span><br><span class="line">$ yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="国内镜像市场"><a href="#国内镜像市场" class="headerlink" title="国内镜像市场"></a>国内镜像市场</h2><p>由于官方的镜像仓库在国外，所以很多时候拉了一半就会断开，每次也不会有断开重连机制，所以每一次的断开就是重新再下载的过程。</p><p>因此这里收集一些常用的国内镜像仓库地址：</p><ul><li><p><a href="http://hub.daocloud.io/" target="_blank" rel="noopener">DaoCloud</a></p></li><li><p><a href="https://hub.tenxcloud.com/" target="_blank" rel="noopener">时速云</a></p></li><li><p><a href="https://hub.alauda.cn/" target="_blank" rel="noopener">灵雀云</a></p></li></ul><p>这几个国内比较常用的镜像市场。</p><h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><p>此外，除了使用国内镜像仓库的同时，也可配合镜像加速器来下载国外官方镜像。</p><p>比如阿里云、腾讯云、网易云也有做类似的功能，以下用阿里云为例子：</p><p>关于加速器的地址，你只需要登录容器<a href="https://cr.console.aliyun.com/?spm=a2c4e.11153959.blogcont29941.9.520269d6odTEcW" target="_blank" rel="noopener">Hub服务</a>的控制台，左侧的加速器帮助页面就会显示为你独立分配的加速地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如：</span></span><br><span class="line"><span class="comment">#公网Mirror：[系统分配前缀].mirror.aliyuncs.com</span></span><br></pre></td></tr></table></figure><h3 id="当你的docker版本较新时"><a href="#当你的docker版本较新时" class="headerlink" title="当你的docker版本较新时"></a>当你的docker版本较新时</h3><p>当你下载安装的Docker Version不低于1.10时，建议直接通过daemon config进行配置。<br>使用配置文件 /etc/docker/daemon.json（没有时新建该文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "registry-mirrors": ["&lt;your accelerate address&gt;"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以CentOS 7为例</strong></p><p>CentOS的配置方式略微复杂，需要先将默认的配置文件复制出来<br>/lib/systemd/system/docker.service -&gt; /etc/systemd/system/docker.service<br>然后再将加速器地址添加到配置文件的启动命令<br>重启Docker就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</span><br><span class="line">$ sed -i <span class="string">"s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=&lt;your accelerate address&gt;|g"</span> /etc/systemd/system/docker.service</span><br><span class="line">$ sed -i <span class="string">"s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd --registry-mirror=&lt;your accelerate address&gt;|g"</span> /etc/systemd/system/docker.service</span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ service docker restart</span><br></pre></td></tr></table></figure><h3 id="阿里云加速器"><a href="#阿里云加速器" class="headerlink" title="阿里云加速器"></a>阿里云加速器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://sdu7uwdm.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="DaoCloud加速器"><a href="#DaoCloud加速器" class="headerlink" title="DaoCloud加速器"></a>DaoCloud加速器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://942c18cb.m.daocloud.io</span><br></pre></td></tr></table></figure><h2 id="一键安装脚本（CentOS-7）"><a href="#一键安装脚本（CentOS-7）" class="headerlink" title="一键安装脚本（CentOS 7）"></a>一键安装脚本（CentOS 7）</h2><p><a href="https://raw.githubusercontent.com/Polaris0112/Ops-Tools/master/docker/docker-install.sh" target="_blank" rel="noopener">下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是CentOS 7下安装部署Docker教程&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;系统：CentOS 7 最小安装版&lt;/l
      
    
    </summary>
    
      <category term="Docker安装部署教程" scheme="http://yoursite.com/categories/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>通过devstack安装部署OpenStack</title>
    <link href="http://yoursite.com/2018/03/10/openstack-devstack-installation/"/>
    <id>http://yoursite.com/2018/03/10/openstack-devstack-installation/</id>
    <published>2018-03-09T16:00:00.000Z</published>
    <updated>2018-03-16T08:35:12.071Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是通过devstack安装部署OpenStack</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>系统：CentOS 7 最小安装版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/selinux/config  </span><br><span class="line"><span class="comment">#SELINUX=enforcing       //注释掉  </span></span><br><span class="line">SELINUX=disabled         //增加  </span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /home  </span><br><span class="line">$ git <span class="built_in">clone</span> http://git.trystack.cn/openstack-dev/devstack.git -b stable/ocata</span><br></pre></td></tr></table></figure><p>注意一定要使用 -b stable/ocata 指定devstack版本（与要安装的openstack版本一致），否则基本上不会安装成功！</p><h2 id="创建stack用户"><a href="#创建stack用户" class="headerlink" title="创建stack用户"></a>创建stack用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/devstack/tools  </span><br><span class="line">$ ./create-stack-user.sh  </span><br><span class="line">$ chown -R stack:stack /home/devstack  </span><br><span class="line">$ chmod 777 /opt/stack -R  </span><br><span class="line">$ chmod 777 /var/run/openvswitch/db.sock  </span><br><span class="line">$ su stack</span><br></pre></td></tr></table></figure><h2 id="创建local-conf文件"><a href="#创建local-conf文件" class="headerlink" title="创建local.conf文件"></a>创建local.conf文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]  </span><br><span class="line">GIT_BASE=http://git.trystack.cn  </span><br><span class="line">NOVNC_REPO=http://git.trystack.cn/kanaka/noVNC.git  </span><br><span class="line">SPICE_REPO=http://git.trystack.cn/git/spice/spice-html5.git  </span><br><span class="line">RECLONE=True  </span><br><span class="line">DOWNLOAD_DEFAULT_IMAGES=False  </span><br><span class="line">IMAGE_URLS=http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img  </span><br><span class="line">ADMIN_PASSWORD=openstack  </span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span>  </span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span>  </span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span>  </span><br><span class="line">HOST_IP=192.168.0.120  </span><br><span class="line">LOGFILE=/opt/stack/logs/stack.sh.log  </span><br><span class="line">LOGDAYS=2  </span><br><span class="line">LOG_COLOR=True  </span><br><span class="line">HORIZON_BRANCH=stable/ocata  </span><br><span class="line">KEYSTONE_BRANCH=stable/ocata  </span><br><span class="line">NOVA_BRANCH=stable/ocata  </span><br><span class="line">NEUTRON_BRANCH=stable/ocata  </span><br><span class="line">GLANCE_BRANCH=stable/ocata  </span><br><span class="line">CINDER_BRANCH=stable/ocata  </span><br><span class="line">KEYSTONE_TOKEN_FORMAT=UUID  </span><br><span class="line"><span class="comment"># Enabling Neutron (network) Service  </span></span><br><span class="line">disable_service n-net  </span><br><span class="line">enable_service q-svc  </span><br><span class="line">enable_service q-agt  </span><br><span class="line">enable_service q-dhcp  </span><br><span class="line">enable_service q-l3  </span><br><span class="line">enable_service q-meta  </span><br><span class="line">enable_service q-metering  </span><br><span class="line">enable_service neutron  </span><br><span class="line"><span class="comment"># VLAN configuration  </span></span><br><span class="line">Q_PLUGIN=ml2  </span><br><span class="line">ENABLE_TENANT_VLANS=True  </span><br><span class="line">TENANT_VLAN_RANGE=1100:2999  </span><br><span class="line">SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5  </span><br><span class="line">SWIFT_REPLICAS=1  </span><br><span class="line">SWIFT_DATA_DIR=<span class="variable">$DEST</span>/data</span><br></pre></td></tr></table></figure><h2 id="stackrc文件配置修改"><a href="#stackrc文件配置修改" class="headerlink" title="stackrc文件配置修改"></a>stackrc文件配置修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只需修改一处，改成如下即可，使用https而不是用git，因为git被阻塞了，不能访问下载编译中需要的文件  </span></span><br><span class="line"><span class="comment"># Base GIT Repo URL  </span></span><br><span class="line"><span class="comment"># Another option is https://git.openstack.org  </span></span><br><span class="line"><span class="comment">#GIT_BASE=$&#123;GIT_BASE:-git://git.openstack.org&#125;  </span></span><br><span class="line">GIT_BASE=<span class="variable">$&#123;GIT_BASE:-https://git.openstack.org&#125;</span></span><br></pre></td></tr></table></figure><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[stack@localhost devstack]$ ./stack.sh  </span><br><span class="line">（注意：除首次安装外，每次执行./stack.sh前都要执行./unstack.sh,否则很容易报错，安装失败）</span><br></pre></td></tr></table></figure><h2 id="遇到错误"><a href="#遇到错误" class="headerlink" title="遇到错误"></a>遇到错误</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2018-03-04 06:40:36.101 | Collecting libvirt-python===2.5.0 (from -c /opt/stack/requirements/upper-constraints.txt (line 188))  </span><br><span class="line">2018-03-04 06:40:42.129 |   Downloading http://pypi.doubanio.com/packages/42/e2/40956b304fc69ba4947929398bdaf116c5e4f8a4db1dd57060a45ca84ff1/libvirt-python-2.5.0.tar.gz (172kB)  </span><br><span class="line">2018-03-04 06:40:43.172 | Building wheels <span class="keyword">for</span> collected packages: libvirt-python  </span><br><span class="line">2018-03-04 06:40:43.175 |   Running setup.py bdist_wheel <span class="keyword">for</span> libvirt-python: started  </span><br><span class="line">2018-03-04 06:40:43.841 |   Running setup.py bdist_wheel <span class="keyword">for</span> libvirt-python: finished with status <span class="string">'error'</span>  </span><br><span class="line">2018-03-04 06:40:43.841 |   Complete output from <span class="built_in">command</span> /usr/bin/python2 -u -c <span class="string">"import setuptools, tokenize;__file__='/tmp/pip-build-KkW7rf/libvirt-python/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"</span> bdist_wheel -d /tmp/tmpoNOPZYpip-wheel- --python-tag cp27:  </span><br><span class="line">2018-03-04 06:40:43.841 |   running bdist_wheel  </span><br><span class="line">2018-03-04 06:40:43.841 |   running build</span><br></pre></td></tr></table></figure><p>参考:</p><ul><li><a href="https://stackoverflow.com/questions/42098592/libvirt-python-install-on-mac-error" target="_blank" rel="noopener">地址1</a></li><li><a href="http://blog.csdn.net/lyjshen/article/details/69467444" target="_blank" rel="noopener">地址2</a></li></ul><p>解决:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install  https://libvirt.org/sources/python/libvirt-python-3.0.0.tar.gz  </span><br><span class="line">$ vi /opt/stack/requirements/global-requirements.txt  </span><br><span class="line">$ vi /opt/stack/requirements/upper-constraints.txt</span><br></pre></td></tr></table></figure><p>上面两个文件将libvirt-python修改为3.2.0<br>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./unstack.sh  </span><br><span class="line">$ ./stack.sh</span><br></pre></td></tr></table></figure><h2 id="安装成功界面"><a href="#安装成功界面" class="headerlink" title="安装成功界面"></a>安装成功界面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">This is your host IP address: 192.168.0.120</span><br><span class="line">This is your host IPv6 address: ::1</span><br><span class="line">Horizon is now available at http://192.168.0.120/dashboard</span><br><span class="line">Keystone is serving at http://192.168.0.120/identity/</span><br><span class="line">The default users are: admin and demo</span><br><span class="line">The password: openstack</span><br><span class="line">DevStack Version: ocata</span><br><span class="line">Change: 66827dda40737f482b00580b52bc2865c605dcae Bump NOVA_READY_TIMEOUT to 120s 2018-02-23 16:58:30 -0500</span><br><span class="line">OS Version: CentOS 7.4.1708 Core</span><br></pre></td></tr></table></figure><p><img src="/images/openstack-devstack.png" alt="openstack-devstack"></p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop firewalld.service  </span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld.service  </span><br><span class="line">$ cat /etc/sysconfig/iptables  </span><br><span class="line"><span class="comment"># sample configuration for iptables service  </span></span><br><span class="line"><span class="comment"># you can edit this manually or use system-config-firewall  </span></span><br><span class="line"><span class="comment"># please do not ask us to add additional ports/services to this default configuration  </span></span><br><span class="line">*filter  </span><br><span class="line">:INPUT ACCEPT [0:0]  </span><br><span class="line">:FORWARD ACCEPT [0:0]  </span><br><span class="line">:OUTPUT ACCEPT [0:0]  </span><br><span class="line"><span class="comment">#-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT  </span></span><br><span class="line"><span class="comment">#-A INPUT -p icmp -j ACCEPT  </span></span><br><span class="line"><span class="comment">#-A INPUT -i lo -j ACCEPT  </span></span><br><span class="line"><span class="comment">#-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT  </span></span><br><span class="line"><span class="comment">#-A INPUT -j REJECT --reject-with icmp-host-prohibited  </span></span><br><span class="line"><span class="comment">#-A FORWARD -j REJECT --reject-with icmp-host-prohibited  </span></span><br><span class="line">COMMIT  </span><br><span class="line">$ systemctl restart iptables.service  </span><br><span class="line">$ systemctl <span class="built_in">enable</span> iptables.service</span><br></pre></td></tr></table></figure><p><a href="http://192.168.0.120/dashboard登录，用户名为admin，密码为openstack" target="_blank" rel="noopener">http://192.168.0.120/dashboard登录，用户名为admin，密码为openstack</a></p><p><img src="/images/openstack-devstack-1.png" alt="openstack-devstack-1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是通过devstack安装部署OpenStack&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;系统：CentOS 7 最小安装版&lt;
      
    
    </summary>
    
      <category term="通过devstack安装部署OpenStack" scheme="http://yoursite.com/categories/%E9%80%9A%E8%BF%87devstack%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2OpenStack/"/>
    
    
      <category term="OpenStack" scheme="http://yoursite.com/tags/OpenStack/"/>
    
      <category term="DevStack" scheme="http://yoursite.com/tags/DevStack/"/>
    
  </entry>
  
  <entry>
    <title>通过packstack快速安装openstack</title>
    <link href="http://yoursite.com/2018/03/10/openstack-packstack-installation/"/>
    <id>http://yoursite.com/2018/03/10/openstack-packstack-installation/</id>
    <published>2018-03-09T16:00:00.000Z</published>
    <updated>2018-03-16T08:27:50.260Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是通过packstack快速安装openstack</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>系统：CentOS 7 最小安装版</p></li><li><p>CPU：2+</p></li><li><p>内存：6GB+</p></li><li><p>硬盘：50GB+</p></li><li><p>网卡：2个</p></li></ul><h2 id="配置pike版本openstack源（此处采用阿里源）"><a href="#配置pike版本openstack源（此处采用阿里源）" class="headerlink" title="配置pike版本openstack源（此处采用阿里源）"></a>配置pike版本openstack源（此处采用阿里源）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat &lt;&lt;END &gt;/etc/yum.repos.d/pike.repo</span><br><span class="line">[pike]</span><br><span class="line">name=pike</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7.4.1708/cloud/x86_64/openstack-pike/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h2 id="安装epel源"><a href="#安装epel源" class="headerlink" title="安装epel源"></a>安装epel源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install epel-release -y</span><br></pre></td></tr></table></figure><h2 id="安装packstack安装工具和依赖"><a href="#安装packstack安装工具和依赖" class="headerlink" title="安装packstack安装工具和依赖"></a>安装packstack安装工具和依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y centos-release-openstack-ocata  centos-release-openstack-mitaka  </span><br><span class="line">$ yum update -y</span><br><span class="line">$ yum -y install openstack-packstack</span><br></pre></td></tr></table></figure><h2 id="安装allinone的的环境"><a href="#安装allinone的的环境" class="headerlink" title="安装allinone的的环境"></a>安装allinone的的环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ packstack --allinone</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>安装大概一个小时左右，由于网络问题可能会报错，报错后重复执行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ packstack --answer-file packstack-answers-20171129-031548.txt</span><br></pre></td></tr></table></figure></li><li><p>自定义安装<br>如果需要自定义参数，需要先生存应答文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ packstack --gen-answer-file=packstack-answers</span><br></pre></td></tr></table></figure></li></ul><p>通过应答文件执行安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ packstack --answer-file=packstack-answers</span><br></pre></td></tr></table></figure></p><p><strong>注意：用户名和密码在执行命令的当前目录下的keystonerc_admin中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> keystonerc_admin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看用户</span></span><br><span class="line">$ openstack user list </span><br><span class="line">+----------------------------------+------------+</span><br><span class="line">| ID                               | Name       |</span><br><span class="line">+----------------------------------+------------+</span><br><span class="line">| 15b05802627f4f42b4ae3253f5ce6730 | cinder     |</span><br><span class="line">| 2ac16759b27f480da9adff72188c79f3 | glance     |</span><br><span class="line">| 2aced06e7c984399a7cc799de9199244 | aodh       |</span><br><span class="line">| 3fdc02269da74e67be50c1d2f8711f3b | gnocchi    |</span><br><span class="line">| 70a112fdec0842979e8e9e5e9f171791 | nova       |</span><br><span class="line">| 866962fe0ee14c379dc6245a8ee5a707 | placement  |</span><br><span class="line">| a1c35ba084554dd1bca310667a82bdd2 | ceilometer |</span><br><span class="line">| bce952e6b65641aa93aab872d04e7c0c | admin      |</span><br><span class="line">| c2082398028442a7bff898fb6745af57 | swift      |</span><br><span class="line">| e43f38301fed4a44ae070b6e7b0a0026 | neutron    |</span><br><span class="line">| fbbd1aff07fd4b48a0020bddd2c8deea | demo       |</span><br><span class="line">+----------------------------------+------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看项目</span></span><br><span class="line">$ openstack project list </span><br><span class="line">+----------------------------------+----------+</span><br><span class="line">| ID                               | Name     |</span><br><span class="line">+----------------------------------+----------+</span><br><span class="line">| 2bbfb410124f4454a45f012a6274eff7 | demo     |</span><br><span class="line">| 400487fe18a541f1a3c4c462b4ff9fa6 | admin    |</span><br><span class="line">| 8b051a62445f4106a17f5521cd713841 | services |</span><br><span class="line">+----------------------------------+----------+</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看服务</span></span><br><span class="line">$ openstack service list </span><br><span class="line">+----------------------------------+------------+--------------+</span><br><span class="line">| ID                               | Name       | Type         |</span><br><span class="line">+----------------------------------+------------+--------------+</span><br><span class="line">| 128e1c41dae648fd84266be576ab6b8e | aodh       | alarming     |</span><br><span class="line">| 1549860212bd444eb96ebe3399e1af05 | cinderv2   | volumev2     |</span><br><span class="line">| 5144ecf07843499aa76a1c5bdeafcfa2 | nova       | compute      |</span><br><span class="line">| 5670a37cdd7e48c4b77b744082dfd5cd | cinder     | volume       |</span><br><span class="line">| 7963a27f90de40ed900bcff7f0771ab9 | swift      | object-store |</span><br><span class="line">| 9aa244907a4e428b8a8c996e086a518f | placement  | placement    |</span><br><span class="line">| a967ff55c55143439e899cbd0530af6b | neutron    | network      |</span><br><span class="line">| c06cc37f779a4163b147fca99ec3cc33 | keystone   | identity     |</span><br><span class="line">| c8a39eec1cac44719bbb15b883d62735 | glance     | image        |</span><br><span class="line">| d8871026f6cc4c00b25bcfcf6ae05064 | ceilometer | metering     |</span><br><span class="line">| f2b5cd4ee2344f389e6eb1e9a8fbccfc | gnocchi    | metric       |</span><br><span class="line">| fccbbd2dbf3141acbe8a2291df1b67a1 | cinderv3   | volumev3     |</span><br><span class="line">+----------------------------------+------------+--------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看catalog</span></span><br><span class="line">$ openstack catalog list </span><br><span class="line">+------------+--------------+----------------------------------------------------------------------------+</span><br><span class="line">| Name       | Type         | Endpoints                                                                  |</span><br><span class="line">+------------+--------------+----------------------------------------------------------------------------+</span><br><span class="line">| aodh       | alarming     | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8042                                       |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8042                                         |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8042                                          |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| cinderv2   | volumev2     | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8776/v2/400487fe18a541f1a3c4c462b4ff9fa6   |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8776/v2/400487fe18a541f1a3c4c462b4ff9fa6      |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8776/v2/400487fe18a541f1a3c4c462b4ff9fa6     |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| nova       | compute      | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8774/v2.1/400487fe18a541f1a3c4c462b4ff9fa6    |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8774/v2.1/400487fe18a541f1a3c4c462b4ff9fa6 |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8774/v2.1/400487fe18a541f1a3c4c462b4ff9fa6   |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| cinder     | volume       | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8776/v1/400487fe18a541f1a3c4c462b4ff9fa6   |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8776/v1/400487fe18a541f1a3c4c462b4ff9fa6     |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8776/v1/400487fe18a541f1a3c4c462b4ff9fa6      |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| swift      | object-store | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8080/v1/AUTH_400487fe18a541f1a3c4c462b4ff9fa6|</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8080/v1/AUTH_400487fe18a541f1a3c4c462b4ff9fa6 |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8080/v1/AUTH_400487fe18a541f1a3c462b4ff9fa6|</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| placement  | placement    | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8778/placement                               |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8778/placement                                |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8778/placement                             |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| neutron    | network      | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:9696                                         |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:9696                                       |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:9696                                          |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| keystone   | identity     | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:35357/v3                                      |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:5000/v3                                      |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:5000/v3                                    |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| glance     | image        | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:9292                                         |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:9292                                       |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:9292                                          |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| ceilometer | metering     | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8777                                          |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8777                                       |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8777                                         |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| gnocchi    | metric       | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8041                                         |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8041                                       |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8041                                          |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">| cinderv3   | volumev3     | RegionOne                                                                  |</span><br><span class="line">|            |              |   public: http://172.16.8.100:8776/v3/400487fe18a541f1a3c4c462b4ff9fa6     |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   internal: http://172.16.8.100:8776/v3/400487fe18a541f1a3c4c462b4ff9fa6   |</span><br><span class="line">|            |              | RegionOne                                                                  |</span><br><span class="line">|            |              |   admin: http://172.16.8.100:8776/v3/400487fe18a541f1a3c4c462b4ff9fa6      |</span><br><span class="line">|            |              |                                                                            |</span><br><span class="line">+------------+--------------+----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是通过packstack快速安装openstack&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统：CentOS 7 最小
      
    
    </summary>
    
      <category term="通过packstack快速安装openstack" scheme="http://yoursite.com/categories/%E9%80%9A%E8%BF%87packstack%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85openstack/"/>
    
    
      <category term="OpenStack" scheme="http://yoursite.com/tags/OpenStack/"/>
    
      <category term="PackStack" scheme="http://yoursite.com/tags/PackStack/"/>
    
  </entry>
  
  <entry>
    <title>open-falcon安装部署教程</title>
    <link href="http://yoursite.com/2018/03/09/open-falcon-install/"/>
    <id>http://yoursite.com/2018/03/09/open-falcon-install/</id>
    <published>2018-03-08T16:00:00.000Z</published>
    <updated>2018-03-16T06:46:26.716Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是open-falcon安装部署教程</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>系统：CentOS 7 最小安装版</li></ul><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y redis</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y mysql-server</span><br></pre></td></tr></table></figure><p><strong>注意，请确保redis和MySQL已启动。</strong></p><h2 id="初始化MySQL表结构"><a href="#初始化MySQL表结构" class="headerlink" title="初始化MySQL表结构"></a>初始化MySQL表结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp/ &amp;&amp; git <span class="built_in">clone</span> https://github.com/open-falcon/falcon-plus.git </span><br><span class="line">$ <span class="built_in">cd</span> /tmp/falcon-plus/scripts/mysql/db_schema/</span><br><span class="line">$ mysql -h 127.0.0.1 -u root -p &lt; 1_uic-db-schema.sql</span><br><span class="line">$ mysql -h 127.0.0.1 -u root -p &lt; 2_portal-db-schema.sql</span><br><span class="line">$ mysql -h 127.0.0.1 -u root -p &lt; 3_dashboard-db-schema.sql</span><br><span class="line">$ mysql -h 127.0.0.1 -u root -p &lt; 4_graph-db-schema.sql</span><br><span class="line">$ mysql -h 127.0.0.1 -u root -p &lt; 5_alarms-db-schema.sql</span><br><span class="line">$ rm -rf /tmp/falcon-plus/</span><br></pre></td></tr></table></figure><p><strong>如果你是从v0.1.0升级到当前版本v0.2.0，那么只需要执行如下命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -h 127.0.0.1 -u root -p &lt; 5_alarms-db-schema.sql</span><br></pre></td></tr></table></figure><h2 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h2><p>go-v1.10下载地址：</p><ul><li><p><a href="https://dl.google.com/go/go1.10.linux-amd64.tar.gz" target="_blank" rel="noopener">linux64位下载地址</a></p></li><li><p><a href="https://dl.google.com/go/go1.10.linux-386.tar.gz" target="_blank" rel="noopener">linux32位下载地址</a></p></li><li><p><a href="https://dl.google.com/go/go1.10.windows-amd64.zip" target="_blank" rel="noopener">windows64位编译包下载地址</a></p></li><li><p><a href="https://dl.google.com/go/go1.10.windows-amd64.msi" target="_blank" rel="noopener">windows64位安装包下载地址</a></p></li><li><p><a href="https://dl.google.com/go/go1.10.windows-386.zip" target="_blank" rel="noopener">windows32位编译包下载地址</a></p></li><li><p><a href="https://dl.google.com/go/go1.10.windows-386.msi" target="_blank" rel="noopener">windows32位安装包下载地址</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 下载linux64位压缩包</span></span><br><span class="line">$ wget https://dl.google.com/go/go1.10.linux-amd64.tar.gz</span><br><span class="line">$ tar -C /usr/<span class="built_in">local</span> -xzf go1.10.linux-amd64.tar.gz</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/go/bin"</span> &gt;&gt; /etc/profile</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line">$ go version</span><br><span class="line">go version go1.10 linux/amd64</span><br></pre></td></tr></table></figure><p>go环境部署完毕。</p><h2 id="下载编译好的二进制版本"><a href="#下载编译好的二进制版本" class="headerlink" title="下载编译好的二进制版本"></a>下载编译好的二进制版本</h2><p><a href="https://github.com/open-falcon/falcon-plus/releases/download/v0.2.1/open-falcon-v0.2.1.tar.gz" target="_blank" rel="noopener">官方编译好的v0.2.1版本</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/open-falcon</span><br><span class="line">$ <span class="built_in">cd</span> ~/open-falcon</span><br><span class="line">$ wget https://github.com/open-falcon/falcon-plus/releases/download/v0.2.1/open-falcon-v0.2.1.tar.gz</span><br><span class="line">$ tar -xzvf open-falcon-v0.2.1.tar.gz</span><br></pre></td></tr></table></figure><h2 id="首先确认配置文件中数据库账号密码与实际相同，否则需要修改配置文件"><a href="#首先确认配置文件中数据库账号密码与实际相同，否则需要修改配置文件" class="headerlink" title="首先确认配置文件中数据库账号密码与实际相同，否则需要修改配置文件"></a>首先确认配置文件中数据库账号密码与实际相同，否则需要修改配置文件</h2><h3 id="修改配置文件cfg-json"><a href="#修改配置文件cfg-json" class="headerlink" title="修改配置文件cfg.json"></a>修改配置文件cfg.json</h3><p>猜测部分模块依赖连接数据库，因为如果不修改配置文件，aggregator模块会出现无法启动，graph、hbs、nodata、api、alarm模块会出现开启不报错但是状态为开启失败的情况。</p><p>如果需要每个模块都能正常启动，需要将上面模块的cfg.json的数据库信息进行修改。根据本教程的配置，需要修改配置文件所在的目录： </p><table><thead><tr><th>模块</th><th style="text-align:center">配置文件所在路径</th></tr></thead><tbody><tr><td>aggregator</td><td style="text-align:center">~/open-falcon/aggregator/config/cfg.json</td></tr><tr><td>graph</td><td style="text-align:center">~/open-falcon/graph/config/cfg.json</td></tr><tr><td>hbs</td><td style="text-align:center">~/open-falcon/hbs/config/cfg.json</td></tr><tr><td>nodata</td><td style="text-align:center">~/open-falcon/nodata/config/cfg.json</td></tr><tr><td>api</td><td style="text-align:center">~/open-falcon/api/config/cfg.json</td></tr><tr><td>alarm</td><td style="text-align:center">~/open-falcon/alarm/config/cfg.json</td></tr></tbody></table><p><strong>1）修改aggregator的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/open-falcon/aggregator/config/cfg.json</span><br></pre></td></tr></table></figure><p><img src="/images/open-falcon-aggregator-cfg.png" alt="open-falcon-aggregator-cfg"></p><p>mysql的root密码为空，则去掉“password”，若不为空，则用root密码替换“password”。</p><p><strong>2）修改graph的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/open-falcon/graph/config/cfg.json</span><br></pre></td></tr></table></figure><p><img src="/images/open-falcon-graph-cfg.png" alt="open-falcon-graph-cfg"></p><p>mysql的root密码为空，则去掉“password”，若不为空，则用root密码替换“password”。</p><p><strong>3）修改hbs的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/open-falcon/hbs/config/cfg.json</span><br></pre></td></tr></table></figure><p><img src="/images/open-falcon-hbs-cfg.png" alt="open-falcon-hbs-cfg"></p><p>mysql的root密码为空，则去掉“password”，若不为空，则用root密码替换“password”。</p><p><strong>4）修改nodata的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/open-falcon/nodata/config/cfg.json</span><br></pre></td></tr></table></figure><p><img src="/images/open-falcon-nodata-cfg.png" alt="open-falcon-nodata-cfg"></p><p>mysql的root密码为空，则去掉“password”，若不为空，则用root密码替换“password”。</p><p><strong>5）修改api的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/open-falcon/api/config/cfg.json</span><br></pre></td></tr></table></figure><p><img src="/images/open-falcon-api-cfg.png" alt="open-falcon-api-cfg"></p><p>mysql的root密码为空，则去掉“password”，若不为空，则用root密码替换“password”。</p><p><strong>6）修改alarm的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/open-falcon/alarm/config/cfg.json</span><br></pre></td></tr></table></figure><p><img src="/images/open-falcon-alarm-cfg.png" alt="open-falcon-alarm-cfg"></p><p>mysql的root密码为空，则去掉“password”，若不为空，则用root密码替换“password”。 </p><h2 id="启动后端"><a href="#启动后端" class="headerlink" title="启动后端"></a>启动后端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/open-falcon</span><br><span class="line">$ ./open-falcon start</span><br><span class="line">[falcon-graph] 25103</span><br><span class="line">[falcon-hbs] 25113</span><br><span class="line">[falcon-judge] 25122</span><br><span class="line">[falcon-transfer] 25129</span><br><span class="line">[falcon-nodata] 25136</span><br><span class="line">[falcon-aggregator] 25142</span><br><span class="line">[falcon-agent] 25151</span><br><span class="line">[falcon-gateway] 25158</span><br><span class="line">[falcon-api] 25165</span><br><span class="line">[falcon-alarm] 25174</span><br><span class="line"></span><br><span class="line"><span class="comment">## 检查任务情况</span></span><br><span class="line">$ ./open-falcon check</span><br><span class="line">        falcon-graph         UP           25103 </span><br><span class="line">          falcon-hbs         UP           25113 </span><br><span class="line">        falcon-judge         UP           25122 </span><br><span class="line">     falcon-transfer         UP           25129 </span><br><span class="line">       falcon-nodata         UP           25136 </span><br><span class="line">   falcon-aggregator         UP           25142 </span><br><span class="line">        falcon-agent         UP           25151 </span><br><span class="line">      falcon-gateway         UP           25158 </span><br><span class="line">          falcon-api         UP           25165 </span><br><span class="line">        falcon-alarm         UP           25174 </span><br><span class="line"></span><br><span class="line"><span class="comment">## 更多工具用法</span></span><br><span class="line"><span class="comment"># ./open-falcon [start|stop|restart|check|monitor|reload] module</span></span><br><span class="line"><span class="comment"># For debugging , You can check ~/open-falcon/$moduleName/log/logs/xxx.log</span></span><br></pre></td></tr></table></figure><h2 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h2><h3 id="获取前端代码"><a href="#获取前端代码" class="headerlink" title="获取前端代码"></a>获取前端代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 先安装依赖</span></span><br><span class="line">$ yum install -y python-virtualenv</span><br><span class="line">$ yum install -y python-devel</span><br><span class="line">$ yum install -y openldap-devel</span><br><span class="line">$ yum install -y mysql-devel</span><br><span class="line">$ yum install -y git</span><br><span class="line">$ yum groupinstall <span class="string">"Development tools"</span> -y</span><br><span class="line"></span><br><span class="line"><span class="comment">## 下载前端源码</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/open-falcon</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/open-falcon/dashboard.git</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入前端文件夹用pip安装对应依赖</span></span><br><span class="line">$ <span class="built_in">cd</span> ./dashboard</span><br><span class="line">$ virtualenv ./env</span><br><span class="line">$ ./env/bin/pip install -r pip_requirements.txt</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>根据本次记录的配置，dashboard的配置文件在<code>~/open-falcon/dashboard/rrd/config.py</code>，需要根据实际情况对内部配置进行修改。</p><p>按照上述的数据库账号密码进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## API_ADDR 表示后端api组件的地址</span></span><br><span class="line">API_ADDR = <span class="string">"http://127.0.0.1:8080/api/v1"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 根据实际情况，修改PORTAL_DB_*, 默认用户名为root，默认密码为""</span></span><br><span class="line"><span class="comment">## 根据实际情况，修改ALARM_DB_*, 默认用户名为root，默认密码为""</span></span><br></pre></td></tr></table></figure><p><img src="/images/open-falcon-dashboard-cfg.png" alt="open-falcon-dashboard-cfg"></p><p>设置对应的IP地址，提供访问入口，并配置数据库对应账号密码</p><h2 id="开启8081端口"><a href="#开启8081端口" class="headerlink" title="开启8081端口"></a>开启8081端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 7</span></span><br><span class="line">$ firewall-cmd --add-port=8081/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 6</span></span><br><span class="line">$ iptables -I INPUT -p tcp --dport 8081 -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="以开发者模式启动"><a href="#以开发者模式启动" class="headerlink" title="以开发者模式启动"></a>以开发者模式启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./env/bin/python wsgi.py</span><br><span class="line"></span><br><span class="line"><span class="comment">## open http://127.0.0.1:8081 in your browser.</span></span><br></pre></td></tr></table></figure><h3 id="在生产环境启动"><a href="#在生产环境启动" class="headerlink" title="在生产环境启动"></a>在生产环境启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash control start</span><br><span class="line"></span><br><span class="line"><span class="comment">## open http://127.0.0.1:8081 in your browser.</span></span><br></pre></td></tr></table></figure><h3 id="停止dashboard运行"><a href="#停止dashboard运行" class="headerlink" title="停止dashboard运行"></a>停止dashboard运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash control stop</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash control tail</span><br></pre></td></tr></table></figure><h2 id="dashbord用户管理"><a href="#dashbord用户管理" class="headerlink" title="dashbord用户管理"></a>dashbord用户管理</h2><p>dashbord没有默认创建任何账号包括管理账号，需要你通过页面进行注册账号。<br>想拥有管理全局的超级管理员账号，需要手动注册用户名为root的账号（第一个帐号名称为root的用户会被自动设置为超级管理员）。<br>超级管理员可以给普通用户分配权限管理。</p><p><strong>小提示：</strong><br>注册账号能够被任何打开dashboard页面的人注册，所以当给相关的人注册完账号后，需要去关闭注册账号功能。只需要去修改api组件的配置文件cfg.json，将signup_disable配置项修改为true，重启api即可。当需要给人开账号的时候，再将配置选项改回去，用完再关掉即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是open-falcon安装部署教程&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;系统：CentOS 7 最小安装版&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="open-falcon安装部署教程" scheme="http://yoursite.com/categories/open-falcon%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="open-falcon" scheme="http://yoursite.com/tags/open-falcon/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack安装部署</title>
    <link href="http://yoursite.com/2018/03/09/openstack-install-introduction/"/>
    <id>http://yoursite.com/2018/03/09/openstack-install-introduction/</id>
    <published>2018-03-08T16:00:00.000Z</published>
    <updated>2018-03-16T08:08:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是openstack安装部署私有云详细图文教程</p><p>本文主要分享的是云计算、openstack的使用、私有云平台建设、云服务器云硬盘的构建和使用。从基本概念入手到私有云建设，信息量非常大。对于openstack的安装部署都是从官方文档中一步步的介绍，内容非常详细。</p><h2 id="云计算基本概念"><a href="#云计算基本概念" class="headerlink" title="云计算基本概念"></a>云计算基本概念</h2><p>云计算（cloud computing）是基于互联网的相关服务的增加、使用和交付模式，通常涉及通过互联网来提供动态易扩展且经常是虚拟化的资源。云是网络、互联网的一种比喻说法。过去在图中往往用云来表示电信网，后来也用来表示互联网和底层基础设施的抽象。因此，云计算甚至可以让你体验每秒10万亿次的运算能力，拥有这么强大的计算能力可以模拟核爆炸、预测气候变化和市场发展趋势。用户通过电脑、笔记本、手机等方式接入数据中心，按自己的需求进行运算。</p><h3 id="云计算分类"><a href="#云计算分类" class="headerlink" title="云计算分类"></a>云计算分类</h3><p>简单来说，就是把应用程序和数据都放在由大量服务器组成的云中，用户需要什么只要购买相应服务并使用即可。</p><p>云计算分为私有云、公有云、混合云。</p><p>云计算的服务分类：基础设施即服务、平台即服务、软件即服务。</p><ul><li><p>超大规模。“云”具有相当的规模，Google云计算已经拥有100多万台服务器，亚马逊、IBM、微软和Yahoo等公司的“云”均拥有几十万台服务器。“云”能赋予用户前所未有的计算能力。</p></li><li><p>虚拟化。云计算支持用户在任意位置使用各种终端获取服务。所请求的资源来自“云”,而不是固定的有形的实体。应用在“云”中某处运行，但实际上用户无需了解应用运行的具体位置，只需要一台笔记本或一个PDA,就可以通过网络服务来获取各种能力超强的服务。</p></li><li><p>高可靠性。“云”使用了数据多副本容错、计算节点同构可互换等措施来保障服务的高可靠性，使用云计算比使用本地计算机更加可靠。</p></li><li><p>通用性。云计算不针对特定的应用，在“云”的支撑下可以构造出于变万化的应用，同一片“云”可以同时支撑不同的应用运行。</p></li><li><p>高可伸缩性。“云”的规模可以动态伸缩，满足应用和用户规模增长的需要。</p></li><li><p>按需服务。“云”是一个庞大的资源池，用户按需购买，像自来水、电和煤气那样计费。</p></li><li><p>极其廉价。“云”的特殊容错措施使得可以采用极其廉价的节点来构成云;“云”的自动化管理使数据中心管理成本大幅降低;“云”的公用性和通用性使资源的利用率大幅提升;“云”设施可以建在电力资源丰富的地区，从而大幅降低能源成本。</p></li></ul><h3 id="OpenStack基本概念"><a href="#OpenStack基本概念" class="headerlink" title="OpenStack基本概念"></a>OpenStack基本概念</h3><p>OpenStack是一个开源的云计算管理平台项目，由几个主要的组件组合起来完成具体工作。OpenStack支持几乎所有类型的云环境，项目目标是提供实施简单、可大规模扩展、丰富、标准统一的云计算管理平台。OpenStack通过各种互补的服务提供了基础设施即服务（IaaS）的解决方案，每个服务提供API以进行集成。</p><p>常见组件：</p><ul><li>Dashboard(web项目)</li><li>Keystone(权限管理)</li><li>Nova(管理虚拟机)</li><li>Nova-network(管理网络流量和ip)</li><li>Glance(镜像管理项目)</li><li>Cinder(磁盘管理)</li><li>Swift(网盘，对象)</li></ul><p>基础的系统图<br><img src="/images/openstack-1.png" alt="openstack-1"></p><h2 id="Openstack安装部署"><a href="#Openstack安装部署" class="headerlink" title="Openstack安装部署"></a>Openstack安装部署</h2><p>下面来说一说openstack的安装部署。首先说明openstack的整体安装非常复杂，文末提供官方安装文档下载，我就是根据这个英文的官方文档来安装部署的。以下内容是参照官方文档“openstack-install-guide-yum-icehouse.pdf”来的。</p><p>首先需要准备3台linux的机器。我这里选用的是centos6.6的64位的系统。配置IP地址，关闭防火墙，修改主机名。</p><ul><li><p>Controller Node: 1 processor, 2 GB memory, and 5 GB storage</p></li><li><p>Compute01: 1 processor, 512 MB memory, and 5 GB storage</p></li><li><p>Compute02 Node: 1 processor, 2 GB memory, and 10 GB storage</p></li></ul><p>我这里controller的ip地址是:192.168.44.147</p><p>computer01：192.168.44.148</p><p>computer02：192.168.44.149</p><p>基本环境配置</p><p>以下内容是在controller机器上配置的。</p><h3 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h3><p>因为需要一个数据库，所以这里选用了mysql数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install mysql mysql-server MySQL-python</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/my.cnf</code>文件，在里面添加如下内容，主要意思就是设置编码为utf-8。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine = innodb</span><br><span class="line">innodb_file_per_table</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">init-connect = <span class="string">'SET NAMES utf8'</span></span><br><span class="line">character-set-server = utf8</span><br></pre></td></tr></table></figure></p><p>然后启动服务，开机启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ service mysqld start</span><br><span class="line">$ chkconfig mysqld on</span><br><span class="line">$ mysql_install_db</span><br><span class="line">$ mysql_secure_installation</span><br></pre></td></tr></table></figure></p><p>赋权，使其可以远程登录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="OpenStack基本包安装"><a href="#OpenStack基本包安装" class="headerlink" title="OpenStack基本包安装"></a>OpenStack基本包安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install yum-plugin-priorities</span><br><span class="line">$ yum install http://repos.fedorapeople.org/repos/openstack/openstackicehouse/rdo-release-icehouse-3.noarch.rpm</span><br><span class="line">$ yum install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">$ yum install openstack-utils</span><br><span class="line">$ yum install openstack-selinux</span><br></pre></td></tr></table></figure><h3 id="安装消息队列"><a href="#安装消息队列" class="headerlink" title="安装消息队列"></a>安装消息队列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install qpid-cpp-server</span><br></pre></td></tr></table></figure><p>启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service qpidd start</span><br><span class="line">$ chkconfig qpidd on</span><br></pre></td></tr></table></figure></p><h3 id="权限认证服务-keystone"><a href="#权限认证服务-keystone" class="headerlink" title="权限认证服务(keystone)"></a>权限认证服务(keystone)</h3><p>安装权限认证服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install openstack-keystone python-keystoneclient -y</span><br></pre></td></tr></table></figure><p>创建用户，写入到配置文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/keystone/keystone.conf database connection mysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br></pre></td></tr></table></figure><p>创建keystone数据库表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CREATE DATABASE keystone;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON keystone.* TO <span class="string">'keystone'</span>@<span class="string">'localhost'</span> \</span><br><span class="line">IDENTIFIED BY <span class="string">'KEYSTONE_DBPASS'</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON keystone.* TO <span class="string">'keystone'</span>@<span class="string">'%'</span> \</span><br><span class="line">IDENTIFIED BY <span class="string">'KEYSTONE_DBPASS'</span>;</span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>自动生成表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su -s /bin/sh -c <span class="string">"keystone-manage db_sync"</span> keystone</span><br></pre></td></tr></table></figure><p>设置用户环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ADMIN_TOKEN=$(openssl rand -hex 10)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$ADMIN_TOKEN</span></span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/keystone/keystone.conf DEFAULT \</span><br><span class="line">$ admin_token <span class="variable">$ADMIN_TOKEN</span></span><br><span class="line"></span><br><span class="line">$ keystone-manage pki_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">$ chown -R keystone:keystone /etc/keystone/ssl</span><br><span class="line">$ chmod -R o-rwx /etc/keystone/ssl</span><br></pre></td></tr></table></figure><p>启动keystone服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-keystone start</span><br><span class="line">$ chkconfig openstack-keystone on</span><br></pre></td></tr></table></figure><p>将admin_token设置到环境变量中去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> OS_SERVICE_TOKEN=<span class="variable">$ADMIN_TOKEN</span></span><br><span class="line">$ <span class="built_in">export</span> OS_SERVICE_ENDPOINT=http://controller:35357/v2.0</span><br></pre></td></tr></table></figure><p>创建管理员用户，默认的用户名为admin,密码为ADMIN_PASS,你可以自定义修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@controller keystone]<span class="comment"># keystone user-create --name=admin --pass=ADMIN_PASS --email=ADMIN_EMAIL</span></span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| email | ADMIN_EMAIL|</span><br><span class="line">| enabled | True |</span><br><span class="line">|id| 332f5ecb18c64bf687b154facd629fb6 |</span><br><span class="line">| name | admin |</span><br><span class="line">| username | admin |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">[root@controller keystone]<span class="comment"># keystone role-create --name=admin</span></span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">|id| ab5da2c50d7443efb0514e84c2b4adb7 |</span><br><span class="line">| name | admin |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">[root@controller keystone]<span class="comment"># keystone tenant-create --name=admin --description="Admin Tenant"</span></span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Admin Tenant |</span><br><span class="line">| enabled | True |</span><br><span class="line">| id | b89723a38b154eeea6416a83b293b0ad |</span><br><span class="line">| name| admin |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">[root@controller keystone]<span class="comment"># keystone user-role-add --user=admin --tenant=admin --role=admin</span></span><br><span class="line">[root@controller keystone]<span class="comment"># keystone user-role-add --user=admin --role=_member_ --tenant=admin</span></span><br><span class="line">[root@controller keystone]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>创建一个权限认证服务，因为我这里的主机名是controller，所以下面有 <a href="http://controller:35357/v2.0" target="_blank" rel="noopener">http://controller:35357/v2.0</a> 这些信息，可以自定义修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@controller keystone]<span class="comment"># keystone service-create --name=keystone --type=identity \</span></span><br><span class="line">&gt; --description=<span class="string">"OpenStack Identity"</span></span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description |OpenStack Identity|</span><br><span class="line">| enabled | True |</span><br><span class="line">| id | 4bfd5f39b86c45edb92d5c0488987dd8 |</span><br><span class="line">| name| keystone |</span><br><span class="line">| <span class="built_in">type</span>| identity |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">[root@controller keystone]<span class="comment"># keystone endpoint-create \</span></span><br><span class="line">&gt; --service-id=$(keystone service-list | awk <span class="string">'/ identity / &#123;print $2&#125;'</span>) \</span><br><span class="line">&gt; --publicurl=http://controller:5000/v2.0 \</span><br><span class="line">&gt; --internalurl=http://controller:5000/v2.0 \</span><br><span class="line">&gt; --adminurl=http://controller:35357/v2.0</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| adminurl | http://controller:35357/v2.0 |</span><br><span class="line">| id | 0350b72901a141498fe48304b13a1b98 |</span><br><span class="line">| internalurl | http://controller:5000/v2.0|</span><br><span class="line">| publicurl | http://controller:5000/v2.0|</span><br><span class="line">|region |regionOne |</span><br><span class="line">| service_id | 4bfd5f39b86c45edb92d5c0488987dd8 |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">[root@controller keystone]<span class="comment"># keystone user-create --name=demo --pass=DEMO_PASS --email=DEMO_EMAIL</span></span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| email |DEMO_EMAIL|</span><br><span class="line">| enabled | True |</span><br><span class="line">|id| b44a9a1462d74f4e928b3b339289a2ae |</span><br><span class="line">| name | demo |</span><br><span class="line">| username | demo |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">[root@controller keystone]<span class="comment"># keystone tenant-create --name=demo --description="Demo Tenant"</span></span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | Demo Tenant|</span><br><span class="line">| enabled | True |</span><br><span class="line">| id | 7bd79509ee184a2098ca0644679b60a8 |</span><br><span class="line">| name| demo |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">[root@controller keystone]<span class="comment"># keystone user-role-add --user=demo --role=_member_ --tenant=demo</span></span><br><span class="line">[root@controller keystone]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>为了方便我们取到token，我们可以vi admin-openrc.sh,然后添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line">$ <span class="built_in">export</span> OS_PASSWORD=ADMIN_PASS</span><br><span class="line">$ <span class="built_in">export</span> OS_TENANT_NAME=admin</span><br><span class="line">$ <span class="built_in">export</span> OS_AUTH_URL=http://controller:35357/v2.0</span><br></pre></td></tr></table></figure><p>在每次关机重启之后都要重新执行下面的命令，让环境变量起作用。否则会报”Expecting an auth URL via either –os-auth-url or env[OS_AUTH_URL]”的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> admin-openrc.sh</span><br></pre></td></tr></table></figure><p>我们可以使用下面的命令查看keystone目前的用户有哪些：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ keystone user-list</span><br></pre></td></tr></table></figure><h3 id="配置镜像服务-glance"><a href="#配置镜像服务-glance" class="headerlink" title="配置镜像服务(glance)"></a>配置镜像服务(glance)</h3><p>在controller服务器中安装服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install openstack-glance python-glanceclient</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf database connection mysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf database connection mysql://glance:GLANCE_DBPASS@controller/glance</span><br></pre></td></tr></table></figure><p>在mysql数据库中创建glance数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CREATE DATABASE glance;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON glance.* TO <span class="string">'glance'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'GLANCE_DBPASS'</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON glance.* TO <span class="string">'glance'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'GLANCE_DBPASS'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>自动生成表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su -s /bin/sh -c <span class="string">"glance-manage db_sync"</span> glance</span><br></pre></td></tr></table></figure><p>在keystone上创建用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ keystone user-create --name=glance --pass=GLANCE_PASS --email=glance@example.com</span><br><span class="line">$ keystone user-role-add --user=glance --tenant=service --role=admin</span><br></pre></td></tr></table></figure><p>配置授权服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf keystone_authtoken auth_host controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf keystone_authtoken auth_port 35357</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf keystone_authtoken admin_user glance</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf keystone_authtoken admin_password GLANCE_PASS</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-api.conf paste_deploy flavor keystone</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf keystone_authtoken auth_host controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf keystone_authtoken auth_port 35357</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf keystone_authtoken admin_user glance</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf keystone_authtoken admin_password GLANCE_PASS</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/glance/glance-registry.conf paste_deploy flavor keystone</span><br></pre></td></tr></table></figure></p><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-glance-api start</span><br><span class="line">$ service openstack-glance-registry start</span><br><span class="line">$ chkconfig openstack-glance-api on</span><br><span class="line">$ chkconfig openstack-glance-registry on</span><br></pre></td></tr></table></figure><p>创建服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ keystone service-create --name=glance --<span class="built_in">type</span>=image --description=<span class="string">"OpenStack Image Service"</span></span><br><span class="line">$ keystone endpoint-create --service-id=$(keystone service-list | awk <span class="string">'/ image / &#123;print $2&#125;'</span>) --publicurl=http://controller:9292 --internalurl=http://controller:9292 --adminurl=http://controller:9292</span><br><span class="line"></span><br><span class="line">$ keystone service-create --name=glance --<span class="built_in">type</span>=image --description=<span class="string">"OpenStack Image Service"</span></span><br><span class="line">/usr/lib64/python2.6/site-packages/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec. You should rebuild using libgmp &gt;= 5 to avoid timing attack vulnerability.</span><br><span class="line"> _warn(<span class="string">"Not using mpz_powm_sec. You should rebuild using libgmp &gt;= 5 to avoid timing attack vulnerability."</span>, PowmInsecureWarning)</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| description | OpenStack Image Service |</span><br><span class="line">| enabled | True |</span><br><span class="line">| id | a45f77cfc12c42d19a45a6ea12cdfc51 |</span><br><span class="line">| name| glance |</span><br><span class="line">| <span class="built_in">type</span>| image |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">[root@controller ~]<span class="comment"># keystone endpoint-create \</span></span><br><span class="line">&gt; --service-id=$(keystone service-list | awk <span class="string">'/ image / &#123;print $2&#125;'</span>) \</span><br><span class="line">&gt; --publicurl=http://controller:9292 \</span><br><span class="line">&gt; --internalurl=http://controller:9292 \</span><br><span class="line">&gt; --adminurl=http://controller:9292</span><br><span class="line"></span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| Property | Value |</span><br><span class="line">+-------------+----------------------------------+</span><br><span class="line">| adminurl | http://controller:9292 |</span><br><span class="line">| id | 75deb2d2f85e4b7b88fe18bf5fca1a87 |</span><br><span class="line">| internalurl | http://controller:9292 |</span><br><span class="line">| publicurl | http://controller:9292 |</span><br><span class="line">|region |regionOne |</span><br><span class="line">| service_id | a45f77cfc12c42d19a45a6ea12cdfc51 |</span><br><span class="line">+-------------+----------------------------------+</span><br></pre></td></tr></table></figure><p>创建镜像，先将下载好的cirros-0.3.2-x86_64-disk.img放置在/root目录下，然后执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ glance image-create --name <span class="string">"cirros-0.3.2-x86_64"</span> --disk-format qcow2 --container-format bare --is-public True --progress &lt; cirros-0.3.2-x86_64-disk.img</span><br></pre></td></tr></table></figure><p>查看镜像列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ glance image-list</span><br></pre></td></tr></table></figure><p><img src="/images/openstack-image-list.jpg" alt="openstack-image-list"></p><p>在前面我们已经对kvm虚拟化有所了解，所以我们现在知道qcow2就是一个镜像文件。</p><h3 id="服务器管理（Nova"><a href="#服务器管理（Nova" class="headerlink" title="服务器管理（Nova)"></a>服务器管理（Nova)</h3><p>对于虚拟机管理我们需要从controller和computer01进行配置。</p><p>先来看controller的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ yum install openstack-nova-api openstack-nova-cert openstack-nova-conductor openstack-nova-console openstack-nova-novncproxy openstack-nova-scheduler python-novaclient</span><br><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CREATE DATABASE nova;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON nova.* TO <span class="string">'nova'</span>@<span class="string">'localhost'</span> \</span><br><span class="line">IDENTIFIED BY <span class="string">'NOVA_DBPASS'</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON nova.* TO <span class="string">'nova'</span>@<span class="string">'%'</span> \</span><br><span class="line">IDENTIFIED BY <span class="string">'NOVA_DBPASS'</span>;</span><br><span class="line"></span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf database connection mysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT qpid_hostname controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT my_ip 192.168.44.147</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT vncserver_listen 192.168.216.210</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT vncserver_proxyclient_address 192.168.44.147</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT auth_strategy keystone</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken auth_host controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken auth_port 35357</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken admin_user nova</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken admin_password NOVA_PASS</span><br><span class="line">$ keystone user-create --name=nova --pass=NOVA_PASS --email=nova@example.com</span><br><span class="line">$ keystone user-role-add --user=nova --tenant=service --role=admin</span><br><span class="line">$ keystone service-create --name=nova --<span class="built_in">type</span>=compute --description=<span class="string">"OpenStack Compute"</span></span><br><span class="line">$ keystone endpoint-create --service-id=$(keystone service-list | awk <span class="string">'/ compute / &#123;print $2&#125;'</span>) --publicurl=http://controller:8774/v2/%\(tenant_id\)s --internalurl=http://controller:8774/v2/%\(tenant_id\)s --adminurl=http://controller:8774/v2/%\(tenant_id\)s</span><br></pre></td></tr></table></figure><p>然后是computer01的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ yum install openstack-nova-compute</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf database connection mysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT auth_strategy keystone</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken auth_host controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken auth_port 35357</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken admin_user nova</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf keystone_authtoken admin_password NOVA_PASS</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT qpid_hostname controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT my_ip 192.168.44.148</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT vnc_enabled True</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT vncserver_listen 0.0.0.0</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT vncserver_proxyclient_address 192.168.44.148</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT novncproxy_base_url http://controller:6080/vnc_auto.html</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT glance_host controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf libvirt virt_type kvm</span><br></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ service libvirtd start</span><br><span class="line">$ service messagebus start</span><br><span class="line">$ service openstack-nova-compute start</span><br><span class="line">$ chkconfig libvirtd on</span><br><span class="line">$ chkconfig messagebus on</span><br><span class="line">$ chkconfig openstack-nova-compute on</span><br></pre></td></tr></table></figure><h3 id="网络服务配置"><a href="#网络服务配置" class="headerlink" title="网络服务配置"></a>网络服务配置</h3><p>在controller端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT network_api_class nova.network.api.API</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT security_group_api nova</span><br></pre></td></tr></table></figure><p>在computer01端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ yum install openstack-nova-network openstack-nova-api</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT network_api_class nova.network.api.API</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT security_group_api nova</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT network_manager nova.network.manager.FlatDHCPManager</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.libvirt.firewall.IptablesFirewallDriver</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT network_size 254</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT allow_same_net_traffic False</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT multi_host True</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT send_arp_for_ha True</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT share_dhcp_address True</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT force_dhcp_release True</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT flat_network_bridge br100</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT flat_interface eth1</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/nova/nova.conf DEFAULT public_interface eth0</span><br><span class="line">$ nova network-create demo-net --bridge br100 --multi-host T --fixed-range-v4 88.8.8.16/28</span><br></pre></td></tr></table></figure><p>然后使用nova net-list来查看：<br><img src="/images/openstack-nova-net-list.png" alt="openstack-nova-net-list"></p><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><h3 id="配置ssh密码登录："><a href="#配置ssh密码登录：" class="headerlink" title="配置ssh密码登录："></a>配置ssh密码登录：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><h3 id="增加公钥到openstack环境中："><a href="#增加公钥到openstack环境中：" class="headerlink" title="增加公钥到openstack环境中："></a>增加公钥到openstack环境中：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nova keypair-add --pub-key ~/.ssh/id_rsa.pub demo-key</span><br></pre></td></tr></table></figure><h3 id="验证是否配置成功："><a href="#验证是否配置成功：" class="headerlink" title="验证是否配置成功："></a>验证是否配置成功：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nova keypair-list</span><br><span class="line">$ nova flavor-list</span><br></pre></td></tr></table></figure><h3 id="创建实例："><a href="#创建实例：" class="headerlink" title="创建实例："></a>创建实例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nova boot --flavor m1.tiny --image cirros-0.3.2-x86_64 --nic netid=DEMO_NET_ID --security-group default --key-name demo-key demo-instance1</span><br></pre></td></tr></table></figure><p>说明：</p><p>DEMO_NET_ID：指的是nova net-list的ID。</p><p>demo-instance1指的是虚拟机的名字。</p><p>例如我的成功执行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nova boot --flavor m1.tiny --image cirros-0.3.2-x86_64 --nic net-id=55fc305f-570f-4d4f-89d0-ce303e589f20 --security-group default --key-name demo-key tfjt</span><br></pre></td></tr></table></figure><h3 id="使用nova-list进行查看："><a href="#使用nova-list进行查看：" class="headerlink" title="使用nova list进行查看："></a>使用nova list进行查看：</h3><p><img src="/images/openstack-nova-list.png" alt="openstack-nova-list"><br>从这里我们看到我这上面有一个ip地址192.168.44.17.这个地址就是浮动IP。</p><h3 id="配置浮动IP"><a href="#配置浮动IP" class="headerlink" title="配置浮动IP"></a>配置浮动IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 浮动ip</span></span><br><span class="line">$ nova-manage floating create --ip_range=192.168.44.16/28</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看可用地址</span></span><br><span class="line">$ nova-manage floating list</span><br><span class="line">$ nova floating-ip-create</span><br><span class="line"></span><br><span class="line"><span class="comment">## 给创建的虚拟机绑定浮动ip，这个7bc0086…就是我之前创建的虚拟机的ID。后面接上IP地址即可。</span></span><br><span class="line">$ nova add-floating-ip 7bc00086-1870-4367-9f05-666d5067ccff 192.168.44.17</span><br><span class="line"></span><br><span class="line"><span class="comment">## 监听</span></span><br><span class="line">$ cpdump -n -i eth0 icmp</span><br></pre></td></tr></table></figure><p>在controller上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0</span><br><span class="line">$ nova secgroup-add-rule default tcp 22 22 0.0.0.0/0</span><br></pre></td></tr></table></figure><h3 id="使用下面的命令可以输出一个url地址："><a href="#使用下面的命令可以输出一个url地址：" class="headerlink" title="使用下面的命令可以输出一个url地址："></a>使用下面的命令可以输出一个url地址：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nova get-vnc-console tfjt novnc</span><br></pre></td></tr></table></figure><h3 id="我们可以在浏览器中进行访问。"><a href="#我们可以在浏览器中进行访问。" class="headerlink" title="我们可以在浏览器中进行访问。"></a>我们可以在浏览器中进行访问。</h3><p><img src="/images/openstack-vnc.png" alt="openstack-vnc"><br>到这里为止，我们的云服务器就算完成了。可以在浏览器上访问我们的云服务器，怎么样是不是很激动。</p><h2 id="界面服务（dashboard）"><a href="#界面服务（dashboard）" class="headerlink" title="界面服务（dashboard）"></a>界面服务（dashboard）</h2><p>上面我们可以看到很多操作是在终端进行的，那么肯定是有界面版的，所以我们在computer02中进行配置。</p><h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install memcached python-memcached mod_wsgi openstack-dashboard</span><br></pre></td></tr></table></figure><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><p>在controller中</p><p>配置/etc/openstack-dashboard/local_settings。修改为如下内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">CACHES = &#123;  </span><br><span class="line"><span class="string">'default'</span>: &#123;  </span><br><span class="line"><span class="string">'BACKEND'</span> : <span class="string">'django.core.cache.backends.memcached.MemcachedCache'</span>,  </span><br><span class="line"><span class="string">'LOCATION'</span> : <span class="string">'127.0.0.1:11211'</span>  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">OPENSTACK_HOST = <span class="string">"controller"</span></span><br></pre></td></tr></table></figure><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ setsebool -P httpd_can_network_connect on</span><br><span class="line">$ service httpd start</span><br><span class="line">$ service memcached start</span><br><span class="line">$ chkconfig httpd on</span><br><span class="line">$ chkconfig memcached on</span><br></pre></td></tr></table></figure><h3 id="浏览器中访问"><a href="#浏览器中访问" class="headerlink" title="浏览器中访问"></a>浏览器中访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http://192.168.44.147/dashboard/project/</span><br></pre></td></tr></table></figure><p><img src="/images/openstack-dashboard-1.png" alt="openstack-dashboard-1"></p><p>用户名就是我们之前配置的admin,密码是ADMIN_PASS</p><p>在这个界面版里面的各种操作我这里就不细说了，可以自己去体验。<br><img src="/images/openstack-dashboard-2.png" alt="openstack-dashboard-2"></p><p>在这里可以看到我们的云服务器实例。<br><img src="/images/openstack-dashboard-3.png" alt="openstack-dashboard-3"></p><h2 id="云硬盘服务（cinder"><a href="#云硬盘服务（cinder" class="headerlink" title="云硬盘服务（cinder)"></a>云硬盘服务（cinder)</h2><p>了解过阿里云或者腾讯云的就知道，里面都有一个云硬盘服务，可以给我们的机器增加磁盘。</p><p>在controller端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum stall openstack-cinde</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf database connection mysql://cinder:CINDER_DBPASS@controller/cinder</span><br><span class="line">mysql&gt; CREATE DATABASE cinder;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON cinder.* TO <span class="string">'cinder'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'CINDER_DBPASS'</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON cinder.* TO <span class="string">'cinder'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'CINDER_DBPASS'</span>;</span><br></pre></td></tr></table></figure><p>创建数据库表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su -s /bin/sh -c <span class="string">"cinder-manage db sync"</span> cinder</span><br></pre></td></tr></table></figure></p><p>创建用户并赋予角色：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ keystone user-create --name=cinder --pass=CINDER_PASS--email=cinder@example.com</span><br><span class="line">$ keystone user-role-add --user=cinder --tenant=service --role=admin</span><br></pre></td></tr></table></figure></p><p>权限控制配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT auth_strategy keystone</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken auth_host controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken auth_port 35357</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken admin_user cinder</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken admin_password CINDER_PASS</span><br></pre></td></tr></table></figure></p><p>消息队列配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT qpid_hostname controller</span><br><span class="line"></span><br><span class="line">$ keystone service-create --name=cinder --<span class="built_in">type</span>=volume --description=<span class="string">"OpenStack Block Storage"</span></span><br><span class="line">$ keystone endpoint-create --service-id=$(keystone service-list | awk <span class="string">'/ volume / &#123;print $2&#125;'</span>) --publicurl=http://controller:8776/v1/%\(tenant_id\)s --internalurl=http://controller:8776/v1/%\(tenant_id\)s --adminurl=http://controller:8776/v1/%\(tenant_id\)s</span><br><span class="line"></span><br><span class="line">$ keystone service-create --name=cinderv2 --<span class="built_in">type</span>=volumev2 --description=<span class="string">"OpenStack Block Storage v2"</span></span><br><span class="line">$ keystone endpoint-create --service-id=$(keystone service-list | awk <span class="string">'/ volumev2 / &#123;print $2&#125;'</span>) --publicurl=http://controller:8776/v2/%\(tenant_id\)s --internalurl=http://controller:8776/v2/%\(tenant_id\)s --adminurl=http://controller:8776/v2/%\(tenant_id\)s</span><br><span class="line"></span><br><span class="line">$ service openstack-cinder-api start</span><br><span class="line">$ service openstack-cinder-scheduler start</span><br><span class="line">$ chkconfig openstack-cinder-api on</span><br><span class="line">$ chkconfig openstack-cinder-scheduler on</span><br><span class="line"></span><br><span class="line">$ cinder service-list</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT qpid_hostname controller</span><br><span class="line"></span><br><span class="line">$ cinder --debug list</span><br><span class="line">$ keystone user-create --name=cinder --pass=CINDER_PASS --email=cinder@example.com</span><br><span class="line"></span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT my_ip 192.168.44.147</span><br></pre></td></tr></table></figure></p><p>在node端（computer02)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ pvcreate /dev/sdb</span><br><span class="line">$ vgcreate cinder-volumes /dev/sdb</span><br><span class="line">$ yum install openstack-cinder scsi-target-utils</span><br><span class="line"></span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT auth_strategy keystone</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken auth_uri http://controller:5000</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken auth_host controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken auth_port 35357</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken admin_user cinder</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf keystone_authtoken admin_password CINDER_PASS</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT qpid_hostname controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf database connection mysql://cinder:CINDER_DBPASS@controller/cinde</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT my_ip MANAGEMENT_INTERFACE_IP_ADDRESS</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT glance_host controller</span><br><span class="line">$ openstack-config --<span class="built_in">set</span> /etc/cinder/cinder.conf DEFAULT iscsi_helper tgtadm</span><br></pre></td></tr></table></figure><p>配置文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/tgt/targets.conf</span><br><span class="line">include /etc/cinder/volumes/*</span><br></pre></td></tr></table></figure><p>启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-cinder-volume start</span><br><span class="line">$ service tgtd start</span><br><span class="line">$ chkconfig openstack-cinder-volume on</span><br><span class="line">$ chkconfig tgtd on</span><br></pre></td></tr></table></figure></p><p>创建磁盘：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cinder create --display-name myVolume 1</span><br></pre></td></tr></table></figure></p><p>查看磁盘列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cinder list</span><br></pre></td></tr></table></figure></p><p>然后再界面端查看云硬盘的配置并进行挂载：<br><img src="/images/openstack-dashboard-4.png" alt="openstack-dashboard-4"></p><p>在云服务器上挂载磁盘：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ mkfs.ext3 /dev/vdb1</span><br><span class="line"></span><br><span class="line">$ mkdir /mnt/<span class="built_in">test</span></span><br><span class="line">$ mount /dev/vdb1 /mnt/<span class="built_in">test</span></span><br><span class="line">$ mount</span><br><span class="line"></span><br><span class="line">$ fdisk /dev/vdb</span><br><span class="line">Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x64817ea3.</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">After that, of course, the previous content won‘t be recoverable.</span><br><span class="line"></span><br><span class="line">Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line"> p primary (0 primary, 0 extended, 4 free)</span><br><span class="line"> e extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1): 1</span><br><span class="line">First sector (2048-2097151, default 2048): +1G</span><br><span class="line">Value out of range.</span><br><span class="line">First sector (2048-2097151, default 2048): +512M</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (1048576-2097151, default 2097151): </span><br><span class="line">Using default value 2097151</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 1073 MB, 1073741824 bytes</span><br><span class="line">16 heads, 63 sectors/track, 2080 cylinders, total 2097152 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x64817ea3</span><br><span class="line"></span><br><span class="line"> Device Boot Start End Blocks Id System</span><br><span class="line">/dev/vdb1 1048576 2097151 524288 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line">$ df -h</span><br></pre></td></tr></table></figure></p><p><img src="/images/openstack-dashboard-5.png" alt="openstack-dashboard-5"></p><p>总结：整个操作流程非常复杂，我也是花了几天才慢慢搭建好的，这其实也就是个基础，给的其实是一个思路，后面需要怎样的扩展可以根据自己的业务需要进行不同的设置。对于不明白的地方可以查阅官方文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是openstack安装部署私有云详细图文教程&lt;/p&gt;
&lt;p&gt;本文主要分享的是云计算、openstack的使用、私有云平台建设、云服务器云硬盘的构建和使用。从基本概念入手到私有云建设，信息量非常大。对于openstack的安装部署都是从官方文档中一步步的介绍，内
      
    
    </summary>
    
      <category term="OpenStack安装部署教程" scheme="http://yoursite.com/categories/OpenStack%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="OpenStack" scheme="http://yoursite.com/tags/OpenStack/"/>
    
      <category term="Installation" scheme="http://yoursite.com/tags/Installation/"/>
    
  </entry>
  
  <entry>
    <title>supervisor 安装、配置、常用命令</title>
    <link href="http://yoursite.com/2018/03/08/supervisor/"/>
    <id>http://yoursite.com/2018/03/08/supervisor/</id>
    <published>2018-03-07T16:00:00.000Z</published>
    <updated>2018-03-15T08:55:15.972Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是supervisor 安装、配置、常用命令</p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Supervisor是用Python写的一款应用程监控管理工具，能够启动，停止，重启死进程，提供web管理界面，XML-RPC接口及事件监听。通常我们写了一些脚本都不会带有daemon功能，而是加&amp;或者nohub，screen什么的丢到后台去运行，同时使用corntab定时检测脚本是否存活，以便重新运行脚本。使用Supervisor可以将这些脚本，程序转为守护进程，自动重启它们；还可以监控机器的进程运行状况，输出警报等。</p><p>Supervisor只能运行于Python 2.x的环境，但子进程可以为其他任意程序，比如Python 3，PHP等。这里使用pip来安装</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>CentOS系统下：<code>$ yum install supervisor</code>，通过这种方式安装后，自动设置为开机启动</p></li><li><p>也可以通过<code>pip install supervisor</code>进行安装，但是需要手动启动，然后手动设置为开机启动</p></li></ul><h2 id="Supervisor-配置"><a href="#Supervisor-配置" class="headerlink" title="Supervisor 配置"></a>Supervisor 配置</h2><p>Supervisor 是一个 C/S 模型的程序，<code>supervisord</code>是<code>server</code>端，<code>supervisorctl</code>是<code>client</code>端。</p><h3 id="supervisord"><a href="#supervisord" class="headerlink" title="supervisord"></a>supervisord</h3><p>下面介绍 supervisord 配置方法。supervisord 的配置文件默认位于<code>/etc/supervisord.conf</code>，内容如下（;后面为注释）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file) UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700) socket 文件的 mode，默认是 0700</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/<span class="built_in">log</span>/supervisor/supervisord.log ; (main <span class="built_in">log</span> file;default <span class="variable">$CWD</span>/supervisord.log) 日志文件，默认是 <span class="variable">$CWD</span>/supervisord.log</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid) pid 文件</span><br><span class="line">childlogdir=/var/<span class="built_in">log</span>/supervisor            ; (<span class="string">'AUTO'</span> child <span class="built_in">log</span> dir, default <span class="variable">$TEMP</span>)</span><br><span class="line"></span><br><span class="line">; the below section must remain <span class="keyword">in</span> the config file <span class="keyword">for</span> RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them <span class="keyword">in</span> separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  <span class="keyword">for</span> a unix socket 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span><br><span class="line"></span><br><span class="line">; 在增添需要管理的进程的配置文件时，推荐写到 `/etc/supervisor/conf.d/` 目录下，所以 `include` 项，就需要像如下配置。</span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf ; 引入 `/etc/supervisor/conf.d/` 下的 `.conf` 文件</span><br></pre></td></tr></table></figure><h3 id="program-配置"><a href="#program-配置" class="headerlink" title="program 配置"></a>program 配置</h3><p>program 的配置文件就写在，<code>supervisord</code> 配置中<code>include</code>项的路径下：<code>/etc/supervisor/conf.d/</code>，然后<code>program</code>的配置文件命名规则推荐：<code>app_name.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:app] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class="line">autorestart=True      ; 程序异常退出后自动重启</span><br><span class="line">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 <span class="literal">false</span></span><br><span class="line">environment=PATH=<span class="string">"/home/app_env/bin"</span>  ; 可以通过 environment 来添加需要的环境变量，一种常见的用法是使用指定的 virtualenv 环境</span><br><span class="line"><span class="built_in">command</span>=python server.py  ; 启动命令，与手动在命令行启动的命令是一样的</span><br><span class="line">user=ubuntu           ; 用哪个用户启动</span><br><span class="line">directory=/home/app/  ; 程序的启动目录</span><br></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li><p>用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False</p></li><li><p>如果启动命令需要包含<code>workon</code>，修改environment参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">environment=PATH="/home/username/.virtualenvs/myproject/bin"</span><br></pre></td></tr></table></figure></li></ul><h2 id="supervisorctl-操作"><a href="#supervisorctl-操作" class="headerlink" title="supervisorctl 操作"></a>supervisorctl 操作</h2><p>supervisorctl 是 supervisord 的命令行客户端工具，使用的配置和 supervisord 一样，这里就不再说了。下面，主要介绍 supervisorctl 操作的常用命令：</p><p>输入命令 <code>supervisorctl</code> 进入 supervisorctl 的 shell 交互界面（还是纯命令行），就可以在下面输入命令了：</p><ul><li>help # 查看帮助</li><li>status # 查看程序状态</li><li>stop program_name # 关闭 指定的程序</li><li>start program_name # 启动 指定的程序</li><li>restart program_name # 重启 指定的程序</li><li>tail -f program_name # 查看 该程序的日志</li><li>update # 重启配置文件修改过的程序（修改了配置，通过这个命令加载新的配置)</li></ul><p>也可以直接通过 shell 命令操作：</p><ul><li>supervisorctl status</li><li>supervisorctl update<br>…</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是supervisor 安装、配置、常用命令&lt;/p&gt;
&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;Supervisor是用Python写的一款应用程监控管理工具，能够
      
    
    </summary>
    
      <category term="supervisor 安装、配置、常用命令" scheme="http://yoursite.com/categories/supervisor-%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="supervisor" scheme="http://yoursite.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>比特币如何挖矿（挖矿原理）-工作量证明</title>
    <link href="http://yoursite.com/2018/03/03/blockchain-pow/"/>
    <id>http://yoursite.com/2018/03/03/blockchain-pow/</id>
    <published>2018-03-02T16:00:00.000Z</published>
    <updated>2018-03-07T08:34:30.193Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是比特币如何挖矿（挖矿原理）-工作量证明</p><p>在<a href="https://polaris0112.github.io/2018/03/02/blockchain-accounting/" target="_blank" rel="noopener">区块链记账原理</a>一篇，我们了解到记账是把交易记录、交易时间、账本序号、上一个Hash值等信息计算Hash打包的过程。<br>我们知道所有的计算和存贮是需要消耗计算机资源的，既然要付出成本，那节点为什么还要参与记账呢？在中本聪（比特币之父）的设计里，完成记账的节点可以获得系统给与的一定数量的比特币奖励，这个奖励的过程也就是比特币的发行过程，因此大家形象的把记账称为“挖矿”，本文将详细讨论这个过程。</p><h2 id="记账工作"><a href="#记账工作" class="headerlink" title="记账工作"></a>记账工作</h2><p>由于记账是有奖励的，每次记账都可以给自己凭空增加一定数量的个比特币（当前是12.5比特币，博文写作时每个比特币是4万人民币以上，大家可以算算多少钱），因此就出现大家争相记账，大家一起记账就会引起问题：出现记账不一致的问题，比特币系统引入工作量证明来解决这个问题，规则如下：</p><ul><li>一段时间内（10分钟左右，具体时间会与密码学难题难度相互影响）只有一人可以记账成功</li><li>通过解决密码学难题（即工作量证明）竞争获得唯一记账权</li><li>其他节点复制记账结果</li></ul><p>不过在进行工作量证明之前，记账节点会做进行如下准备工作：</p><ul><li>收集广播中还没有被记录账本的原始交易信息</li><li>检查每个交易信息中付款地址有没有足够的余额</li><li>验证交易是否有正确的签名</li><li>把验证通过的交易信息进行打包记录</li><li>添加一个奖励交易：给自己的地址增加12.5比特币</li></ul><p>如果节点争夺记账权成功的话，就可以得到12.5比特币的奖励。</p><h2 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h2><p><a href="https://polaris0112.github.io/2018/03/02/blockchain-accounting/" target="_blank" rel="noopener">区块链记账原理</a>我们了解到，每次记账的时候会把上一个块的Hash值和当前的账页信息一起作为原始信息进行Hash。<br>如果仅仅是这样，显然每个人都可以很轻松的完成记账。<br>为了保证10分钟左右只有一个人可以记账，就必须要提高记账的难度，使得Hash的结果必须以若干个0开头。同是为了满足这个条件，在进行Hash时引入一个随机数变量。</p><p>用伪代码表示一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有难度时为：Hash(上一个Hash值，交易记录集) = 456635BCD</span></span><br><span class="line">Hash(上一个Hash值，交易记录集，随机数) = 0000aFD635BCD</span><br></pre></td></tr></table></figure><p>我们知道改变Hash的原始信息的任何一部分，Hash值也会随之不断的变化，因此在运算Hash时，不断的改变随机数的值，总可以找的一个随机数使的Hash的结果以若干个0开头（下文把这个过程称为猜谜），率先找到随机数的节点就获得此次记账的唯一记账权。</p><h3 id="计算量分析"><a href="#计算量分析" class="headerlink" title="计算量分析"></a>计算量分析</h3><p>（这部分可选阅读）我们简单分析下记账难度有多大，<br>Hash值是由数字和大小写字母构成的字符串，每一位有62种可能性（可能为26个大写字母、26个小写字母，10个数字中任一个），假设任何一个字符出现的概率是均等的，那么第一位为0的概率是1/62（其他位出现什么字符先不管），理论上需要尝试62次Hash运算才会出现一次第一位为0的情况，如果前两2位为0，就得尝试62的平方次Hash运算，以n个0开头就需要尝试62的n次方次运算。我们结合当前实际区块#493050信息来看看：</p><p><img src="/images/blockchain-6.jpg" alt="blockchain-6"></p><p>注：<a href="https://blockchain.info" target="_blank" rel="noopener">数据来源</a><br>我们可以看到Hash值以18个0开头，理论上需要尝试62的18次方次，这个数是非常非常巨大的，我已经算不清楚了，应该是亿亿级别以上了。如此大的计算量需要投入大量的计算设备、电力等，<br>目前应该没有单矿工独立参与挖矿了，基本都是由矿工联合起来组成矿池进行挖矿（矿池里的矿工按算力百分比来分收益）。</p><p>从经济的角度讲，只有挖矿还有收益（比特币价格不断上涨也让收益变大），就会有新的矿工加入，从而加剧竞争，提高算力难度，挖矿就需要耗费更多的运算和电力，相互作用引起最终成本会接近收益。</p><p>题外话：国内由于电力成本较低，相对收益更高，中国的算力占整个网络的一半以上</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在节点成功找到满足的Hash值之后，会马上对全网进行广播打包区块，网络的节点收到广播打包区块，会立刻对其进行验证。</p><p>如果验证通过，则表明已经有节点成功解迷，自己就不再竞争当前区块打包，而是选择接受这个区块，记录到自己的账本中，然后进行下一个区块的竞争猜谜。<br>网络中只有最快解谜的区块，才会添加的账本中，其他的节点进行复制，这样就保证了整个账本的唯一性。</p><p>假如节点有任何的作弊行为，都会导致网络的节点验证不通过，直接丢弃其打包的区块，这个区块就无法记录到总账本中，作弊的节点耗费的成本就白费了，因此在巨大的挖矿成本下，也使得矿工自觉自愿的遵守比特币系统的共识协议，也就确保了整个系统的安全。</p><p>进阶阅读<a href="https://polaris0112.github.io/2018/03/03/blockchain-merkle/" target="_blank" rel="noopener">比特币区块结构Merkle树及简单支付验证分析</a>，可以详细了解区块结构如何验证交易。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>矿工的收益其实不仅仅包含新发行的12.5比特币奖励，同时还有交易费收益（本文忽略一些细节是为了让主干更清晰）。</p><p>有兴趣的同学可以看看图中区块都包含了那些信息，红箭头标示出的是本文涉及的信息。</p><p>本文中有提到共识协议，比特币共识协议主要是由工作量证明和最长链机制 两部分组成，请阅读<a href="https://polaris0112.github.io/2018/03/03/blockchain-selection/" target="_blank" rel="noopener">比特币如何达成共识 - 最长链的选择</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是比特币如何挖矿（挖矿原理）-工作量证明&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://polaris0112.github.io/2018/03/02/blockchain-accounting/&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
      <category term="比特币如何挖矿（挖矿原理）-工作量证明" scheme="http://yoursite.com/categories/%E6%AF%94%E7%89%B9%E5%B8%81%E5%A6%82%E4%BD%95%E6%8C%96%E7%9F%BF%EF%BC%88%E6%8C%96%E7%9F%BF%E5%8E%9F%E7%90%86%EF%BC%89-%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E/"/>
    
    
      <category term="Blockchain" scheme="http://yoursite.com/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>比特币如何达成共识 - 最长链的选择</title>
    <link href="http://yoursite.com/2018/03/03/blockchain-selection/"/>
    <id>http://yoursite.com/2018/03/03/blockchain-selection/</id>
    <published>2018-03-02T16:00:00.000Z</published>
    <updated>2018-03-07T08:36:25.056Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是比特币如何达成共识 - 最长链的选择</p><p>比特币没有中心机构，几乎所有的完整节点都有一份公共总帐本，那么大家如何达成共识：确认哪一份才是公认权威的总账本呢？</p><h2 id="为什么要遵守协议"><a href="#为什么要遵守协议" class="headerlink" title="为什么要遵守协议"></a>为什么要遵守协议</h2><p>这其实是一个经济问题，在经济活动中的每个人都是自私自利的，追求的是利益的最大化，一个节点工作量只有在其他的节点认同其是有效的（打包的新区块，其他的节点只有验证通过才会加入到区块链中，并在网络上传播），才能够过得收益，<br>而只有遵守规则才会得到其他的节点认同。<br>因此，基于逐利，节点就会自发的遵守协议。共识就是数以万计的独立节点遵守了简单的规则（通过异步交互）自发形成的。</p><blockquote><p>共识：共同遵守的协议规范</p></blockquote><h2 id="去中心化共识"><a href="#去中心化共识" class="headerlink" title="去中心化共识"></a>去中心化共识</h2><p>在<a href="https://polaris0112.github.io/2018/03/03/blockchain-pow/" target="_blank" rel="noopener">工作量证明</a>一篇，我们了解通过工作量证明来竞争记账，权威的总帐本是怎么达到共识的，没有完全说清楚，今天补上，<br>实际上，比特币的共识由所有节点的4个独立过程相互作用而产生：</p><ul><li>每个节点（挖矿节点）依据标准对每个交易进行独立验证</li><li>挖矿节点通过完成工作量证明，将交易记录独立打包进新区块</li><li>每个节点独立的对新区块进行校验并组装进区块链</li><li>每个节点对区块链进行独立选择，在工作量证明机制下选择累计工作量最大的区块链</li></ul><p>共识最终目的是保证比特币不停的在工作量最大的区块链上运转，工作量最大的区块链就是权威的公共总帐本。</p><h2 id="最长链的选择"><a href="#最长链的选择" class="headerlink" title="最长链的选择"></a>最长链的选择</h2><p>先来一个定义，把累计了最多难度的区块链。在一般情况下，也是包含最多区块的那个链称为<strong>主链</strong><br>每一个（挖矿）节点总是选择并尝试延长主链。</p><h2 id="分叉"><a href="#分叉" class="headerlink" title="分叉"></a>分叉</h2><p>当有两名矿工在几乎在相同的时间内，各自都算得了工作量证明解，便立即传播自己的“获胜”区块到网络中，先是传播给邻近的节点而后传播到整个网络。每个收到有效区块的节点都会将其并入并延长区块链。<br>当这个两个区块传播时，一些节点首先收到#3458A, 一些节点首先收到#3458B，这两个候选区块（通常这两个候选区块会包含几乎相同的交易）都是主链的延伸，分叉就会产生，这时分叉出有竞争关系的两条链，如图：</p><p><img src="/images/blockchain-7.jpg" alt="blockchain-7"></p><p>两个块都收到的节点，会把其中有更多工作量的一条会继续作为主链，另一条作为备用链保存（保存是因为备用链将来可能会超过主链难度称为新主链）。</p><h2 id="分叉解决"><a href="#分叉解决" class="headerlink" title="分叉解决"></a>分叉解决</h2><p>收到#3458A的（挖矿）节点，会立刻以这个区块为父区块来产生新的候选区块，并尝试寻找这个候选区块的工作量证明解。同样地，接受#3458B区块的节点会以这个区块为链的顶点开始生成新块，延长这个链（下面称为B链）。<br>这时总会有一方抢先发现工作量证明解并将其传播出去，假设以#3458B为父区块的工作量证明首先解出，如图：</p><p><img src="/images/blockchain-8.jpg" alt="blockchain-8"></p><p>当原本以#3458A为父区块求解的节点在收到#3458B, #3459B之后，会立刻将B链作为主链（因为#3458A为顶点的链已经不是最长链了）继续挖矿。</p><blockquote><p>节点也有可能先收到#3459B，再收到#3458B，收到#3459B时，会被认为是“孤块“（因为还找不到#3459B的父块#3458B）保存在孤块池中，一旦收到父块#3458B时，节点就会将孤块从孤块池中取出，并且连接到它的父区块，让它作为区块链的一部分。</p></blockquote><p>比特币将区块间隔设计为10分钟，是在更快速的交易确认和更低的分叉概率间作出的妥协。更短的区块产生间隔会让交易确认更快地完成，也会导致更加频繁地区块链分叉。与之相对地，长的间隔会减少分叉数量，却会导致更长的确认时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是比特币如何达成共识 - 最长链的选择&lt;/p&gt;
&lt;p&gt;比特币没有中心机构，几乎所有的完整节点都有一份公共总帐本，那么大家如何达成共识：确认哪一份才是公认权威的总账本呢？&lt;/p&gt;
&lt;h2 id=&quot;为什么要遵守协议&quot;&gt;&lt;a href=&quot;#为什么要遵守协议&quot; clas
      
    
    </summary>
    
      <category term="比特币如何达成共识 - 最长链的选择" scheme="http://yoursite.com/categories/%E6%AF%94%E7%89%B9%E5%B8%81%E5%A6%82%E4%BD%95%E8%BE%BE%E6%88%90%E5%85%B1%E8%AF%86-%E6%9C%80%E9%95%BF%E9%93%BE%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    
    
      <category term="Blockchain" scheme="http://yoursite.com/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>比特币区块结构 Merkle 树及简单支付验证分析</title>
    <link href="http://yoursite.com/2018/03/03/blockchain-merkle/"/>
    <id>http://yoursite.com/2018/03/03/blockchain-merkle/</id>
    <published>2018-03-02T16:00:00.000Z</published>
    <updated>2018-03-07T08:35:51.512Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是比特币区块结构 Merkle 树及简单支付验证分析</p><p>在比特币网络中，不是每个节点都有能力储存完整的区块链数据，受限于存储空间的的限制，很多节点是以SPV（Simplified Payment Verification简单支付验证）钱包接入比特币网络，通过简单支付验证可以在不必存储完整区块链下对交易进行验证，本文将分析区块结构Merkle树及如何进行交易验证。</p><h2 id="区块结构"><a href="#区块结构" class="headerlink" title="区块结构"></a>区块结构</h2><p>在<a href="https://polaris0112.github.io/2018/03/03/blockchain-pow/" target="_blank" rel="noopener">工作量证明</a>中出现过一个区块信息截图：</p><p><img src="/images/blockchain-6.jpg" alt="blockchain-6"></p><p>细心的同学一定已经在里面发现了很多未讲的其他信息，如：时间戳，版本号，交易次数，二进制哈希树根(Merkle根)等。</p><p>我们来看看一个区块结构到底是怎样的：</p><p><img src="/images/blockchain-9.jpg" alt="blockchain-9"></p><p>如上图（下文称：区块结构图）所示：每个数据区块包含区块头和区块体。<br>区块头封装了当前版本号、前一区块哈希值、当前区块PoW要求的随机数(Nonce)、时间戳、以及Merkle根信息。<br>区块体则包括当前区块经过验证的、 区块创建过程中生成的所有交易记录。这些记录通过 Merkle树的哈希过程生成唯一的Merkle根并记入区块头.</p><blockquote><p>区块哈希值实际上并不包含在区块的数据结构里，其实区块打包时只有区块头被用于计算哈希（从网络被接收时由每个节点计算出来），常说的区块哈希值实际是区块头哈希值，它可以用来唯一、明确地标识一个区块。</p></blockquote><p>区块头是80字节，而平均每个交易至少是250字节，而且平均每个区块包含2000个交易。因此，包含完整交易的区块比区块头的4千倍还要大。<br>SPV节点只下载区块头，不下载包含在每个区块中的交易信息。这样的不含交易信息的区块链，大小只有完整区块链的几千分之1，那SPV节点是如何验证交易的呢？</p><h2 id="哈希验证"><a href="#哈希验证" class="headerlink" title="哈希验证"></a>哈希验证</h2><p>上面先留一个引子，先来回顾下哈希函数，<a href="https://polaris0112.github.io/2018/03/02/blockchain-accounting/" target="_blank" rel="noopener">记账原理</a>我们知道原始信息任何微小的变化都会哈希完全不同的哈希值。</p><h2 id="简单文件验证"><a href="#简单文件验证" class="headerlink" title="简单文件验证"></a>简单文件验证</h2><p>我们通常用哈希来检验下载的文件是否完整，我经常看到这样的下载页面：</p><p><img src="/images/blockchain-10.jpg" alt="blockchain-10"></p><p>可以看到下载链接后面提供了一个MD5（MD5也是一种Hash算法），这样我们可以在下载之后对文件计算MD5，如果MD5与提供的MD5相等，说明文件有没有被损坏，这个验证过程相信大家都能理解。</p><h3 id="多点文件验证-哈希列表"><a href="#多点文件验证-哈希列表" class="headerlink" title="多点文件验证(哈希列表)"></a>多点文件验证(哈希列表)</h3><p>现在复杂度提高一点，在P2P网络中下载时，会把大文件切成小文件，同时从多个机器上下载数据，这个时候怎么验证数据呢？</p><p>以BT下载为例，在下载真正的数据之前，我们会先下载一个哈希列表的（每个下小块计算出一个哈希），如果有一个小块数据在传输过程中损坏了，那我只要重新下载这一个数据块就行了，这时有一个问题就出现了，那么多的哈希，怎么保证它们本身(哈希列表中的哈希值)都是正确地呢？</p><p>答案是把每个小块数据的哈希值拼到一起，然后对这个长字符串在作一次哈希运算，得到哈希列表的根哈希。只要根哈希校对比一样就说明验哈希列表是正确的，再通过哈希列表校验小数据块，如果所有的小数据块验证通过则说明大文件没有被损坏。</p><h3 id="Merkle树"><a href="#Merkle树" class="headerlink" title="Merkle树"></a>Merkle树</h3><p>验证交易的过程和文件验证很相似，可以人为每个交易是一个小数据块，但比特币使用Merkle树的方式进行验证，相对于哈希列表，Merkle树是一种哈希二叉树，它的明显的一个好处是可以单独拿出一个分支来（作为一个小树）对部分数据进行校验，更加高效。</p><p>我们回看下上面的区块结构图，区块体就包含这样一个Merkle树,Merkle树被用来归纳一个区块中的所有交易。</p><p>每个叶子节点是每个交易信息的哈希，往上对相邻的两个哈希合并成字符串再哈希，继续类似的操作直到只剩下顶部的一个节点，即Merkle根，存入区块头。</p><p>因为Merkle树是二叉树，所以它需要偶数个叶子节点。如果仅有奇数个交易需要归纳，那最后的交易就会被复制一份以构成偶数个叶子节点，这种偶数个叶子节点的树也被称为平衡树。</p><h3 id="简化支付验证"><a href="#简化支付验证" class="headerlink" title="简化支付验证"></a>简化支付验证</h3><p>SPV节点不保存所有交易也不会下载整个区块，仅仅保存区块头，我们来看看它是如何对交易数据进行验证的。</p><p>假如要验证区块结构图中交易6，SPV节点会通过向相邻节点索要（通过Merkleblock消息）包括从交易6哈希值沿Merkle树上溯至区块头根哈希处的哈希序列 (即哈希节点6, 5, 56, 78, 5678, 1234 1~8 - 称为认证路径) 来确认交易的存在性和正确性。（在N个交易组成的区块中确认任一交易只需要计算log2(N)个字节的哈希值，非常快速高效）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是比特币区块结构 Merkle 树及简单支付验证分析&lt;/p&gt;
&lt;p&gt;在比特币网络中，不是每个节点都有能力储存完整的区块链数据，受限于存储空间的的限制，很多节点是以SPV（Simplified Payment Verification简单支付验证）钱包接入比特币网
      
    
    </summary>
    
      <category term="比特币区块结构 Merkle 树及简单支付验证分析" scheme="http://yoursite.com/categories/%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84-Merkle-%E6%A0%91%E5%8F%8A%E7%AE%80%E5%8D%95%E6%94%AF%E4%BB%98%E9%AA%8C%E8%AF%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Blockchain" scheme="http://yoursite.com/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>区块链记账原理</title>
    <link href="http://yoursite.com/2018/03/02/blockchain-accounting/"/>
    <id>http://yoursite.com/2018/03/02/blockchain-accounting/</id>
    <published>2018-03-01T16:00:00.000Z</published>
    <updated>2018-03-07T08:36:14.592Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是区块链记账原理</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>区块链(1.0)是一个基于密码学安全的分布式账本，是一个方便验证，不可篡改的账本。<br>通常认为与智能合约相结合的区块链为区块链2.0, 如以太坊是典型的区块链2.0<br>很多人只了解过比特币，不知道区块链，比特币实际是一个使用了区块链技术的应用，只是比特币当前太热，把区块链技术的光芒给掩盖了。区块链才是未来，期望各位开发人员少关心币价，多关心技术。<br>本文将讲解区块链1.0技术是如何实现的。</p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>在讲区块链记账之前，先说明一下哈希函数。<br>哈希函数：Hash(原始信息) = 摘要信息<br>原始信息可以是任意的信息, hash之后会得到一个简短的摘要信息</p><p>哈希函数有几个特点:</p><ul><li>同样的原始信息用同一个哈希函数总能得到相同的摘要信息</li><li>原始信息任何微小的变化都会哈希出面目全非的摘要信息</li><li>从摘要信息无法逆向推算出原始信息</li></ul><p>举例说明：<br>Hash(张三借给李四100万，利息1%，1年后还本息 …..) = AC4635D34DEF<br>账本上记录了AC4635D34DEF这样一条记录。</p><p>可以看出哈希函数有4个作用：</p><ul><li>简化信息<br>很好理解，哈希后的信息变短了。</li><li>标识信息<br>可以使用AC4635D34DEF来标识原始信息，摘要信息也称为原始信息的id。</li><li>隐匿信息<br>账本是AC4635D34DEF这样一条记录，原始信息被隐匿。</li><li>验证信息<br>假如李四在还款时欺骗说，张三只借给李四10万，双方可以用AC4635D34DEF来验证原始信息</li></ul><p>哈希函数的这4个作用在区块链技术里有广泛的运用。<br>（哈希函数是一组函数或算法，以后会发文章专门介绍哈希）</p><h2 id="区块链记账方法"><a href="#区块链记账方法" class="headerlink" title="区块链记账方法"></a>区块链记账方法</h2><p>假设有一个账页序号为0的账页交易记录如下:</p><p><img src="/images/blockchain-5.png" alt="blockchain-5"></p><p>记账时间为：2017-10-22 10:22:02</p><p>区块链在记账是会把账页信息（包含序号、记账时间、交易记录）作为原始信息进行Hash, 得到一个Hash值，如：787635ACD, 用函数表示为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hash(序号0、记账时间、交易记录) = 787635ACD</span><br></pre></td></tr></table></figure><p>账页信息和Hash值组合在一起就构成了第一个区块。</p><blockquote><p>比特币系统里约10分钟记一次账，即每个区块生成时间大概间隔10分钟</p></blockquote><p>在记第2个账页的时候，会把上一个块的Hash值和当前的账页信息一起作为原始信息进行Hash,即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hash(上一个Hash值、序号1、记账时间、交易记录) = 456635BCD</span><br></pre></td></tr></table></figure><p>这样第2个区块不仅包含了本账页信息，还间接的包含了第一个区块的信息。依次按照此方法继续记账，则最新的区块总是间接包含了所有之前的账页信息。</p><p>所有这些区块组合起来就形成了区块链，这样的区块链就构成了一个便于验证（只要验证最后一个区块的Hash值就相当于验证了整个账本），不可更改（任何一个交易信息的更改，会让所有之后的区块的Hash值发生变化，这样在验证时就无法通过）的总账本。</p><p>记账有成本，想了解节点为什么要记账，请看这篇：<a href="https://polaris0112.github.io/2018/03/03/blockchain-pow/" target="_blank" rel="noopener">在比特币如何挖矿-工作量证明</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是区块链记账原理&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;区块链(1.0)是一个基于密码学安全的分布式账本，是一个方便验证，不可篡改的账本。&lt;br&gt;通常认
      
    
    </summary>
    
      <category term="区块链记账原理" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AE%B0%E8%B4%A6%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Blockchain" scheme="http://yoursite.com/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>用Python从0开始创建一个区块链</title>
    <link href="http://yoursite.com/2018/03/02/blockchain-python/"/>
    <id>http://yoursite.com/2018/03/02/blockchain-python/</id>
    <published>2018-03-01T16:00:00.000Z</published>
    <updated>2018-03-07T08:29:11.421Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是用Python建立一个区块链，初步了解区块链使用到的技术。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>本文要求读者对 Python 有基本的理解，能读写基本的 Python，并且需要对 HTTP 请求有基本的了解。</p><p>我们知道区块链是由区块的记录构成的不可变、有序的链结构，记录可以是交易、文件或任何你想要的数据，重要的是它们是通过哈希值（hashes）链接起来的。</p><p>如果你还不是很了解哈希，可以查看<a href="https://learncryptography.com/hash-functions/what-are-hash-functions" target="_blank" rel="noopener">这篇文章</a>。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>确保已经安装 Python3.6+、pip、Flask、requests。</p><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install Flask==0.12.2 requests==2.18.4</span><br></pre></td></tr></table></figure><p>同时还需要一个 HTTP 客户端，比如 Postman、cURL 或其他客户端。</p><p>参考<a href="https://github.com/dvf/blockchain" target="_blank" rel="noopener">源代码</a>。</p><h2 id="开始创建-Blockchain"><a href="#开始创建-Blockchain" class="headerlink" title="开始创建 Blockchain"></a>开始创建 Blockchain</h2><p>新建一个文件 blockchain.py，本文所有的代码都写在这一个文件中，可以随时参考<a href="https://github.com/dvf/blockchain" target="_blank" rel="noopener">源代码</a>。</p><h3 id="Blockchain-类"><a href="#Blockchain-类" class="headerlink" title="Blockchain 类"></a>Blockchain 类</h3><p>首先创建一个 Blockchain 类，在构造函数中创建了两个列表，一个用于储存区块链，一个用于储存交易。</p><p><strong>以下是 Blockchain 类的框架：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.chain = []</span><br><span class="line">        self.current_transactions = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_block</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Creates a new Block and adds it to the chain</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_transaction</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Adds a new transaction to the list of transactions</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(block)</span>:</span></span><br><span class="line">        <span class="comment"># Hashes a Block</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">last_block</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Returns the last Block in the chain</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Blockchain 类用来管理链条，它能存储交易、加入新块等，下面我们来进一步完善这些方法。</p><h3 id="块结构"><a href="#块结构" class="headerlink" title="块结构"></a>块结构</h3><p>每个区块包含属性：索引（index）、Unix 时间戳（timestamp）、交易列表（transactions）、工作量证明（稍后解释）以及前一个区块的 Hash 值。</p><p><strong>以下是一个区块的结构：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">block = &#123;</span><br><span class="line">    <span class="string">'index'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'timestamp'</span>: <span class="number">1506057125.900785</span>,</span><br><span class="line">    <span class="string">'transactions'</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'sender'</span>: <span class="string">"8527147fe1f5426f9dd545de4b27ee00"</span>,</span><br><span class="line">            <span class="string">'recipient'</span>: <span class="string">"a77f5cdfa2934df3954a5c7c7da5df1f"</span>,</span><br><span class="line">            <span class="string">'amount'</span>: <span class="number">5</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'proof'</span>: <span class="number">324984774000</span>,</span><br><span class="line">    <span class="string">'previous_hash'</span>: <span class="string">"2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里区块链的概念就清楚了，每个新的区块都包含上一个区块的 Hash，这是关键的一点，它保障了区块链的不可变性。</p><p>如果攻击者破坏了前面的某个区块，那么后面所有区块的Hash都会变得不正确。不理解的话，慢慢消化，可参考<a href="https://polaris0112.github.io/2018/03/02/blockchain-accounting/" target="_blank" rel="noopener">区块链记账原理</a>。</p><h3 id="加入交易"><a href="#加入交易" class="headerlink" title="加入交易"></a>加入交易</h3><p><strong>接下来我们需要添加一个交易，来完善下 new_transaction 方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_transaction</span><span class="params">(self, sender, recipient, amount)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成新交易信息，信息将加入到下一个待挖的区块中</span></span><br><span class="line"><span class="string">        :param sender: &lt;str&gt; Address of the Sender</span></span><br><span class="line"><span class="string">        :param recipient: &lt;str&gt; Address of the Recipient</span></span><br><span class="line"><span class="string">        :param amount: &lt;int&gt; Amount</span></span><br><span class="line"><span class="string">        :return: &lt;int&gt; The index of the Block that will hold this transaction</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.current_transactions.append(&#123;</span><br><span class="line">            <span class="string">'sender'</span>: sender,</span><br><span class="line">            <span class="string">'recipient'</span>: recipient,</span><br><span class="line">            <span class="string">'amount'</span>: amount,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> self.last_block[<span class="string">'index'</span>] + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>方法向列表中添加一个交易记录，并返回该记录将被添加到的区块(下一个待挖掘的区块)的索引，等下在用户提交交易时会有用。</p><h3 id="创建新块"><a href="#创建新块" class="headerlink" title="创建新块"></a>创建新块</h3><p>当 Blockchain 实例化后，我们需要构造一个创世块（没有前区块的第一个区块），并且给它加上一个工作量证明。每个区块都需要经过工作量证明，俗称挖矿，稍后会继续讲解。</p><p><strong>为了构造创世块，我们还需要完善 new_block()，new_transaction() 和hash() 方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.current_transactions = []</span><br><span class="line">        self.chain = []</span><br><span class="line">        <span class="comment"># Create the genesis block</span></span><br><span class="line">        self.new_block(previous_hash=<span class="number">1</span>, proof=<span class="number">100</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_block</span><span class="params">(self, proof, previous_hash=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成新块</span></span><br><span class="line"><span class="string">        :param proof: &lt;int&gt; The proof given by the Proof of Work algorithm</span></span><br><span class="line"><span class="string">        :param previous_hash: (Optional) &lt;str&gt; Hash of previous Block</span></span><br><span class="line"><span class="string">        :return: &lt;dict&gt; New Block</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        block = &#123;</span><br><span class="line">            <span class="string">'index'</span>: len(self.chain) + <span class="number">1</span>,</span><br><span class="line">            <span class="string">'timestamp'</span>: time(),</span><br><span class="line">            <span class="string">'transactions'</span>: self.current_transactions,</span><br><span class="line">            <span class="string">'proof'</span>: proof,</span><br><span class="line">            <span class="string">'previous_hash'</span>: previous_hash <span class="keyword">or</span> self.hash(self.chain[<span class="number">-1</span>]),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># Reset the current list of transactions</span></span><br><span class="line">        self.current_transactions = []</span><br><span class="line">        self.chain.append(block)</span><br><span class="line">        <span class="keyword">return</span> block</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_transaction</span><span class="params">(self, sender, recipient, amount)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成新交易信息，信息将加入到下一个待挖的区块中</span></span><br><span class="line"><span class="string">        :param sender: &lt;str&gt; Address of the Sender</span></span><br><span class="line"><span class="string">        :param recipient: &lt;str&gt; Address of the Recipient</span></span><br><span class="line"><span class="string">        :param amount: &lt;int&gt; Amount</span></span><br><span class="line"><span class="string">        :return: &lt;int&gt; The index of the Block that will hold this transaction</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.current_transactions.append(&#123;</span><br><span class="line">            <span class="string">'sender'</span>: sender,</span><br><span class="line">            <span class="string">'recipient'</span>: recipient,</span><br><span class="line">            <span class="string">'amount'</span>: amount,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> self.last_block[<span class="string">'index'</span>] + <span class="number">1</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">last_block</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.chain[<span class="number">-1</span>]</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(block)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成块的 SHA-256 hash值</span></span><br><span class="line"><span class="string">        :param block: &lt;dict&gt; Block</span></span><br><span class="line"><span class="string">        :return: &lt;str&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># We must make sure that the Dictionary is Ordered, or we will have inconsistent hashes</span></span><br><span class="line">        block_string = json.dumps(block, sort_keys=<span class="keyword">True</span>).encode()</span><br><span class="line">        <span class="keyword">return</span> hashlib.sha256(block_string).hexdigest()</span><br></pre></td></tr></table></figure><p>通过上面的代码和注释可以对区块链有直观的了解，接下来我们看看区块是怎么挖出来的。</p><h3 id="理解工作量证明"><a href="#理解工作量证明" class="headerlink" title="理解工作量证明"></a>理解工作量证明</h3><p>新的区块依赖工作量证明算法（PoW）来构造。PoW 的目标是找出一个符合特定条件的数字，这个数字很难计算出来，但容易验证。这就是工作量证明的核心思想。</p><p><strong>为了方便理解，举个例子：</strong></p><p>假设一个整数 x 乘以另一个整数 y 的积的 Hash 值必须以 0 结尾，即 hash(x * y) = ac23dc…0。设变量 x = 5，求 y 的值？</p><p><strong>用 Python 实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="number">0</span>  <span class="comment"># y未知</span></span><br><span class="line"><span class="keyword">while</span> sha256(<span class="string">f'<span class="subst">&#123;x*y&#125;</span>'</span>.encode()).hexdigest()[<span class="number">-1</span>] != <span class="string">"0"</span>:</span><br><span class="line">    y += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'The solution is y = <span class="subst">&#123;y&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>结果是：y = 21，因为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash(<span class="number">5</span> * <span class="number">21</span>) = <span class="number">1253e9373</span>e..<span class="number">.5e3600155</span>e860</span><br></pre></td></tr></table></figure><p>在比特币中，使用称为 Hashcash 的工作量证明算法，它和上面的问题很类似，矿工们为了争夺创建区块的权利而争相计算结果。</p><p>通常，计算难度与目标字符串需要满足的特定字符的数量成正比，矿工算出结果后，会获得比特币奖励。当然，在网络上非常容易验证这个结果。</p><h3 id="实现工作量证明"><a href="#实现工作量证明" class="headerlink" title="实现工作量证明"></a>实现工作量证明</h3><p>让我们来实现一个相似 PoW 算法，规则是：寻找一个数 p，使得它与前一个区块的 proof 拼接成的字符串的 Hash 值以 4 个零开头。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span><span class="params">(self, last_proof)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        简单的工作量证明:</span></span><br><span class="line"><span class="string">         - 查找一个 p' 使得 hash(pp') 以4个0开头</span></span><br><span class="line"><span class="string">         - p 是上一个块的证明,  p' 是当前的证明</span></span><br><span class="line"><span class="string">        :param last_proof: &lt;int&gt;</span></span><br><span class="line"><span class="string">        :return: &lt;int&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        proof = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.valid_proof(last_proof, proof) <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">            proof += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> proof</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">valid_proof</span><span class="params">(last_proof, proof)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        验证证明: 是否hash(last_proof, proof)以4个0开头?</span></span><br><span class="line"><span class="string">        :param last_proof: &lt;int&gt; Previous Proof</span></span><br><span class="line"><span class="string">        :param proof: &lt;int&gt; Current Proof</span></span><br><span class="line"><span class="string">        :return: &lt;bool&gt; True if correct, False if not.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        guess = <span class="string">f'<span class="subst">&#123;last_proof&#125;</span><span class="subst">&#123;proof&#125;</span>'</span>.encode()</span><br><span class="line">        guess_hash = hashlib.sha256(guess).hexdigest()</span><br><span class="line">        <span class="keyword">return</span> guess_hash[:<span class="number">4</span>] == <span class="string">"0000"</span></span><br></pre></td></tr></table></figure><p>衡量算法复杂度的办法是修改零开头的个数。使用 4 个零来用于演示，你会发现多一个零都会大大增加计算出结果所需的时间。</p><p>现在 Blockchain 类基本已经完成了，接下来使用 HTTP requests 来进行交互。</p><h2 id="Blockchain-作为-API-接口"><a href="#Blockchain-作为-API-接口" class="headerlink" title="Blockchain 作为 API 接口"></a>Blockchain 作为 API 接口</h2><p>我们将使用 Python Flask 框架，这是一个轻量 Web 应用框架，它方便将网络请求映射到 Python 函数，现在我们来让 Blockchain 运行在 Flask Web 上。</p><p><strong>我们将创建三个接口：</strong></p><ul><li><p>/transactions/new 创建一个交易并添加到区块</p></li><li><p>/mine 告诉服务器去挖掘新的区块</p></li><li><p>/chain 返回整个区块链</p></li></ul><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>我们的“Flask 服务器”将扮演区块链网络中的一个节点，<strong>我们先添加一些框架代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> dedent</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># Instantiate our Node</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># Generate a globally unique address for this node</span></span><br><span class="line">node_identifier = str(uuid4()).replace(<span class="string">'-'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># Instantiate the Blockchain</span></span><br><span class="line">blockchain = Blockchain()</span><br><span class="line"><span class="meta">@app.route('/mine', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mine</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"We'll mine a new Block"</span></span><br><span class="line"><span class="meta">@app.route('/transactions/new', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_transaction</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"We'll add a new transaction"</span></span><br><span class="line"><span class="meta">@app.route('/chain', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_chain</span><span class="params">()</span>:</span></span><br><span class="line">    response = &#123;</span><br><span class="line">        <span class="string">'chain'</span>: blockchain.chain,</span><br><span class="line">        <span class="string">'length'</span>: len(blockchain.chain),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(response), <span class="number">200</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p><strong>简单的说明一下以上代码：</strong></p><ul><li>第 15 行：创建一个节点。</li><li>第 18 行：为节点创建一个随机的名字。</li><li>第 21 行：实例 Blockchain 类。</li><li>第 24–26 行：创建 /mine GET 接口。</li><li>第 28–30 行：创建 /transactions/new POST 接口,可以给接口发送交易数据。</li><li>第 32–38 行：创建 /chain 接口, 返回整个区块链。</li><li>第 40–41 行：服务运行在端口 5000 上。</li></ul><h3 id="发送交易"><a href="#发送交易" class="headerlink" title="发送交易"></a>发送交易</h3><p><strong>发送到节点的交易数据结构如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"sender"</span>: <span class="string">"my address"</span>,</span><br><span class="line"> <span class="string">"recipient"</span>: <span class="string">"someone else's address"</span>,</span><br><span class="line"> <span class="string">"amount"</span>: 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>之前已经有添加交易的方法，基于接口来添加交易就很简单了：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> dedent</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route('/transactions/new', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_transaction</span><span class="params">()</span>:</span></span><br><span class="line">    values = request.get_json()</span><br><span class="line">    <span class="comment"># Check that the required fields are in the POST'ed data</span></span><br><span class="line">    required = [<span class="string">'sender'</span>, <span class="string">'recipient'</span>, <span class="string">'amount'</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all(k <span class="keyword">in</span> values <span class="keyword">for</span> k <span class="keyword">in</span> required):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Missing values'</span>, <span class="number">400</span></span><br><span class="line">    <span class="comment"># Create a new Transaction</span></span><br><span class="line">    index = blockchain.new_transaction(values[<span class="string">'sender'</span>], values[<span class="string">'recipient'</span>], values[<span class="string">'amount'</span>])</span><br><span class="line">    response = &#123;<span class="string">'message'</span>: <span class="string">f'Transaction will be added to Block <span class="subst">&#123;index&#125;</span>'</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(response), <span class="number">201</span></span><br></pre></td></tr></table></figure><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><p><strong>挖矿正是神奇所在，它很简单，做了以下三件事：</strong></p><ul><li>计算工作量证明 PoW。</li><li>通过新增一个交易授予矿工（自己）一个币。</li><li>构造新区块并将其添加到链中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> dedent</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route('/mine', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mine</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># We run the proof of work algorithm to get the next proof...</span></span><br><span class="line">    last_block = blockchain.last_block</span><br><span class="line">    last_proof = last_block[<span class="string">'proof'</span>]</span><br><span class="line">    proof = blockchain.proof_of_work(last_proof)</span><br><span class="line">    <span class="comment"># 给工作量证明的节点提供奖励.</span></span><br><span class="line">    <span class="comment"># 发送者为 "0" 表明是新挖出的币</span></span><br><span class="line">    blockchain.new_transaction(</span><br><span class="line">        sender=<span class="string">"0"</span>,</span><br><span class="line">        recipient=node_identifier,</span><br><span class="line">        amount=<span class="number">1</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Forge the new Block by adding it to the chain</span></span><br><span class="line">    block = blockchain.new_block(proof)</span><br><span class="line">    response = &#123;</span><br><span class="line">        <span class="string">'message'</span>: <span class="string">"New Block Forged"</span>,</span><br><span class="line">        <span class="string">'index'</span>: block[<span class="string">'index'</span>],</span><br><span class="line">        <span class="string">'transactions'</span>: block[<span class="string">'transactions'</span>],</span><br><span class="line">        <span class="string">'proof'</span>: block[<span class="string">'proof'</span>],</span><br><span class="line">        <span class="string">'previous_hash'</span>: block[<span class="string">'previous_hash'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(response), <span class="number">200</span></span><br></pre></td></tr></table></figure><p>注意交易的接收者是我们自己的服务器节点，我们做的大部分工作都只是围绕 Blockchain 类方法进行交互。到此，我们的区块链就算完成了，我们来实际运行下。</p><h3 id="运行区块链"><a href="#运行区块链" class="headerlink" title="运行区块链"></a>运行区块链</h3><p>你可以使用 cURL 或 Postman 去和 API 进行交互。</p><p><strong>启动 server：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python blockchain.py</span><br><span class="line">* Runing on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p><strong>让我们通过请求 <a href="http://localhost:5000/mine" target="_blank" rel="noopener">http://localhost:5000/mine</a> 来进行挖矿：</strong><br><img src="/images/blockchain-1.jpg" alt="blockchain-1"></p><p><strong>通过 post 请求，添加一个新交易：</strong><br><img src="/images/blockchain-2.jpg" alt="blockchain-2"></p><p><strong>如果不是使用 Postman，则用以下的 cURL 语句也是一样的：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST -H <span class="string">"Content-Type: application/json"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string"> "sender": "d4ee26eee15148ee92c6cd394edd974e",</span></span><br><span class="line"><span class="string"> "recipient": "someone-other-address",</span></span><br><span class="line"><span class="string"> "amount": 5</span></span><br><span class="line"><span class="string">&#125;'</span> <span class="string">"http://localhost:5000/transactions/new"</span></span><br></pre></td></tr></table></figure></p><p>在挖了两次矿之后，就有 3 个块了，通过请求 <a href="http://localhost:5000/chain" target="_blank" rel="noopener">http://localhost:5000/chain</a> 可以得到所有的块信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"chain"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span>: 1,</span><br><span class="line">      <span class="string">"previous_hash"</span>: 1,</span><br><span class="line">      <span class="string">"proof"</span>: 100,</span><br><span class="line">      <span class="string">"timestamp"</span>: 1506280650.770839,</span><br><span class="line">      <span class="string">"transactions"</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span>: 2,</span><br><span class="line">      <span class="string">"previous_hash"</span>: <span class="string">"c099bc...bfb7"</span>,</span><br><span class="line">      <span class="string">"proof"</span>: 35293,</span><br><span class="line">      <span class="string">"timestamp"</span>: 1506280664.717925,</span><br><span class="line">      <span class="string">"transactions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"amount"</span>: 1,</span><br><span class="line">          <span class="string">"recipient"</span>: <span class="string">"8bbcb347e0634905b0cac7955bae152b"</span>,</span><br><span class="line">          <span class="string">"sender"</span>: <span class="string">"0"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"index"</span>: 3,</span><br><span class="line">      <span class="string">"previous_hash"</span>: <span class="string">"eff91a...10f2"</span>,</span><br><span class="line">      <span class="string">"proof"</span>: 35089,</span><br><span class="line">      <span class="string">"timestamp"</span>: 1506280666.1086972,</span><br><span class="line">      <span class="string">"transactions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"amount"</span>: 1,</span><br><span class="line">          <span class="string">"recipient"</span>: <span class="string">"8bbcb347e0634905b0cac7955bae152b"</span>,</span><br><span class="line">          <span class="string">"sender"</span>: <span class="string">"0"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"length"</span>: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一致性（共识）"><a href="#一致性（共识）" class="headerlink" title="一致性（共识）"></a>一致性（共识）</h2><p>我们已经有了一个基本的区块链可以接受交易和挖矿，但是区块链系统应该是分布式的。</p><p>既然是分布式的，那么我们究竟拿什么保证所有节点有同样的链呢？这就是一致性问题，我们要想在网络上有多个节点，就必须实现一个一致性的算法。</p><h3 id="注册节点"><a href="#注册节点" class="headerlink" title="注册节点"></a>注册节点</h3><p>在实现一致性算法之前，我们需要找到一种方式让一个节点知道它相邻的节点。</p><p><strong>每个节点都需要保存一份包含网络中其他节点的记录，因此让我们新增几个接口：</strong></p><ul><li>/nodes/register 接收 URL 形式的新节点列表。</li><li>/nodes/resolve 执行一致性算法，解决任何冲突，确保节点拥有正确的链。</li></ul><p><strong>我们修改下 Blockchain 的 init 函数并提供一个注册节点方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.nodes = set()</span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_node</span><span class="params">(self, address)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Add a new node to the list of nodes</span></span><br><span class="line"><span class="string">        :param address: &lt;str&gt; Address of node. Eg. 'http://192.168.0.5:5000'</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parsed_url = urlparse(address)</span><br><span class="line">        self.nodes.add(parsed_url.netloc)</span><br></pre></td></tr></table></figure><p>我们用 set 来储存节点，这是一种避免重复添加节点的简单方法。</p><h3 id="实现共识算法"><a href="#实现共识算法" class="headerlink" title="实现共识算法"></a>实现共识算法</h3><p>前面提到，冲突是指不同的节点拥有不同的链，为了解决这个问题，规定最长的、有效的链才是最终的链，换句话说，网络中有效最长链才是实际的链。</p><p><strong>我们使用以下的算法，来达到网络中的共识：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class">    ...</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">valid_chain</span><span class="params">(self, chain)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Determine if a given blockchain is valid</span></span><br><span class="line"><span class="string">        :param chain: &lt;list&gt; A blockchain</span></span><br><span class="line"><span class="string">        :return: &lt;bool&gt; True if valid, False if not</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        last_block = chain[<span class="number">0</span>]</span><br><span class="line">        current_index = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> current_index &lt; len(chain):</span><br><span class="line">            block = chain[current_index]</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;last_block&#125;</span>'</span>)</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;block&#125;</span>'</span>)</span><br><span class="line">            print(<span class="string">"\n-----------\n"</span>)</span><br><span class="line">            <span class="comment"># Check that the hash of the block is correct</span></span><br><span class="line">            <span class="keyword">if</span> block[<span class="string">'previous_hash'</span>] != self.hash(last_block):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># Check that the Proof of Work is correct</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.valid_proof(last_block[<span class="string">'proof'</span>], block[<span class="string">'proof'</span>]):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            last_block = block</span><br><span class="line">            current_index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resolve_conflicts</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        共识算法解决冲突</span></span><br><span class="line"><span class="string">        使用网络中最长的链.</span></span><br><span class="line"><span class="string">        :return: &lt;bool&gt; True 如果链被取代, 否则为False</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        neighbours = self.nodes</span><br><span class="line">        new_chain = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># We're only looking for chains longer than ours</span></span><br><span class="line">        max_length = len(self.chain)</span><br><span class="line">        <span class="comment"># Grab and verify the chains from all the nodes in our network</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> neighbours:</span><br><span class="line">            response = requests.get(<span class="string">f'http://<span class="subst">&#123;node&#125;</span>/chain'</span>)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                length = response.json()[<span class="string">'length'</span>]</span><br><span class="line">                chain = response.json()[<span class="string">'chain'</span>]</span><br><span class="line">                <span class="comment"># Check if the length is longer and the chain is valid</span></span><br><span class="line">                <span class="keyword">if</span> length &gt; max_length <span class="keyword">and</span> self.valid_chain(chain):</span><br><span class="line">                    max_length = length</span><br><span class="line">                    new_chain = chain</span><br><span class="line">        <span class="comment"># Replace our chain if we discovered a new, valid chain longer than ours</span></span><br><span class="line">        <span class="keyword">if</span> new_chain:</span><br><span class="line">            self.chain = new_chain</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>第一个方法 valid_chain() 用来检查是否是有效链，遍历每个块验证 hash 和 proof。</p><p>第二个方法 resolve_conflicts() 用来解决冲突，遍历所有的邻居节点，并用上一个方法检查链的有效性， 如果发现有效更长链，就替换掉自己的链。</p><p>让我们添加两个路由，一个用来注册节点，一个用来解决冲突。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/nodes/register', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_nodes</span><span class="params">()</span>:</span></span><br><span class="line">    values = request.get_json()</span><br><span class="line">    nodes = values.get(<span class="string">'nodes'</span>)</span><br><span class="line">    <span class="keyword">if</span> nodes <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Error: Please supply a valid list of nodes"</span>, <span class="number">400</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">        blockchain.register_node(node)</span><br><span class="line">    response = &#123;</span><br><span class="line">        <span class="string">'message'</span>: <span class="string">'New nodes have been added'</span>,</span><br><span class="line">        <span class="string">'total_nodes'</span>: list(blockchain.nodes),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(response), <span class="number">201</span></span><br><span class="line"><span class="meta">@app.route('/nodes/resolve', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consensus</span><span class="params">()</span>:</span></span><br><span class="line">    replaced = blockchain.resolve_conflicts()</span><br><span class="line">    <span class="keyword">if</span> replaced:</span><br><span class="line">        response = &#123;</span><br><span class="line">            <span class="string">'message'</span>: <span class="string">'Our chain was replaced'</span>,</span><br><span class="line">            <span class="string">'new_chain'</span>: blockchain.chain</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = &#123;</span><br><span class="line">            <span class="string">'message'</span>: <span class="string">'Our chain is authoritative'</span>,</span><br><span class="line">            <span class="string">'chain'</span>: blockchain.chain</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(response), <span class="number">200</span></span><br></pre></td></tr></table></figure><p>你可以在不同的机器运行节点，或在一台机机开启不同的网络端口来模拟多节点的网络。</p><p><strong>这里在同一台机器开启不同的端口演示，在不同的终端运行以下命令，就启动了两个节点：</strong></p><ul><li><a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> </li><li><a href="http://localhost:5001" target="_blank" rel="noopener">http://localhost:5001</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv run python blockchain.py</span><br><span class="line">$ pipenv run python blockchain.py -p 5001</span><br></pre></td></tr></table></figure><p><img src="/images/blockchain-3.jpg" alt="blockchain-3"></p><p>然后在节点 2 上挖两个块，确保是更长的链，然后在节点 1 上访问接口 /nodes/resolve，这时节点 1 的链会通过共识算法被节点 2 的链取代。</p><p><img src="/images/blockchain-4.jpg" alt="blockchain-4"></p><p>好啦，你可以邀请朋友们一起来测试你的区块链。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是用Python建立一个区块链，初步了解区块链使用到的技术。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;本文要求读者对 Python 有基本
      
    
    </summary>
    
      <category term="用Python从0开始创建一个区块链" scheme="http://yoursite.com/categories/%E7%94%A8Python%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Blockchain" scheme="http://yoursite.com/tags/Blockchain/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab踩坑升级过程</title>
    <link href="http://yoursite.com/2018/03/01/gitlab-update/"/>
    <id>http://yoursite.com/2018/03/01/gitlab-update/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2018-03-06T02:54:24.822Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是Gitlab跨大版本更新，数据迁移备份过程记录</p><h2 id="背景简述"><a href="#背景简述" class="headerlink" title="背景简述"></a>背景简述</h2><p>由于各个项目迭代次数较多，Gitlab的服务器硬件相对较低，而且也出现过遇到当前Gitlab版本Bug的情况，所以最近就打算一次性把Gitlab迁移到配置较好的企业服务器并升级到最新版本。</p><p>目前原来版本是gitlab-ce-8.8.0.ce.0，现在最新的版本是gitlab-ce-10.5.2.ce.0，这次过程就是从8.8.0升级到10.5.2。</p><h2 id="Gitlab部署"><a href="#Gitlab部署" class="headerlink" title="Gitlab部署"></a>Gitlab部署</h2><ul><li>系统以CentOS7为例</li></ul><p>下载RPM包地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" target="_blank" rel="noopener">Gitlab-CE清华大学镜像站</a></p><h2 id="先安装依赖"><a href="#先安装依赖" class="headerlink" title="先安装依赖"></a>先安装依赖</h2><p>参考<a href="https://about.gitlab.com/downloads/#centos7" target="_blank" rel="noopener">官方说明</a>中的Install and configure the necessary dependencies一节。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl policycoreutils openssh-server openssh-clients</span><br><span class="line">$ systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">$ systemctl start sshd</span><br><span class="line">$ yum install postfix</span><br><span class="line">$ systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">$ systemctl start postfix</span><br><span class="line">$ firewall-cmd --permanent --add-service=http</span><br><span class="line">$ systemctl reload firewalld</span><br></pre></td></tr></table></figure><h2 id="下载与原来版本一致的RPM包"><a href="#下载与原来版本一致的RPM包" class="headerlink" title="下载与原来版本一致的RPM包"></a>下载与原来版本一致的RPM包</h2><p>这里我先记录如何进行数据迁移，<strong>数据迁移必须使用版本一致的gitlab</strong>，跨版本的数据恢复可能会报错。</p><h3 id="先下载gitlab-ce-8-8-0-ce-0"><a href="#先下载gitlab-ce-8-8-0-ce-0" class="headerlink" title="先下载gitlab-ce-8.8.0.ce.0"></a>先下载gitlab-ce-8.8.0.ce.0</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 下载</span></span><br><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-8.8.0-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装</span></span><br><span class="line">$ rpm -i gitlab-ce-8.8.0-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="修改配置文件-etc-gitlab-gitlab-rb"><a href="#修改配置文件-etc-gitlab-gitlab-rb" class="headerlink" title="修改配置文件(/etc/gitlab/gitlab.rb)"></a>修改配置文件(/etc/gitlab/gitlab.rb)</h2><p>修改配置项：</p><ul><li><p>域名：external_url ‘<a href="http://gitlab.rd.exmaple.com" target="_blank" rel="noopener">http://gitlab.rd.exmaple.com</a>‘</p></li><li><p>时区：gitlab_rails[‘time_zone’] = ‘Asia/Shanghai’</p></li><li><p>通知发送的邮箱: gitlab_rails[‘gitlab_email_from’] = ‘gitlab-notifications@example.com’</p></li><li><p>修改SMTP服务器配置：gitlab_rails[‘smtp*’]</p></li><li><p>仓库路径：git_data_dir “/home/gitlab/git-data”</p><ul><li>注意，不支持符号链接</li></ul></li></ul><p>参见：<a href="https://github.com/Polaris0112/Ops-Tools/blob/master/gitlab/gitlab.rb" target="_blank" rel="noopener">配置文件</a></p><p><strong>另外留意配置文件的权限问题</strong></p><p>正确的是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的是</span></span><br><span class="line"><span class="comment"># -rw-------. 1 root root 20227 Feb 28 16:59 gitlab.rb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改权限命令</span></span><br><span class="line">$ chmod 600 /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><h2 id="编译部署"><a href="#编译部署" class="headerlink" title="编译部署"></a>编译部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">$ gitlab-ctl restart</span><br></pre></td></tr></table></figure><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="配置文件中相关的选项"><a href="#配置文件中相关的选项" class="headerlink" title="配置文件中相关的选项"></a>配置文件中相关的选项</h3><ul><li><p>备份目录：<code>gitlab_rails[&#39;backup_path&#39;] = &quot;/home/gitlab/backups&quot;</code></p></li><li><p>备份文件保存时长: <code>gitlab_rails[&#39;backup_keep_time&#39;] = 604800</code></p></li></ul><h3 id="手动命令操作备份"><a href="#手动命令操作备份" class="headerlink" title="手动命令操作备份"></a>手动命令操作备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p><strong>大致来说：</strong></p><ul><li><p>需保证gitlab版本和备份时一致</p></li><li><p>需要启动服务，但停掉前台和队列，以防止用户操作干扰</p></li><li><p>从备份机或者原本服务器上提取备份压缩包，传输至新服务器</p></li><li><p>把备份文件放到/var/opt/gitlab/backups/路径下</p></li><li><p>跑恢复脚本gitlab-rake gitlab:backup:restore，指定时间戳参数BACKUP</p></li><li><p>把服务都启动</p></li><li><p>检查确认</p></li></ul><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>详细说明可参考官方文档中的<a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/raketasks/backup_restore.md#restore-a-previously-created-backup" target="_blank" rel="noopener">Backup restore - Restore a previously created backup</a>一节。下面是原文，源代码部署部分省略掉了：</p><p>停前台服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab-ctl stop unicorn</span><br><span class="line">$ gitlab-ctl stop sidekiq</span><br><span class="line">$ gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><p>恢复对应时间戳备份的数据(<strong>注意：以下命令的压缩文件、服务器IP、时间戳均需要替换指定的环境中具体的值</strong>)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从旧服务器找到备份文件并scp到新服务器</span></span><br><span class="line">$ scp 1519857115_gitlab_backup.tar 192.168.0.85:./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到新服务器把压缩文件移动到指定路径下并修改所属用户</span></span><br><span class="line">$ mv 1519857115_gitlab_backup.tar /var/opt/gitlab/backups/</span><br><span class="line">$ chown -R git:git /var/opt/gitlab/backups</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复备份</span></span><br><span class="line">$ gitlab-rake gitlab:backup:restore BACKUP=1519857115</span><br><span class="line"></span><br><span class="line"><span class="comment">## 恢复过程中需要交互两次，均输入yes继续即可。</span></span><br></pre></td></tr></table></figure><p>启动服务、检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab-ctl restart</span><br><span class="line">$ gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="远程备份"><a href="#远程备份" class="headerlink" title="远程备份"></a>远程备份</h2><p>远程备份</p><ul><li><p>开源的auto-gitlab-backup项目可以完成一般备份和/etc/gitlab/*备份，以及同步到远端的工作。</p></li><li><p>用crontab触发每日定时执行备份</p></li><li><p>参见: <a href="https://github.com/Polaris0112/Ops-Tools/blob/master/gitlab/auto-gitlab-backup.conf" target="_blank" rel="noopener">配置文件</a></p></li></ul><h2 id="更新Gitlab"><a href="#更新Gitlab" class="headerlink" title="更新Gitlab"></a>更新Gitlab</h2><h3 id="先关闭前端服务，防止用户人为操作"><a href="#先关闭前端服务，防止用户人为操作" class="headerlink" title="先关闭前端服务，防止用户人为操作"></a>先关闭前端服务，防止用户人为操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab-ctl stop unicorn</span><br><span class="line">$ gitlab-ctl stop sidekiq</span><br><span class="line">$ gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><p>执行完毕后，原本gitlab网页应该就不能访问，用户也不能拉取或者提交代码。</p><h3 id="下载新版Gitlab并更新"><a href="#下载新版Gitlab并更新" class="headerlink" title="下载新版Gitlab并更新"></a>下载新版Gitlab并更新</h3><p>这里要注意的是，跨版本更新不能跨两个大版本，即8.8.0不能直接升级到10.5.2，升级后会因为PostgreSQL数据库会启动失败导致页面出现502，部分服务不能启动。</p><p>所以我们要一级一级升，目前确认的是可以先从8.8.0升级到9.5.9然后再升级到10.5.2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果怕担心升级失败的话，可以先升级一个小版本进行测试</span></span><br><span class="line"><span class="comment"># $ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-8.8.1-ce.0.el7.x86_64.rpm</span></span><br><span class="line"><span class="comment"># $ rpm -Uvh gitlab-ce-8.8.1-ce.0.el7.x86_64.rpm</span></span><br><span class="line"><span class="comment"># 等待一段时间</span></span><br><span class="line"><span class="comment"># 执行完成后，重新配置gitlab</span></span><br><span class="line"><span class="comment"># $ gitlab-ctl reconfigure</span></span><br><span class="line"><span class="comment"># 完成后重启gitlab</span></span><br><span class="line"><span class="comment"># $ gitlab-ctl restart</span></span><br><span class="line"><span class="comment"># 启动完需要等服务启动一分钟左右后，才登陆网页查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 直接升级到9.5.9</span></span><br><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-9.5.9-ce.0.el7.x86_64.rpm</span><br><span class="line">$ rpm- Uvh gitlab-ce-9.5.9-ce.0.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># 等待一段时间</span></span><br><span class="line"><span class="comment"># 执行完成后，重新配置gitlab</span></span><br><span class="line">$ gitlab-ctl reconfigure</span><br><span class="line"><span class="comment"># 完成后重启gitlab</span></span><br><span class="line">$ gitlab-ctl restart</span><br><span class="line"><span class="comment">## 然后查看页面有没有更新成功</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 若成功，则重复第一步</span></span><br><span class="line">$ gitlab-ctl stop unicorn</span><br><span class="line">$ gitlab-ctl stop sidekiq</span><br><span class="line">$ gitlab-ctl stop nginx</span><br><span class="line"></span><br><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.5.2-ce.0.el7.x86_64.rpm</span><br><span class="line">$ rpm -Uvh gitlab-ce-10.5.2-ce.0.el7.x86_64.rpm</span><br><span class="line">$ gitlab-ctl reconfigure</span><br><span class="line">$ gitlab-ctl restart</span><br></pre></td></tr></table></figure></p><p>所有执行完成后，等待服务启动一分钟以后就可以开启网页查看gitlab是否更新成功。</p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="编译GitLab出现ruby-block-supervise-redis-sleep-action-run并卡住"><a href="#编译GitLab出现ruby-block-supervise-redis-sleep-action-run并卡住" class="headerlink" title="编译GitLab出现ruby_block[supervise_redis_sleep] action run并卡住"></a>编译GitLab出现ruby_block[supervise_redis_sleep] action run并卡住</h3><p>解决方案：</p><ul><li><p>按住CTRL+C强制结束</p></li><li><p>运行<code>systemctl restart gitlab-runsvdir</code></p></li><li><p>再次执行<code>gitlab-ctl reconfigure</code></p></li></ul><p><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/issues/160" target="_blank" rel="noopener">解决方案来源</a></p><h2 id="完整卸载gitlab"><a href="#完整卸载gitlab" class="headerlink" title="完整卸载gitlab"></a>完整卸载gitlab</h2><ul><li>停止gitlab</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab-ctl stop</span><br></pre></td></tr></table></figure><ul><li>卸载gitlab</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -e gitlab-ce</span><br></pre></td></tr></table></figure><ul><li>查看gitlab进程</li></ul><p>kill掉所有的gitlab进程</p><p>确认所有gitlab进程已经被删除</p><ul><li>删除gitlab文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find / -name gitlab|xargs rm -rf    <span class="comment"># 删除所有包含gitlab的文件及目录</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是Gitlab跨大版本更新，数据迁移备份过程记录&lt;/p&gt;
&lt;h2 id=&quot;背景简述&quot;&gt;&lt;a href=&quot;#背景简述&quot; class=&quot;headerlink&quot; title=&quot;背景简述&quot;&gt;&lt;/a&gt;背景简述&lt;/h2&gt;&lt;p&gt;由于各个项目迭代次数较多，Gitlab的服务器硬
      
    
    </summary>
    
      <category term="Gitlab升级" scheme="http://yoursite.com/categories/Gitlab%E5%8D%87%E7%BA%A7/"/>
    
    
      <category term="Gitlab" scheme="http://yoursite.com/tags/Gitlab/"/>
    
      <category term="Update" scheme="http://yoursite.com/tags/Update/"/>
    
      <category term="Migration" scheme="http://yoursite.com/tags/Migration/"/>
    
  </entry>
  
  <entry>
    <title>浅析僵尸进程与孤儿进程</title>
    <link href="http://yoursite.com/2018/02/28/zombie-process-and-orphaned-process/"/>
    <id>http://yoursite.com/2018/02/28/zombie-process-and-orphaned-process/</id>
    <published>2018-02-27T16:00:00.000Z</published>
    <updated>2018-03-07T06:21:58.550Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是理解僵尸进程和孤儿进程的产生原因</p><h2 id="知识背景"><a href="#知识背景" class="headerlink" title="知识背景"></a>知识背景</h2><p>在被誉为UNIX编程“圣经”的一书《unix环境高级编程》中有提到僵尸进程和孤儿进程。不少同学对这两个概念会混淆，这篇文章总结一下。</p><p>在unix/linux系统中，大多情况下，子进程是通过父进程fork创建的，注：系统调用fork，是一个比较有意思系统调用，它调用一次，返回两个值，失败返回-1,成功时在子进程返回0，父进程返回所创建子进程的pid。本文暂时只需了解这些就够了，有兴趣的同学可以查阅man文档，描述的非常清楚。</p><p>子进程创建后，子进程的结束和父进程的运行是一个异步过程,也就是说父进程没办法预测子进程什么时候结束。 当一个子进程完成它的工作终止之后，其父进程需要调用wait()或waitpid()去获取子进程的终止状态。</p><h2 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><p>首先来认识下什么叫孤儿进程，所谓孤儿进程，顾名思义，和现实生活中的孤儿有点类似，当一个进程的<code>父进程结束</code>时，但是它自己还没有结束，那么这个进程将会成为孤儿进程。最后孤儿进程将会被<code>init进程</code>（进程号为1）的进程收养，当然在子进程结束时也会由init进程完成对它的状态收集工作，因此一般来说，孤儿进程并不会有什么危害。</p><p>下面看一个关于<strong>孤儿进程</strong>的例子：在main函数中，创建子进程，然后让父进程睡眠1s，让子进程先运行打印出其进程id(pid)以及父进程id(ppid)；随后子进程睡眠3s（此时会调度到父进程运行直至结束），目的是<code>让父进程先于子进程结束</code>，让子进程有个孤儿的状态；最后子进程再打印出其进程id(pid)以及父进程id(ppid)；观察两次打印 其父进程id(ppid)的区别。</p><p><img src="/images/orphaned-process-1.jpg" alt="orphaned-process-1"></p><p><img src="/images/orphaned-process-2.jpg" alt="orphaned-process-2"></p><p>从运行结果来看：当其父进程结束后，子进程成为了孤儿进程，其父进程id(ppid)为1，也就是说，init进程成为该子进程的父进程了。</p><h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><p>好了，说完了孤儿进程，再来谈谈僵尸进程，其实对于这2两个概念（指孤儿进程与僵尸进程）不少人容易混淆，其实如果仔细理解的话，还是很容易区分的。</p><p>僵尸进程是指：一个进程使用fork创建子进程，如果<strong>子进程退出</strong>，而父进程并<code>没有调用</code>wait或waitpid获取子进程的状态信息，那么子进程的某些信息如进程描述符仍然保存在系统中。这种进程称之为僵死进程。</p><p>下面是1个关于<strong>僵尸进程</strong>的例子：在main函数中，创建子进程，然后让父进程睡眠10s，让子进程先终止（注意和孤儿进程例子的区别）；这里子进程结束后父进程没有调用wait/waitpid函数获取其状态，用ps查看进程状态可以看出子进程为僵尸状态。</p><p><img src="/images/zombie-process-1.jpg" alt="zombie-process-1"></p><p><img src="/images/zombie-process-2.jpg" alt="zombie-process-2"></p><p><img src="/images/zombie-process-3.jpg" alt="zombie-process-3"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：任何一个子进程(init除外)在<span class="built_in">exit</span>()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个子进程在结束时都要经过的阶段。如果子进程在<span class="built_in">exit</span>()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时 处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。  如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。</span><br></pre></td></tr></table></figure><p>讲了僵尸进程产生的原因，再来讲讲僵尸进程的危害：僵尸进程会在系统中保留其某些信息如进程描述符、进程id等等。以进程id为例，系统中可用的进程id是有限的，如果由于系统中大量的僵尸进程占用进程id，就会导致因为没有可用的进程id系统不能产生新的进程，这种问题可就大了，这就是僵尸进程带来的危害。</p><h2 id="如何杀死僵尸进程"><a href="#如何杀死僵尸进程" class="headerlink" title="如何杀死僵尸进程"></a>如何杀死僵尸进程</h2><p>如上可知，僵尸进程一旦出现之后，很难自己消亡，会一直存在下去，直至系统重启。虽然僵尸进程几乎不占系统资源，但是，这样下去，数量太多了之后，终究会给系统带来其他的影响。</p><p>请注意：defunct状态下的僵尸进程是不能直接使用kill -9命令杀掉的，否则就不叫僵尸进程了。</p><p><strong>解决方法</strong>：</p><ul><li><p>重启服务器，这个是最简单，最易用的方法，但是如果你服务器电脑上运行有其他的程序，那么这个方法，代价很大。所以，尽量使用下面一种方法。</p></li><li><p>找到该defunct僵尸进程的父进程，将该进程的父进程杀掉，则此defunct进程将自动消失。</p></li></ul><p>参考命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep defunct_process_pid</span><br></pre></td></tr></table></figure><h2 id="如何预防僵尸进程"><a href="#如何预防僵尸进程" class="headerlink" title="如何预防僵尸进程"></a>如何预防僵尸进程</h2><p>以上介绍的只是在发现了僵尸进程之后，如何去杀死它。那么，有同学可能会说了，这个是治标不治本的。真正的办法是，不让它产生，问题才能彻底解决。</p><ul><li><p>在父进程创建子进程之前，就向系统申明自己并不会对这个子进程的exit动作进行任何关注行为，这样的话，子进程一旦退出后，系统就不会去等待父进程的操作，而是直接将该子进程的资源回收掉，也就不会出现僵尸进程了。具体的办法就是，在父进程的初始化函数中，调用这个函数：signal(SIGCHLD,SIG_IGN)；</p></li><li><p>如果上述语句没来得及调用，也有另外一个办法。那就是在创建完子进程后，用waitpid等待子进程返回，也能达到上述效果；</p></li><li><p>如果上述两个办法都不愿意采用，那还有一招：在父进程创建子进程的时候，连续调用两次fork()，而且使紧跟的子进程直接退出，使其孙子进程成为孤儿进程，从而init进程将代替父进程来接手，负责清除这个孤儿进程。于是，父进程就无需进行任何的清理行为，系统会自动处理；</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是理解僵尸进程和孤儿进程的产生原因&lt;/p&gt;
&lt;h2 id=&quot;知识背景&quot;&gt;&lt;a href=&quot;#知识背景&quot; class=&quot;headerlink&quot; title=&quot;知识背景&quot;&gt;&lt;/a&gt;知识背景&lt;/h2&gt;&lt;p&gt;在被誉为UNIX编程“圣经”的一书《unix环境高级编程》中有
      
    
    </summary>
    
      <category term="浅析僵尸进程与孤儿进程" scheme="http://yoursite.com/categories/%E6%B5%85%E6%9E%90%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/"/>
    
    
      <category term="Zombie Process" scheme="http://yoursite.com/tags/Zombie-Process/"/>
    
      <category term="Orphaned Process" scheme="http://yoursite.com/tags/Orphaned-Process/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix汉化字体修改</title>
    <link href="http://yoursite.com/2018/02/28/zabbix-fonts/"/>
    <id>http://yoursite.com/2018/02/28/zabbix-fonts/</id>
    <published>2018-02-27T16:00:00.000Z</published>
    <updated>2018-03-07T04:00:43.907Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是Zabbix3.4安装后，设置为中文环境，但是查看”图形”监控的时候图形下方的图例中文也会出现乱码（方块），所以需要修改字体文件来显示正常中文。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Zabbix的图形显示用的字体是dejavu，不支持中文。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="Zabbix3-2-x以及之前的解决方法"><a href="#Zabbix3-2-x以及之前的解决方法" class="headerlink" title="Zabbix3.2.x以及之前的解决方法"></a>Zabbix3.2.x以及之前的解决方法</h3><p>这个版本之前的都是放在Web服务的文件夹中，比如</p><ul><li><p>nginx：使用这个Web服务的路径在(yum安装)<code>/usr/share/nginx/html/</code>目录下，(编译安装)自定义目录路径下。</p></li><li><p>apache：使用这个Web服务的路径在(默认路径)<code>/var/www/html/</code>目录下。</p></li></ul><p>这两个Web服务的文件下一般都会有一个zabbix的文件(或者叫其他名字)，然后里面的<code>/path/zabbix/fonts/</code>目录下会有一个叫<code>DejaVuSans.ttf</code>的文件。</p><p>因为前端的php已经默认了使用<code>DejaVuSans.ttf</code>这个文件作为字体文件，所以我们可以不修改php，把我们想要的字体改成对应的名字就行。</p><p><a href="https://github.com/Polaris0112/Ops-Tools/raw/master/zabbix_installation/MSYH.TTF" target="_blank" rel="noopener">微软雅黑</a>  &lt;–这个是我从Windows7中导出来的微软雅黑字体，亲测可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 然后把这个字体先复制`/path/zabbix/fonts`下，下面以nginx为例</span></span><br><span class="line">$ cp MSYH.TTF /usr/share/nginx/html/zabbix/fonts/</span><br><span class="line"></span><br><span class="line"><span class="comment">## 更改原本字体文件名作为备份</span></span><br><span class="line">$ mv /usr/share/nginx/html/zabbix/fonts/DejaVuSans.ttf /usr/share/nginx/html/zabbix/fonts/DejaVuSans.ttf.bak</span><br><span class="line"></span><br><span class="line"><span class="comment">## 把新的字体改到对应的字体文件名</span></span><br><span class="line">$ mv /usr/share/nginx/html/zabbix/fonts/MSYH.TTF /usr/share/nginx/html/zabbix/fonts/DejaVuSans.ttf</span><br></pre></td></tr></table></figure><p>无需重启服务，直接刷新网页端即可。</p><h3 id="Zabbix3-4-x的解决方法"><a href="#Zabbix3-4-x的解决方法" class="headerlink" title="Zabbix3.4.x的解决方法"></a>Zabbix3.4.x的解决方法</h3><p>以下方法使用的是用yum方法安装Zabbix3.4.7之后修改字体，测试通过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 先下载字体，如上</span></span><br><span class="line">$ wget https://github.com/Polaris0112/Ops-Tools/raw/master/zabbix_installation/MSYH.TTF</span><br><span class="line">$ mv MSYH.TTF /usr/share/fonts/MSYH.TTF</span><br><span class="line"></span><br><span class="line"><span class="comment">## zabbix配置文件(/usr/share/zabbix/include/defines.inc.php)里，定义的字体叫做graphfont.ttf</span></span><br><span class="line"><span class="comment">## 然后一路软链接到DejaVuSans.ttf，如下：</span></span><br><span class="line"><span class="comment">## /usr/share/zabbix/graphfont.ttf -&gt; /etc/alternatives/zabbix-web-font -&gt; /usr/share/fonts/dejavu/DejaVuSans.ttf</span></span><br><span class="line"><span class="comment">## 那么，修改掉最后一层软连接的目标字体就可以了。执行类似下面的命令就可以了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 先备份原有字体</span></span><br><span class="line">$ mv /etc/alternatives/zabbix-web-font /etc/alternatives/zabbix-web-font_bak </span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建新增软连接</span></span><br><span class="line">$ ln -s /usr/share/fonts/MSYH.TTF /etc/alternatives/zabbix-web-font</span><br></pre></td></tr></table></figure><p>无需重启服务，直接刷新网页端即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是Zabbix3.4安装后，设置为中文环境，但是查看”图形”监控的时候图形下方的图例中文也会出现乱码（方块），所以需要修改字体文件来显示正常中文。&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原
      
    
    </summary>
    
      <category term="Zabbix汉化字体修改" scheme="http://yoursite.com/categories/Zabbix%E6%B1%89%E5%8C%96%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9/"/>
    
    
      <category term="Zabbix" scheme="http://yoursite.com/tags/Zabbix/"/>
    
      <category term="Font" scheme="http://yoursite.com/tags/Font/"/>
    
  </entry>
  
  <entry>
    <title>NFS安装部署</title>
    <link href="http://yoursite.com/2018/02/27/nfs-installation/"/>
    <id>http://yoursite.com/2018/02/27/nfs-installation/</id>
    <published>2018-02-26T16:00:00.000Z</published>
    <updated>2018-03-06T09:48:07.668Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是在CentOS7系统中安装NFS网络文件存储系统</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>CentOS7</li></ul><h3 id="1-关闭系统防火墙和selinux"><a href="#1-关闭系统防火墙和selinux" class="headerlink" title="1.关闭系统防火墙和selinux"></a>1.关闭系统防火墙和selinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status firewalld</span><br><span class="line">firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sat 2017-06-03 09:38:00 CST; 8s ago</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"> Main PID: 24067 (firewalld)</span><br><span class="line">   CGroup: /system.slice/firewalld.service</span><br><span class="line">           └─24067 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class="line"></span><br><span class="line">Jun 03 09:37:58 linuxidc systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class="line">Jun 03 09:38:00 linuxidc systemd[1]: Started firewalld - dynamic firewall daemon.</span><br><span class="line"></span><br><span class="line"><span class="comment">## 关闭防火墙</span></span><br><span class="line">$ systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 把selinux设为许可模式</span></span><br><span class="line">$ setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment">## 要想禁用selinux,则需要编辑selinux的配置文件,把SELINUX设置成disabled,然后重启生效</span></span><br><span class="line">$ vi /etc/sysconfig/selinux</span><br><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><h3 id="2-安装所需的软件包"><a href="#2-安装所需的软件包" class="headerlink" title="2.安装所需的软件包"></a>2.安装所需的软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y rpc-bind nfs-utils</span><br></pre></td></tr></table></figure><h3 id="3-服务端配置"><a href="#3-服务端配置" class="headerlink" title="3.服务端配置"></a>3.服务端配置</h3><p>NFS服务的主要配置文件为 /etc/exports.<br>/etc/exports文件内容格式：</p><ul><li>&lt;输出目录&gt; 客户端（选项:访问权限,用户映射,其他]<ul><li>输出目录是指NFS系统中所定义的共享给客户端使用的文件系统</li><li>客户端是定义网络中可以访问这个NFS共享目录的IP地址或网段或域名等</li><li>客户端常用的指定方式<ul><li>指定ip地址的主机：192.168.100.1</li><li>指定一个子网：192.168.100.0/24 也可以写成:192.168.100.0/255.255.255.0</li><li>指定域名的主机：david.bsmart.cn</li><li>指定域中的所有主机：*.bsmart.cn</li><li>所有主机：*</li></ul></li></ul></li><li>选项用来设置输出目录的访问权限、用户映射等。</li><li>NFS主要有3类选项：<ul><li>设置输出目录只读：ro</li><li>设置输出目录读写：rw</li></ul></li><li>用户映射选项<ul><li>all_squash：将远程访问的所有普通用户及所属组都映射为匿名用户或用户组（nfsnobody）；</li><li>no_all_squash：与all_squash取反（默认设置）；</li><li>root_squash：将root用户及所属组都映射为匿名用户或用户组（默认设置）；</li><li>no_root_squash：与rootsquash取反；</li><li>anonuid=xxx：将远程访问的所有用户都映射为匿名用户，并指定该用户为本地用户（UID=xxx）；</li><li>anongid=xxx：将远程访问的所有用户组都映射为匿名用户组账户，并指定该匿名用户组账户为本地用户组账户（GID=xxx）；</li></ul></li><li>其它选项<ul><li>secure：限制客户端只能从小于1024的tcp/ip端口连接nfs服务器（默认设置）；</li><li>insecure：允许客户端从大于1024的tcp/ip端口连接服务器；</li><li>sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性；</li><li>async：将数据先保存在内存缓冲区中，必要时才写入磁盘；</li><li>wdelay：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率（默认设置）；</li><li>no_wdelay：若有写操作则立即执行，应与sync配合使用；</li><li>subtree：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限(默认设置)；</li><li>no_subtree：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率；<br>-修改/etc/exports文件,定义NFS共享</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 先创建本地目录并把共享目录的权限设定为所有用户都可读可写权限</span></span><br><span class="line">$ mkdir -p /data</span><br><span class="line">$ chmod 766 /data</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改NFS配置文件,定义共享</span></span><br><span class="line">$ vi /etc/exports</span><br><span class="line">/data *(rw,sync)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 把RPCbind加入开机处启动选项中</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> rpcbind </span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动RPCbind</span></span><br><span class="line">$ systemctl start rpcbind</span><br><span class="line"></span><br><span class="line"><span class="comment">## 把NFS加入到开机自启动选项中</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> nfs</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启NFS服务</span></span><br><span class="line">$ systemctl start nfs</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看本机共享的文件系统</span></span><br><span class="line">$ exportfs</span><br></pre></td></tr></table></figure><h2 id="客户端配置（以下操作均在客户端上）"><a href="#客户端配置（以下操作均在客户端上）" class="headerlink" title="客户端配置（以下操作均在客户端上）"></a>客户端配置（以下操作均在客户端上）</h2><h3 id="1-客户端关闭防火墙和selinux-方法同上"><a href="#1-客户端关闭防火墙和selinux-方法同上" class="headerlink" title="1.客户端关闭防火墙和selinux,方法同上."></a>1.客户端关闭防火墙和selinux,方法同上.</h3><h3 id="2-客户端安装NFS软件包-并把NFS服务设为开机自启动-方法同上"><a href="#2-客户端安装NFS软件包-并把NFS服务设为开机自启动-方法同上" class="headerlink" title="2.客户端安装NFS软件包,并把NFS服务设为开机自启动,方法同上."></a>2.客户端安装NFS软件包,并把NFS服务设为开机自启动,方法同上.</h3><h3 id="3-挂载共享的NFS文件系统"><a href="#3-挂载共享的NFS文件系统" class="headerlink" title="3.挂载共享的NFS文件系统"></a>3.挂载共享的NFS文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 把服务端(192.168.0.100)的共享目录挂载到本机的/share上</span></span><br><span class="line">$ mkdir -p /upload</span><br><span class="line">$ mount 192.168.0.100:/data /share</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看是否已经挂载成功</span></span><br><span class="line">$ mount | grep media</span><br><span class="line">192.168.0.100:/data on /share <span class="built_in">type</span> nfs4 (rw,relatime,vers=4.0,rsize=131072,wsize=131072,namlen=255,hard,prot</span><br><span class="line"></span><br><span class="line"><span class="comment">## 把共享目录写入系统挂载文件系统</span></span><br><span class="line">$ vi /etc/fstab</span><br><span class="line">192.168.16.29:/data        /share      nfs4    defaults    0 0</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="1-在服务端共享目录中新建一个10M大小的文件"><a href="#1-在服务端共享目录中新建一个10M大小的文件" class="headerlink" title="1.在服务端共享目录中新建一个10M大小的文件"></a>1.在服务端共享目录中新建一个10M大小的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在NFS共享目录上新建一个10M大小的文件,提示成功</span></span><br><span class="line">$ <span class="built_in">cd</span> /data</span><br><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=/data/f1 bs=1M count=10</span><br><span class="line">$ ll -h</span><br><span class="line">total 10M</span><br><span class="line">-rw-r--r--. 1 root root 10M Mar  6 10:14 f1</span><br></pre></td></tr></table></figure><h3 id="2-在客户端新建另一个文件f2-同时尝试删除另一个文件f1"><a href="#2-在客户端新建另一个文件f2-同时尝试删除另一个文件f1" class="headerlink" title="2.在客户端新建另一个文件f2,同时尝试删除另一个文件f1"></a>2.在客户端新建另一个文件f2,同时尝试删除另一个文件f1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /share</span><br><span class="line">$ ls</span><br><span class="line">f1</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在共享目录上新建一个文件f2,未报错</span></span><br><span class="line">$ touch f2</span><br><span class="line"><span class="comment">## 删除存在的文件f1,未报错</span></span><br><span class="line">$ rm -f f1</span><br></pre></td></tr></table></figure><h3 id="3-在服务端查看共享目录中的文件"><a href="#3-在服务端查看共享目录中的文件" class="headerlink" title="3.在服务端查看共享目录中的文件"></a>3.在服务端查看共享目录中的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">f2</span><br></pre></td></tr></table></figure><p>部署完毕。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是在CentOS7系统中安装NFS网络文件存储系统&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CentOS7&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
      <category term="NFS安装部署" scheme="http://yoursite.com/categories/NFS%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="NFS" scheme="http://yoursite.com/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>MyISAM和InnoDB区别详解</title>
    <link href="http://yoursite.com/2018/02/26/myisam-innodb/"/>
    <id>http://yoursite.com/2018/02/26/myisam-innodb/</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2018-03-06T08:37:49.364Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是MySQL存储引擎中的MyISAM和InnoDB区别详解</p><h2 id="知识背景"><a href="#知识背景" class="headerlink" title="知识背景"></a>知识背景</h2><p>在使用MySQL的过程中对MyISAM和InnoDB这两个概念存在了些疑问，到底两者引擎有何分别一直是存在我心中的疑问。</p><ul><li><p>MyISAM是MySQL的默认数据库引擎（5.5版之前），由早期的ISAM（Indexed Sequential Access Method：有索引的顺序访问方法）所改良。虽然性能极佳，但却有一个缺点：不支持事务处理（transaction）。不过，在这几年的发展下，MySQL也导入了InnoDB（另一种数据库引擎），以强化参考完整性与并发违规处理机制，后来就逐渐取代MyISAM。</p></li><li><p>InnoDB，是MySQL的数据库引擎之一，为MySQL AB发布binary的标准之一。InnoDB由Innobase Oy公司所开发，2006年五月时由甲骨文公司并购。与传统的ISAM与MyISAM相比，InnoDB的最大特色就是支持了ACID兼容的事务（Transaction）功能，类似于PostgreSQL。目前InnoDB采用双轨制授权，一是GPL授权，另一是专有软件授权。</p></li></ul><h2 id="MyISAM与InnoDB的区别是什么？"><a href="#MyISAM与InnoDB的区别是什么？" class="headerlink" title="MyISAM与InnoDB的区别是什么？"></a>MyISAM与InnoDB的区别是什么？</h2><h3 id="1、-存储结构"><a href="#1、-存储结构" class="headerlink" title="1、 存储结构"></a>1、 存储结构</h3><p>MyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为.MYD (MYData)。索引文件的扩展名是.MYI (MYIndex)。</p><p>InnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。</p><h3 id="2、-存储空间"><a href="#2、-存储空间" class="headerlink" title="2、 存储空间"></a>2、 存储空间</h3><p>MyISAM：可被压缩，存储空间较小。支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)、动态表、压缩表。</p><p>InnoDB：需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。</p><h3 id="3、-可移植性、备份及恢复"><a href="#3、-可移植性、备份及恢复" class="headerlink" title="3、 可移植性、备份及恢复"></a>3、 可移植性、备份及恢复</h3><p>MyISAM：数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个表进行操作。</p><p>InnoDB：免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据量达到几十G的时候就相对痛苦了。</p><h3 id="4、-事务支持"><a href="#4、-事务支持" class="headerlink" title="4、 事务支持"></a>4、 事务支持</h3><p>MyISAM：强调的是性能，每次查询具有原子性,其执行数度比InnoDB类型更快，但是不提供事务支持。</p><p>InnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</p><h3 id="5、-AUTO-INCREMENT"><a href="#5、-AUTO-INCREMENT" class="headerlink" title="5、 AUTO_INCREMENT"></a>5、 AUTO_INCREMENT</h3><p>MyISAM：可以和其他字段一起建立联合索引。引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。</p><p>InnoDB：InnoDB中必须包含只有该字段的索引。引擎的自动增长列必须是索引，如果是组合索引也必须是组合索引的第一列。</p><h3 id="6、-表锁差异"><a href="#6、-表锁差异" class="headerlink" title="6、 表锁差异"></a>6、 表锁差异</h3><p>MyISAM：只支持表级锁，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。</p><p>InnoDB：支持事务和行级锁，是innodb的最大特色。行锁大幅度提高了多用户并发操作的新能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的。</p><h3 id="7、-全文索引"><a href="#7、-全文索引" class="headerlink" title="7、 全文索引"></a>7、 全文索引</h3><p>MyISAM：支持 FULLTEXT类型的全文索引</p><p>InnoDB：不支持FULLTEXT类型的全文索引，但是innodb可以使用sphinx插件支持全文索引，并且效果更好。</p><h3 id="8、-表主键"><a href="#8、-表主键" class="headerlink" title="8、 表主键"></a>8、 表主键</h3><p>MyISAM：允许没有任何索引和主键的表存在，索引都是保存行的地址。</p><p>InnoDB：如果没有设定主键或者非空唯一索引，就会自动生成一个6字节的主键(用户不可见)，数据是主索引的一部分，附加索引保存的是主索引的值。</p><h3 id="9、-表的具体行数"><a href="#9、-表的具体行数" class="headerlink" title="9、 表的具体行数"></a>9、 表的具体行数</h3><p>MyISAM：保存有表的总行数，如果select count(*) from table;会直接取出出该值。</p><p>InnoDB：没有保存表的总行数，如果使用select count(*) from table；就会遍历整个表，消耗相当大，但是在加了wehre条件后，myisam和innodb处理的方式都一样。</p><h3 id="10、-CURD操作"><a href="#10、-CURD操作" class="headerlink" title="10、 CURD操作"></a>10、 CURD操作</h3><p>MyISAM：如果执行大量的SELECT，MyISAM是更好的选择。</p><p>InnoDB：如果你的数据执行大量的INSERT或UPDATE，出于性能方面的考虑，应该使用InnoDB表。DELETE 从性能上InnoDB更优，但DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除，在innodb上如果要清空保存有大量数据的表，最好使用truncate table这个命令。</p><h3 id="11、-外键"><a href="#11、-外键" class="headerlink" title="11、 外键"></a>11、 外键</h3><p>MyISAM：不支持</p><p>InnoDB：支持</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述的分析，基本上可以考虑使用InnoDB来替代MyISAM引擎了，原因是InnoDB自身很多良好的特点，比如事务支持、存储 过程、视图、行级锁定等等，在并发很多的情况下，相信InnoDB的表现肯定要比MyISAM强很多。另外，任何一种表都不是万能的，只用恰当的针对业务类型来选择合适的表类型，才能最大的发挥MySQL的性能优势。如果不是很复杂的Web应用，非关键应用，还是可以继续考虑MyISAM的，这个具体情况可以自己斟酌。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是MySQL存储引擎中的MyISAM和InnoDB区别详解&lt;/p&gt;
&lt;h2 id=&quot;知识背景&quot;&gt;&lt;a href=&quot;#知识背景&quot; class=&quot;headerlink&quot; title=&quot;知识背景&quot;&gt;&lt;/a&gt;知识背景&lt;/h2&gt;&lt;p&gt;在使用MySQL的过程中对MyISAM
      
    
    </summary>
    
      <category term="MySQL存储引擎中的MyISAM和InnoDB区别详解" scheme="http://yoursite.com/categories/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%AD%E7%9A%84MyISAM%E5%92%8CInnoDB%E5%8C%BA%E5%88%AB%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MyISAM" scheme="http://yoursite.com/tags/MyISAM/"/>
    
      <category term="InnoDB" scheme="http://yoursite.com/tags/InnoDB/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix性能优化</title>
    <link href="http://yoursite.com/2018/02/26/zabbix-optimization/"/>
    <id>http://yoursite.com/2018/02/26/zabbix-optimization/</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2018-03-06T08:29:46.634Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是从多个方面优化Zabbix性能，使其能监控大量服务器。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于计划日益增加的服务器数量，所以需要监控系统的性能可以跟上处理数量庞大的服务器数据。因此需要对Zabbix服务端进行性能优化。</p><p>主要优化有几方面：</p><p>一、从软件设置层面来看，Zabbix的C-S模式收集数据主要分为被动模式和主动模式，当选择被动模式的时候，是服务端根据主机列表来逐个请求数据，这样的话当客户端数量越来越大，那么服务端接受对应数据的间隔也会越来越长从而导致数据延迟。另一个模式是主动模式，在这个模式下，服务端设置好监控项之后，客户端（配置文件中设置好开启主动模式）就会请求服务端的监控列表，然后客户端会对应这个监控列表上的监控项进行数据收集并主动发送给服务端。这样，服务端只需要提供一个监控列表，就可能让客户端自行提取，服务端不需要等待返回数据，而是客户端直接把数据发回服务端，这样可以大大减少服务端的网络请求的压力。</p><p>二、从软件架构层面来看，对于大量的服务器，我们可以使用Zabbix-Proxy这个服务，这个服务本意是监控客户端与服务端在不同内网的情况使用的，不过用上Zabbix-Proxy之后，它也算是一个服务端，只不过它不会有前端界面，它只是负责统一接收客户端数据并发送给服务端，这样的话可以大大减少服务端处理数据的压力。</p><p>三、从数据版本和引擎层面来看，本人会建议使用Percona+TokuDB的组合。MySQL 4和5使用默认的MyISAM存储引擎安装每个表。从5.5开始，MySQL已将默认存储引擎从MyISAM更改为InnoDB。MyISAM没有提供事务支持，而InnoDB提供了事务支持。与MyISAM相比，InnoDB提供了许多细微的性能改进，并且在处理潜在的数据丢失时提供了更高的可靠性和安全性。Percona XtraDB 是 InnoDB 存储引擎的增强版，被设计用来更好的使用更新计算机硬件系统的性能，同时还包含有一些在高性能环境下的新特性。XtraDB 存储引擎是完全的向下兼容，在 MariaDB 中，XtraDB 存储引擎被标识为”ENGINE=InnoDB”，这个与 InnoDB 是一样的，所以你可以直接用XtraDB 替换掉 InnoDB 而不会产生任何问题。Percona XtraDB 包含有所有 InnoDB 健壮性，可依赖的 ACID 兼容设计和高级 MVCC 架构。XtraDB 在 InnoDB 的坚实基础上构建，使 XtraDB 具有更多的特性，更好调用，更多的参数指标和更多的扩展。从实践的角度来看，XtraDB 被设计用来在多核心的条件下更有效的使用内存和更加方便，更加可用。新的特性被用来降低 InnoDB 的局限性。性能层面，XtraDB与内置的MySQL 5.1 InnoDB 引擎相比，它每分钟可处理2.7倍的事务。同时，按照官方的介绍，TokuDB 引擎是可扩展的，支持事务 ACID 特性，支持多版本控制(MVCC)，这几点等同 InnoDB 的特性，不过对基于索引的查询做了很好的改进，还提供了支持在线表更改的支持(不是所有字段都支持， 后面再说明)，在磁盘和缓存方面也做了很好的改进。TokuDB 结合 松散树索引(Fractal Tree indexing)，可以应用于高负载的大量写(write-intensive)的场景里。对于这个组合，本人觉得很适合运用在Zabbix这种若有大量数据刷新写入的场景里面使用。</p><p>四、从数据库表层面来看，可以把Zabbix中的几个大表进行表分区。Zabbix的大表有：</p><ul><li>history</li><li>history_log</li><li>history_str</li><li>history_text</li><li>history_uint</li><li>trends</li><li>trends_uint</li></ul><p>第一个方案在客户端的配置文件找到<code>ServerActive</code>并填入服务器IP作为值，重启客户端则开启了主动模式，然后在Web端对应的监控项修改属性，改成主动模式即可</p><p>第二个方案可以参考<a href="https://polaris0112.github.io/2018/02/25/zabbix-yum-installation/" target="_blank" rel="noopener">《Zabbix YUM方式部署》</a>最后有提及到Zabbix-Proxy的部署方式</p><h2 id="安装部署Percona-TokuDB引擎"><a href="#安装部署Percona-TokuDB引擎" class="headerlink" title="安装部署Percona+TokuDB引擎"></a>安装部署Percona+TokuDB引擎</h2><p>关于Percona的安装教程可以参考<a href="https://polaris0112.github.io/2018/02/25/zabbix-source-installation/" target="_blank" rel="noopener">《Zabbix 编译安装部署》</a>中的<code>安装Percona Mysql数据库(比原生Mysql性能更优)</code>部分，对应安装即可。</p><p>不过除了安装主要的Percona数据库以外，还要下载TokuDB插件以及其依赖jemalloc 3.3.0以上版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y jemalloc-devel.x86_64</span><br><span class="line">$ yum install -y Percona-Server-tokudb-57</span><br></pre></td></tr></table></figure></p><p>（弃用）关闭Transparent Huge Pages(THP)<br>Percona安装TokuDB已经默认配置，不需要单独配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/enabled; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/defrag; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>假设你的Percona已经正常运行（并且设置好root密码），那么可以执行以下命令安装TokuDB插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ps_tokudb_admin --<span class="built_in">enable</span> -uroot -p</span><br><span class="line"><span class="comment">#password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后会出现一些日志信息，有可能会出现以下信息</span></span><br><span class="line"><span class="comment">#PLEASE RESTART MYSQL SERVICE AND RUN THIS SCRIPT AGAIN TO FINISH INSTALLATION!</span></span><br><span class="line"><span class="comment">#按照提示，重启mysql，然后再跑多一次这个命令</span></span><br><span class="line"></span><br><span class="line">$ systemctl restart mysql</span><br><span class="line">$ ps_tokudb_admin --<span class="built_in">enable</span> -uroot -p</span><br><span class="line"><span class="comment">#password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#出现信息</span></span><br><span class="line"><span class="comment">#Installing TokuDB engine...</span></span><br><span class="line"><span class="comment">#INFO: Successfully installed TokuDB engine plugin.</span></span><br><span class="line"><span class="comment">#即为安装成功</span></span><br></pre></td></tr></table></figure></p><p>查看是否已经安装成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line"><span class="comment">#password</span></span><br><span class="line"></span><br><span class="line">mysql &gt; show engines;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                                    | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| MEMORY             | YES     | Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables                  | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                                         | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                                      | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears)             | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                                         | NO           | NO   | NO         |</span><br><span class="line">| TokuDB             | YES     | Percona TokuDB Storage Engine with Fractal Tree(tm) Technology             | YES          | YES  | YES        |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                                      | NO           | NO   | NO         |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                                     | NO           | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Percona-XtraDB, Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |</span><br><span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                             | NULL         | NULL | NULL       |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#见到Engine一列中有TokuDB则是安装成功</span></span><br></pre></td></tr></table></figure></p><h2 id="卸载TokuDB方法"><a href="#卸载TokuDB方法" class="headerlink" title="卸载TokuDB方法"></a>卸载TokuDB方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ps_tokudb_admin --<span class="built_in">disable</span> -uroot -p</span><br><span class="line"><span class="comment">#password</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动卸载插件</span></span><br><span class="line">$ mysql -u root -p</span><br><span class="line"><span class="comment">#password</span></span><br><span class="line"></span><br><span class="line">mysql &gt; UNINSTALL PLUGIN tokudb;</span><br><span class="line">mysql &gt; UNINSTALL PLUGIN tokudb_file_map;</span><br><span class="line">mysql &gt; UNINSTALL PLUGIN tokudb_fractal_tree_info;</span><br><span class="line">mysql &gt; UNINSTALL PLUGIN tokudb_fractal_tree_block_map;</span><br><span class="line">mysql &gt; UNINSTALL PLUGIN tokudb_trx;</span><br><span class="line">mysql &gt; UNINSTALL PLUGIN tokudb_locks;</span><br><span class="line">mysql &gt; UNINSTALL PLUGIN tokudb_lock_waits;</span><br><span class="line">mysql &gt; UNINSTALL PLUGIN tokudb_background_job_status;</span><br></pre></td></tr></table></figure><p>以上命令跑完即可卸载tokudb插件。</p><h2 id="修改Zabbix部分表的引擎"><a href="#修改Zabbix部分表的引擎" class="headerlink" title="修改Zabbix部分表的引擎"></a>修改Zabbix部分表的引擎</h2><p>这步操作的前提是已经做好Zabbix数据库初始化的步骤，详细可以参考<a href="https://polaris0112.github.io/2018/02/25/zabbix-yum-installation/" target="_blank" rel="noopener">《Zabbix YUM方式部署》</a>或者<a href="https://polaris0112.github.io/2018/02/25/zabbix-source-installation/" target="_blank" rel="noopener">《Zabbix 编译安装部署》</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u zabbix -p zabbix</span><br><span class="line"><span class="comment">#zabbix mysql password</span></span><br><span class="line"></span><br><span class="line">mysql &gt; alter table <span class="built_in">history</span> engine = <span class="string">'TOKUDB'</span>;</span><br><span class="line">mysql &gt; alter table history_log engine = <span class="string">'TOKUDB'</span>;</span><br><span class="line">mysql &gt; alter table history_str engine = <span class="string">'TOKUDB'</span>;</span><br><span class="line">mysql &gt; alter table history_text engine = <span class="string">'TOKUDB'</span>;</span><br><span class="line">mysql &gt; alter table history_uint engine = <span class="string">'TOKUDB'</span>;</span><br><span class="line">mysql &gt; alter table trends engine = <span class="string">'TOKUDB'</span>;</span><br><span class="line">mysql &gt; alter table trends_uint engine = <span class="string">'TOKUDB'</span>;</span><br></pre></td></tr></table></figure><p>操作完成后，zabbix的数据库大表的引擎将会改用tokudb，性能更佳。</p><h2 id="把Zabbix数据库中需要经常操作的大表进行表分区"><a href="#把Zabbix数据库中需要经常操作的大表进行表分区" class="headerlink" title="把Zabbix数据库中需要经常操作的大表进行表分区"></a>把Zabbix数据库中需要经常操作的大表进行表分区</h2><p><strong>分表前提</strong></p><ul><li><p>按时间范围分表（字段clock，字段无索引）</p></li><li><p>MySQL分区表要求范围字段是唯一索引或主键索引，或者是其中一部分，需要修改前核实clock是否在索引中</p></li></ul><h3 id="创建4个存储过程"><a href="#创建4个存储过程" class="headerlink" title="创建4个存储过程"></a>创建4个存储过程</h3><p>存储过程1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE `partition_create`(SCHEMANAME varchar(64), TABLENAME varchar(64), PARTITIONNAME varchar(64), CLOCK int)</span><br><span class="line">BEGIN</span><br><span class="line">        /*</span><br><span class="line">           SCHEMANAME = The DB schema <span class="keyword">in</span> <span class="built_in">which</span> to make changes</span><br><span class="line">           TABLENAME = The table with partitions to potentially delete</span><br><span class="line">           PARTITIONNAME = The name of the partition to create</span><br><span class="line">        */</span><br><span class="line">        /*</span><br><span class="line">           Verify that the partition does not already exist</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        DECLARE RETROWS INT;</span><br><span class="line">        SELECT COUNT(1) INTO RETROWS</span><br><span class="line">        FROM information_schema.partitions</span><br><span class="line">        WHERE table_schema = SCHEMANAME AND table_name = TABLENAME AND partition_description &gt;= CLOCK;</span><br><span class="line"></span><br><span class="line">        IF RETROWS = 0 THEN</span><br><span class="line">        /*</span><br><span class="line">           1. Print a message indicating that a partition was created.</span><br><span class="line">           2. Create the SQL to create the partition.</span><br><span class="line">           3. Execute the SQL from <span class="comment">#2.</span></span><br><span class="line">        */</span><br><span class="line">        SELECT CONCAT( <span class="string">"partition_create("</span>, SCHEMANAME, <span class="string">","</span>, TABLENAME, <span class="string">","</span>, PARTITIONNAME, <span class="string">","</span>, CLOCK, <span class="string">")"</span> ) AS msg;</span><br><span class="line">        SET @sql = CONCAT( <span class="string">'ALTER TABLE '</span>, SCHEMANAME, <span class="string">'.'</span>, TABLENAME, <span class="string">' ADD PARTITION (PARTITION '</span>, PARTITIONNAME, <span class="string">' VALUES LESS THAN ('</span>, CLOCK, <span class="string">'));'</span> );</span><br><span class="line">        PREPARE STMT FROM @sql;</span><br><span class="line">        EXECUTE STMT;</span><br><span class="line">        DEALLOCATE PREPARE STMT;</span><br><span class="line">        END IF;</span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>存储过程2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE `partition_drop`(SCHEMANAME VARCHAR(64), TABLENAME VARCHAR(64), DELETE_BELOW_PARTITION_DATE BIGINT)</span><br><span class="line">BEGIN</span><br><span class="line">        /*</span><br><span class="line">           SCHEMANAME = The DB schema <span class="keyword">in</span> <span class="built_in">which</span> to make changes</span><br><span class="line">           TABLENAME = The table with partitions to potentially delete</span><br><span class="line">           DELETE_BELOW_PARTITION_DATE = Delete any partitions with names that are dates older than this one (yyyy-mm-dd)</span><br><span class="line">        */</span><br><span class="line">        DECLARE <span class="keyword">done</span> INT DEFAULT FALSE;</span><br><span class="line">        DECLARE drop_part_name VARCHAR(16);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">           Get a list of all the partitions that are older than the date</span><br><span class="line">           <span class="keyword">in</span> DELETE_BELOW_PARTITION_DATE.  All partitions are prefixed with</span><br><span class="line">           a <span class="string">"p"</span>, so use SUBSTRING TO get rid of that character.</span><br><span class="line">        */</span><br><span class="line">        DECLARE myCursor CURSOR FOR</span><br><span class="line">        SELECT partition_name</span><br><span class="line">        FROM information_schema.partitions</span><br><span class="line">        WHERE table_schema = SCHEMANAME AND table_name = TABLENAME AND CAST(SUBSTRING(partition_name FROM 2) AS UNSIGNED) &lt; DELETE_BELOW_PARTITION_DATE;</span><br><span class="line">        DECLARE CONTINUE HANDLER FOR NOT FOUND SET <span class="keyword">done</span> = TRUE;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">           Create the basics <span class="keyword">for</span> when we need to drop the partition.  Also, create</span><br><span class="line">           @drop_partitions to hold a comma-delimited list of all partitions that</span><br><span class="line">           should be deleted.</span><br><span class="line">        */</span><br><span class="line">        SET @alter_header = CONCAT(<span class="string">"ALTER TABLE "</span>, SCHEMANAME, <span class="string">"."</span>, TABLENAME, <span class="string">" DROP PARTITION "</span>);</span><br><span class="line">        SET @drop_partitions = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">           Start looping through all the partitions that are too old.</span><br><span class="line">        */</span><br><span class="line">        OPEN myCursor;</span><br><span class="line">        read_loop: LOOP</span><br><span class="line">        FETCH myCursor INTO drop_part_name;</span><br><span class="line">        IF <span class="keyword">done</span> THEN</span><br><span class="line">    LEAVE read_loop;</span><br><span class="line">        END IF;</span><br><span class="line">        SET @drop_partitions = IF(@drop_partitions = <span class="string">""</span>, drop_part_name, CONCAT(@drop_partitions, <span class="string">","</span>, drop_part_name));</span><br><span class="line">        END LOOP;</span><br><span class="line">        IF @drop_partitions != <span class="string">""</span> THEN</span><br><span class="line">        /*</span><br><span class="line">           1. Build the SQL to drop all the necessary partitions.</span><br><span class="line">           2. Run the SQL to drop the partitions.</span><br><span class="line">           3. Print out the table partitions that were deleted.</span><br><span class="line">        */</span><br><span class="line">        SET @full_sql = CONCAT(@alter_header, @drop_partitions, <span class="string">";"</span>);</span><br><span class="line">        PREPARE STMT FROM @full_sql;</span><br><span class="line">        EXECUTE STMT;</span><br><span class="line">        DEALLOCATE PREPARE STMT;</span><br><span class="line"></span><br><span class="line">        SELECT CONCAT(SCHEMANAME, <span class="string">"."</span>, TABLENAME) AS `table`, @drop_partitions AS `partitions_deleted`;</span><br><span class="line">        ELSE</span><br><span class="line">        /*</span><br><span class="line">           No partitions are being deleted, so <span class="built_in">print</span> out <span class="string">"N/A"</span> (Not applicable) to indicate</span><br><span class="line">           that no changes were made.</span><br><span class="line">        */</span><br><span class="line">        SELECT CONCAT(SCHEMANAME, <span class="string">"."</span>, TABLENAME) AS `table`, <span class="string">"N/A"</span> AS `partitions_deleted`;</span><br><span class="line">        END IF;</span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>存储过程3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE `partition_maintenance`(SCHEMA_NAME VARCHAR(32), TABLE_NAME VARCHAR(32), KEEP_DATA_DAYS INT, HOURLY_INTERVAL INT, CREATE_NEXT_INTERVALS INT)</span><br><span class="line">BEGIN</span><br><span class="line">        DECLARE OLDER_THAN_PARTITION_DATE VARCHAR(16);</span><br><span class="line">        DECLARE PARTITION_NAME VARCHAR(16);</span><br><span class="line">        DECLARE OLD_PARTITION_NAME VARCHAR(16);</span><br><span class="line">        DECLARE LESS_THAN_TIMESTAMP INT;</span><br><span class="line">        DECLARE CUR_TIME INT;</span><br><span class="line"></span><br><span class="line">        CALL partition_verify(SCHEMA_NAME, TABLE_NAME, HOURLY_INTERVAL);</span><br><span class="line">        SET CUR_TIME = UNIX_TIMESTAMP(DATE_FORMAT(NOW(), <span class="string">'%Y-%m-%d 00:00:00'</span>));</span><br><span class="line"></span><br><span class="line">        SET @__interval = 1;</span><br><span class="line">        create_loop: LOOP</span><br><span class="line">        IF @__interval &gt; CREATE_NEXT_INTERVALS THEN</span><br><span class="line">    LEAVE create_loop;</span><br><span class="line">        END IF;</span><br><span class="line"></span><br><span class="line">        SET LESS_THAN_TIMESTAMP = CUR_TIME + (HOURLY_INTERVAL * @__interval * 3600);</span><br><span class="line">        SET PARTITION_NAME = FROM_UNIXTIME(CUR_TIME + HOURLY_INTERVAL * (@__interval - 1) * 3600, <span class="string">'p%Y%m%d%H00'</span>);</span><br><span class="line">        IF(PARTITION_NAME != OLD_PARTITION_NAME) THEN</span><br><span class="line">    CALL partition_create(SCHEMA_NAME, TABLE_NAME, PARTITION_NAME, LESS_THAN_TIMESTAMP);</span><br><span class="line">        END IF;</span><br><span class="line">        SET @__interval=@__interval+1;</span><br><span class="line">        SET OLD_PARTITION_NAME = PARTITION_NAME;</span><br><span class="line">        END LOOP;</span><br><span class="line"></span><br><span class="line">        SET OLDER_THAN_PARTITION_DATE=DATE_FORMAT(DATE_SUB(NOW(), INTERVAL KEEP_DATA_DAYS DAY), <span class="string">'%Y%m%d0000'</span>);</span><br><span class="line">        CALL partition_drop(SCHEMA_NAME, TABLE_NAME, OLDER_THAN_PARTITION_DATE);</span><br><span class="line"></span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>存储过程4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE `partition_verify`(SCHEMANAME VARCHAR(64), TABLENAME VARCHAR(64), HOURLYINTERVAL INT(11))</span><br><span class="line">BEGIN</span><br><span class="line">        DECLARE PARTITION_NAME VARCHAR(16);</span><br><span class="line">        DECLARE RETROWS INT(11);</span><br><span class="line">        DECLARE FUTURE_TIMESTAMP TIMESTAMP;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Check <span class="keyword">if</span> any partitions exist <span class="keyword">for</span> the given SCHEMANAME.TABLENAME.</span><br><span class="line">         */</span><br><span class="line">        SELECT COUNT(1) INTO RETROWS</span><br><span class="line">        FROM information_schema.partitions</span><br><span class="line">        WHERE table_schema = SCHEMANAME AND table_name = TABLENAME AND partition_name IS NULL;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * If partitions <span class="keyword">do</span> not exist, go ahead and partition the table</span><br><span class="line">         */</span><br><span class="line">        IF RETROWS = 1 THEN</span><br><span class="line">        /*</span><br><span class="line">         * Take the current date at 00:00:00 and add HOURLYINTERVAL to it.  This is the timestamp below <span class="built_in">which</span> we will store values.</span><br><span class="line">         * We begin partitioning based on the beginning of a day.  This is because we don<span class="string">'t want to generate a random partition</span></span><br><span class="line"><span class="string">         * that won'</span>t necessarily fall <span class="keyword">in</span> line with the desired partition naming (ie: <span class="keyword">if</span> the hour interval is 24 hours, we could</span><br><span class="line">         * end up creating a partition now named <span class="string">"p201403270600"</span> when all other partitions will be like <span class="string">"p201403280000"</span>).</span><br><span class="line">         */</span><br><span class="line">        SET FUTURE_TIMESTAMP = TIMESTAMPADD(HOUR, HOURLYINTERVAL, CONCAT(CURDATE(), <span class="string">" "</span>, <span class="string">'00:00:00'</span>));</span><br><span class="line">        SET PARTITION_NAME = DATE_FORMAT(CURDATE(), <span class="string">'p%Y%m%d%H00'</span>);</span><br><span class="line"></span><br><span class="line">        -- Create the partitioning query</span><br><span class="line">        SET @__PARTITION_SQL = CONCAT(<span class="string">"ALTER TABLE "</span>, SCHEMANAME, <span class="string">"."</span>, TABLENAME, <span class="string">" PARTITION BY RANGE(`clock`)"</span>);</span><br><span class="line">        SET @__PARTITION_SQL = CONCAT(@__PARTITION_SQL, <span class="string">"(PARTITION "</span>, PARTITION_NAME, <span class="string">" VALUES LESS THAN ("</span>, UNIX_TIMESTAMP(FUTURE_TIMESTAMP), <span class="string">"));"</span>);</span><br><span class="line"></span><br><span class="line">        -- Run the partitioning query</span><br><span class="line">        PREPARE STMT FROM @__PARTITION_SQL;</span><br><span class="line">        EXECUTE STMT;</span><br><span class="line">        DEALLOCATE PREPARE STMT;</span><br><span class="line">        END IF;</span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="存储过程中有四个功能："><a href="#存储过程中有四个功能：" class="headerlink" title="存储过程中有四个功能："></a>存储过程中有四个功能：</h3><ul><li><p>partition_create - 这将在给定模式中的给定表上创建一个分区。</p></li><li><p>partition_drop - 这将删除给定模式中给定表上给定时间戳的分区。</p></li><li><p>partition_maintenance - 此功能是用户调用的。它负责解析给定的参数，然后根据需要创建/删除分区。</p></li><li><p>partition_verify - 检查给定模式中给定表上是否启用了分区。如果没有启用，它将创建一个单独的分区。</p></li></ul><p><strong>partition_create</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">程序定义：partition_create（SCHEMANAME varchar（64），TABLENAME varchar（64），PARTITIONNAME varchar（64），CLOCK int）</span><br><span class="line">示例：CALL partition_create（“zabbix”，“<span class="built_in">history</span>”，“p20131216”，1387267200）;</span><br><span class="line">SCHEMANAME =要在其中进行更改的DB模式</span><br><span class="line">TABLENAME =要在其上创建PARTITIONNAME的表</span><br><span class="line">PARTITIONNAME =要创建的分区的名称</span><br><span class="line">将创建CLOCK = PARTITIONNAME以保存“clock”列值小于此值的值</span><br></pre></td></tr></table></figure></p><p><strong>partition_drop</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">过程定义：partition_drop（SCHEMANAME VARCHAR（64），TABLENAME VARCHAR（64），DELETE_BELOW_PARTITION_DATE VARCHAR（64））</span><br><span class="line">示例：CALL partition_drop（“zabbix”，“<span class="built_in">history</span>”，“20131216”）;</span><br><span class="line">SCHEMANAME =要在其中进行更改的DB模式</span><br><span class="line">TABLENAME =要删除PARTITIONNAME的表</span><br><span class="line">DELETE_BELOW_PARTITION_DATE =允许的最旧分区日期。所有旧版本的分区将被删除。格式为yyyymmdd。</span><br></pre></td></tr></table></figure></p><p><strong>partition_maintenance</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">过程定义：partition_maintenance（SCHEMA_NAME VARCHAR（32），TABLE_NAME VARCHAR（32），KEEP_DATA_DAYS INT，HOURLY_INTERVAL INT，CREATE_NEXT_INTERVALS INT）</span><br><span class="line">示例：CALL partition_maintenance（<span class="string">'zabbix'</span>，<span class="string">'history'</span>，28，24，14 ）;</span><br><span class="line">SCHEMA_NAME =要在其中进行更改的DB模式</span><br><span class="line">TABLE_NAME =要进行更改的表</span><br><span class="line">KEEP_DATA_DAYS =要保留的分区的最大天数。所有超过此天数的分区将被删除。</span><br><span class="line">HOURLY_INTERVAL =分区之间的小时间隔。例如，每日分区的值为24，小时分区的值为1。</span><br><span class="line">CREATE_NEXT_INTERVALS =提前创建的值的分区数。</span><br></pre></td></tr></table></figure></p><p><strong>partition_verify</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">过程定义：partition_verify（SCHEMANAME VARCHAR（64），TABLENAME VARCHAR（64），HOURLYINTERVAL INT（11））</span><br><span class="line">示例：CALL partition_verify（“zabbix”，“<span class="built_in">history</span>”）;</span><br><span class="line">SCHEMANAME =要在其中进行更改的DB模式</span><br><span class="line">TABLENAME =要检查分区的表</span><br><span class="line">HOURLY_INTERVAL =分区之间的小时间隔。例如，每日分区的值为24，小时分区的值为1。</span><br></pre></td></tr></table></figure></p><h3 id="分区表需求"><a href="#分区表需求" class="headerlink" title="分区表需求"></a>分区表需求</h3><ul><li><p>每月一个分区（24小时*31约等于720小时）</p></li><li><p>历史保存1年数据（12个月）</p></li><li><p>趋势保存2年数据（24个月）</p></li><li><p>未来周期12个（未来12个月）</p></li></ul><p>单独语句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; CALL partition_maintenance(<span class="string">'zabbix'</span>, <span class="string">'history'</span>, 24, 720, 12);</span><br><span class="line">mysql &gt; CALL partition_maintenance(zabbix, <span class="string">'trends'</span>, 48, 720, 12);</span><br></pre></td></tr></table></figure></p><p>解释：创建24个分区，其中未来月份12个，每个周期存储720小时数据</p><h3 id="添加以下存储过程，用来增加新的分区和删除旧的分区"><a href="#添加以下存储过程，用来增加新的分区和删除旧的分区" class="headerlink" title="添加以下存储过程，用来增加新的分区和删除旧的分区"></a>添加以下存储过程，用来增加新的分区和删除旧的分区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE `partition_maintenance_all`(SCHEMA_NAME VARCHAR(32))</span><br><span class="line">BEGIN</span><br><span class="line">    CALL partition_maintenance(SCHEMA_NAME, <span class="string">'history'</span>, 24, 720, 12);</span><br><span class="line">    CALL partition_maintenance(SCHEMA_NAME, <span class="string">'history_log'</span>, 24, 720, 12);</span><br><span class="line">    CALL partition_maintenance(SCHEMA_NAME, <span class="string">'history_str'</span>, 24, 720, 12);</span><br><span class="line">    CALL partition_maintenance(SCHEMA_NAME, <span class="string">'history_text'</span>, 24, 720, 12);</span><br><span class="line">    CALL partition_maintenance(SCHEMA_NAME, <span class="string">'history_uint'</span>, 24, 720, 12);</span><br><span class="line">    CALL partition_maintenance(SCHEMA_NAME, <span class="string">'trends'</span>, 48, 720, 12);</span><br><span class="line">    CALL partition_maintenance(SCHEMA_NAME, <span class="string">'trends_uint'</span>, 48, 720, 12);</span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>存储过程文件下载：<br><a href="https://raw.githubusercontent.com/Polaris0112/Ops-Tools/master/zabbix_installation/partition_call.sql" target="_blank" rel="noopener">partition_call.sql</a></p><p><a href="https://raw.githubusercontent.com/Polaris0112/Ops-Tools/master/zabbix_installation/partition_all.sql" target="_blank" rel="noopener">partition_all.sql</a></p><p>导入mysql数据库中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u zabbix -p zabbix &lt; partition_call.sql</span><br><span class="line"><span class="comment">#zabbix mysql password</span></span><br><span class="line"></span><br><span class="line">$ mysql -u zabbix -p zabbix &lt; partition_all.sql</span><br><span class="line"><span class="comment">#zabbix mysql password</span></span><br></pre></td></tr></table></figure></p><p>直接执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u zabbix -p zabbix -e <span class="string">"call partition_maintenance_all('zabbix');"</span></span><br><span class="line"><span class="comment">#zabbix mysql password</span></span><br></pre></td></tr></table></figure></p><p>执行后，观察分区表状态是否建立</p><h3 id="定时调用此存储过程"><a href="#定时调用此存储过程" class="headerlink" title="定时调用此存储过程"></a>定时调用此存储过程</h3><p>用来增加新的分区和删除旧的分区，注意定时调用的间隔不能小于每次创建的未来的分区周期，如上情况，<strong>最少12个月调用一次</strong></p><p>创建调用脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /root/shell/create_partition.sh</span><br><span class="line">/opt/tokudb/mysql/bin/mysql -uzabbix -pzabbix zabbix -e <span class="string">"call partition_maintenance_all('zabbix');"</span></span><br></pre></td></tr></table></figure></p><p>crontab -e 加入以下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 * */10 * sh /root/shell/create_partition.sh</span><br></pre></td></tr></table></figure></p><h3 id="关闭housekeeper功能"><a href="#关闭housekeeper功能" class="headerlink" title="关闭housekeeper功能"></a>关闭housekeeper功能</h3><p>在网页端的<strong>管理</strong> –&gt; <strong>一般</strong> ，页面右上下拉菜单选择<strong>管家</strong>，然后把开启内部管家的勾选去掉，再点击<strong>更新</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是从多个方面优化Zabbix性能，使其能监控大量服务器。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;由于计划日益增加的服务器数量，所以需要监控系统的性能可以
      
    
    </summary>
    
      <category term="Zabbix性能优化" scheme="http://yoursite.com/categories/Zabbix%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Zabbix" scheme="http://yoursite.com/tags/Zabbix/"/>
    
      <category term="Optimization" scheme="http://yoursite.com/tags/Optimization/"/>
    
  </entry>
  
</feed>
