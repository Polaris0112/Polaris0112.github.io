<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-23T07:13:59.102Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx正反向代理/负载均衡</title>
    <link href="http://yoursite.com/2018/02/23/nginx/"/>
    <id>http://yoursite.com/2018/02/23/nginx/</id>
    <published>2018-02-23T07:13:59.118Z</published>
    <updated>2018-02-23T07:13:59.102Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是Nginx配置正向代理、反向代理和负载均衡相关参数。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>正向代理是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</li></ul><p><img src="/images/nginx-forward-proxy.png" alt="nginx-forward-proxy"></p><ul><li>反向代理正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。</li></ul><p><img src="/images/nginx-reverse-proxy.png" alt="nginx-reverse-proxy"></p><ul><li>负载均衡：当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。</li></ul><p><img src="/images/nginx-balance.png" alt="nginx-balance.png"></p><h3 id="正向代理和反向代理区别"><a href="#正向代理和反向代理区别" class="headerlink" title="正向代理和反向代理区别"></a>正向代理和反向代理区别</h3><p>正向代理需要你主动设置代理服务器ip或者域名进行访问，由设置的服务器ip或者域名去获取访问内容并返回；而反向代理不需要你做任何设置，直接访问服务器真实ip或者域名，但是服务器内部会自动根据访问内容进行跳转及内容返回，你不知道它最终访问的是哪些机器。</p><p>正向代理是代理客户端，为客户端收发请求，使真实客户端对服务器不可见；而反向代理是代理服务器端，为服务器收发请求，使真实服务器对客户端不可见。</p><p>从上面的描述也能看得出来正向代理和反向代理最关键的两点区别：</p><ul><li><p>是否指定目标服务器</p></li><li><p>客户端是否要做设置</p></li></ul><p>下面用一张图来表示两者的差异：</p><p><img src="/images/nginx-proxy.png" alt="nginx-proxy"></p><p>正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。</p><p><strong>从用途上来区分：</strong></p><p>正向代理：正向代理用途是为了在防火墙内的局域网提供访问internet的途径。另外还可以使用缓冲特性减少网络使用率</p><p>反向代理：反向代理的用途是将防火墙后面的服务器提供给internet用户访问。同时还可以完成诸如负载均衡等功能</p><p><strong>从安全性来讲：</strong></p><p>正向代理：正向代理允许客户端通过它访问任意网站并且隐蔽客户端自身，因此你必须采取安全措施来确保仅为经过授权的客户端提供服务</p><p>反向代理：对外是透明的，访问者并不知道自己访问的是代理。对访问者而言，他以为访问的就是原始服务器</p><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>nginx.conf 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># 配置DNS解析IP地址，比如 Google Public DNS，以及超时时间（5秒）</span></span><br><span class="line">    resolver 8.8.8.8;    <span class="comment"># 必需</span></span><br><span class="line">    resolver_timeout 5s;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听端口</span></span><br><span class="line">    listen 8080;</span><br><span class="line"></span><br><span class="line">    access_log  /home/reistlin/logs/proxy.access.log;</span><br><span class="line">    error_log   /home/reistlin/logs/proxy.error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 配置正向代理参数</span></span><br><span class="line">        proxy_pass <span class="variable">$scheme</span>://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="comment"># 解决如果URL中带"."后Nginx 503错误</span></span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置缓存大小</span></span><br><span class="line">        proxy_buffers 256 4k;</span><br><span class="line">        <span class="comment"># 关闭磁盘缓存读写减少I/O</span></span><br><span class="line">        proxy_max_temp_file_size 0;</span><br><span class="line">         <span class="comment"># 代理连接超时时间</span></span><br><span class="line">        proxy_connect_timeout 30;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置代理服务器HTTP状态缓存时间</span></span><br><span class="line">        proxy_cache_valid 200 302 10m;</span><br><span class="line">        proxy_cache_valid 301 1h;</span><br><span class="line">        proxy_cache_valid any 1m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li><p>配置 nginx 正向代理服务，一般是配置到一个 server 块中。注意，在该 server 块中，不要出现 server_name 指令，即不要设置虚拟主机的名称和 IP；</p></li><li><p>resolver 是必需的，如果没有该指令， nginx 无法处理接收到的域名；</p></li><li><p>nginx 代理服务不支持正向代理 HTTPS 站点；</p></li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>nginx.conf 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">upstream webServer01 &#123;</span><br><span class="line">    server 127.0.0.1:3001;</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream webServer02 &#123;</span><br><span class="line">    server 127.0.0.1:3002;</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.test01.com;</span><br><span class="line">    <span class="comment">#access_log /var/log/nginx/test01.log;</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host  <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">        proxy_pass       http://webServer01;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.test02.com;</span><br><span class="line">    <span class="comment">#access_log /var/log/nginx/test02.log;</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host  <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">        proxy_pass       http://webServer02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>Nginx负载均衡是通过upstream模块来实现的，内置实现了三种负载策略，配置还是比较简单的。<a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="noopener">官网负载均衡配置说明</a></p><ul><li>轮循（默认）<br>Nginx根据请求次数，将每个请求均匀分配到每台服务器</li></ul><ul><li>最少连接<br>将请求分配给连接数最少的服务器。Nginx会统计哪些服务器的连接数最少。</li></ul><ul><li>IP Hash<br>绑定处理请求的服务器。第一次请求时，根据该客户端的IP算出一个HASH值，将请求分配到集群中的某一台服务器上。后面该客户端的所有请求，都将通过HASH算法，找到之前处理这台客户端请求的服务器，然后将请求交给它来处理。</li></ul><h3 id="轮循"><a href="#轮循" class="headerlink" title="轮循"></a>轮循</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line"></span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080;</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        server example.com:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>proxy_pass <a href="http://tomcats：表示将所有请求转发到tomcats服务器组中配置的某一台服务器上。" target="_blank" rel="noopener">http://tomcats：表示将所有请求转发到tomcats服务器组中配置的某一台服务器上。</a></p></li><li><p>upstream模块：配置反向代理服务器组，Nginx会根据配置，将请求分发给组里的某一台服务器。tomcats是服务器组的名称。</p></li><li><p>upstream模块下的server指令：配置处理请求的服务器IP或域名，端口可选，不配置默认使用80端口。通过上面的配置，Nginx默认将请求依次分配给100，101，102来处理，可以通过修改下面这些参数来改变默认的分配策略：</p><ul><li><p>weight </p><p>默认为1，将请求平均分配给每台server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2;  <span class="comment"># 2/6次</span></span><br><span class="line">    server 192.168.0.101:8080 weight=3;  <span class="comment"># 3/6次</span></span><br><span class="line">    server 192.168.0.102:8080 weight=1;  <span class="comment"># 1/6次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例配置，表示6次请求中，100分配2次，101分配3次，102分配1次</p></li><li><p>max_fails </p><p>默认为1。某台Server允许请求失败的次数，超过最大次数后，在fail_timeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxy_next_upstream, fastcgi_next_upstream, uwsgi_next_upstream, scgi_next_upstream, and memcached_next_upstream指令来处理这次错误的请求。</p></li><li><p>fail_timeout </p><p>默认为10秒。某台Server达到max_fails次失败请求后，在fail_timeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2 max_fails=3 fail_timeout=15;</span><br><span class="line">    server 192.168.0.101:8080 weight=3;</span><br><span class="line">    server 192.168.0.102:8080 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>   192.168.0.100这台机器，如果有3次请求失败，nginx在15秒内，不会将新的请求分配给它。</p><ul><li><p>backup </p><p>备份机，所有服务器挂了之后才会生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2 max_fails=3 fail_timeout=15;</span><br><span class="line">    server 192.168.0.101:8080 weight=3;</span><br><span class="line"></span><br><span class="line">    server 192.168.0.102:8080 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在100和101都挂了之前，102为不可用状态，不会将请求分配给它。只有当100和101都挂了，102才会被启用。</p></li><li><p>down </p><p>标识某一台server不可用。可能能通过某些参数动态的激活它吧，要不真没啥用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2 max_fails=3 fail_timeout=15;</span><br><span class="line"></span><br><span class="line">    server 192.168.0.101:8080 down;</span><br><span class="line"></span><br><span class="line">    server 192.168.0.102:8080 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>   表示101这台Server为无效状态，不会将请求分配给它。</p><ul><li><p>max_conns </p><p>限制分配给某台Server处理的最大连接数量，超过这个数量，将不会分配新的连接给它。默认为0，表示不限制。注意：1.5.9之后的版本才有这个配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 max_conns=1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>   表示最多给100这台Server分配1000个请求，如果这台Server正在处理1000个请求，nginx将不会分配新的请求给到它。假如有一个请求处理完了，还剩下999个请求在处理，这时nginx也会将新的请求分配给它。</p><ul><li><p>resolve </p><p>将server指令配置的域名，指定域名解析服务器。需要在http模块下配置resolver指令，指定域名解析服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    resolver 10.0.0.1;</span><br><span class="line"></span><br><span class="line">    upstream u &#123;</span><br><span class="line">        zone ...;</span><br><span class="line">        ...</span><br><span class="line">        server example.com resolve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示example.com域名，由10.0.0.1服务器来负责解析。 </p><p>upstream模块server指令的其它参数和详细配置说明，请参考<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#server" target="_blank" rel="noopener">官方文档</a>。</p></li></ul><h2 id="第三方负载策略"><a href="#第三方负载策略" class="headerlink" title="第三方负载策略"></a>第三方负载策略</h2><ul><li><p>fair</p><p>根据服务器的响应时间来分配请求，响应时间短的优先分配，即负载压力小的优先会分配。</p><p>由于fair模块是第三方提供的，所以在编译nginx源码的时候，需要将fair添加到nginx模块中。</p><ul><li><p>下载fair模块源码 </p><p><a href="https://github.com/xyang0917/nginx-upstream-fair" target="_blank" rel="noopener">下载地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ wget https://github.com/xyang0917/nginx-upstream-fair/archive/master.zip</span><br><span class="line">$ unzip master.zip</span><br></pre></td></tr></table></figure><p>解压后的目录名为：nginx-upstream-fair-master</p></li><li><p>重新编译nginx，将fair模块添加到编译参数 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/nginx-nginx-1.10.0</span><br><span class="line">$ ./configure --prefix=/opt/nginx --add-module=/opt/nginx-upstream-fair-master</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>不要执行make install，这样会覆盖之前nginx的配置 </p></li><li><p>将新编译的nginx可执行程序拷贝到/opt/nginx/sbin/目录下，覆盖之前安装的nginx编译后的nginx执行程序，放在nginx源码的objs目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps -aux | grep nginx</span><br><span class="line">$ <span class="built_in">kill</span> -9 nginx进程ID  <span class="comment"># 停止nginx服务</span></span><br><span class="line">$ cp /opt/nginx-1.10.0/objs/nginx /opt/nginx/sbin/  <span class="comment"># 覆盖旧的nginx</span></span><br><span class="line">$ nginx <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>配置使用fair负载策略模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    fair;</span><br><span class="line">    server 192.168.0.100:8080;</span><br><span class="line">    server 192.168.0.101:8080;</span><br><span class="line">    server 192.168.0.102:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于采用fair负载策略，配置weigth参数改变负载权重将无效。</p></li></ul></li></ul><ul><li><p>url_hash</p><p>按请求url的hash结果来分配请求，使每个url定向到同一个后端服务器，服务器做缓存时比较有效。</p></li></ul><p>  1.7.2版本以后，url_hash模块已经集成到了nginx源码当中，不需要单独安装。之前的版本仍需要单独安装，<a href="https://github.com/evanmiller/nginx_upstream_hash" target="_blank" rel="noopener">下载地址</a></p><p>  安装方法和fair模块一样，先下载url_hash源码，然后重新编译nginx源码，将url_hash模块添加到编译配置参数当中，最后将编译后生成的nginx二进制文件替换之前安装的nginx二进制文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080;</span><br><span class="line">    server 192.168.0.101:8080;</span><br><span class="line">    server 192.168.0.102:8080;</span><br><span class="line">    <span class="built_in">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是Nginx配置正向代理、反向代理和负载均衡相关参数。&lt;/p&gt;
&lt;h2 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;正向代理是一个位于客户端和目标
      
    
    </summary>
    
      <category term="Nginx正反向代理/负载均衡" scheme="http://yoursite.com/categories/Nginx%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
      <category term="load-balance" scheme="http://yoursite.com/tags/load-balance/"/>
    
  </entry>
  
  <entry>
    <title>LVM创建/扩容/常用操作</title>
    <link href="http://yoursite.com/2018/02/23/lvm/"/>
    <id>http://yoursite.com/2018/02/23/lvm/</id>
    <published>2018-02-23T07:10:11.382Z</published>
    <updated>2018-02-23T07:10:11.355Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是LVM初始化和扩容等操作</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li><p>LVM是逻辑盘卷管理（Logical Volume Manager）的简称，它是Linux环境下对磁盘分区进行管理的一种机制，LVM是建立在硬盘和分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。LVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统。物理卷（physical volume）物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备（如RAID），是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。</p></li><li><p>物理卷：Physical Volume，简称PV，一个物理卷只不过是一个有LVM管理数据添加在里面的物理存储介质。要使用LVM系统，首先对要用于LVM的磁盘进行初始化，初始化的目的就是将磁盘或分区标识为LVM 的物理卷。使用pvcreate 命令可以将一个磁盘标记为 LVM 物理卷。</p></li><li><p>物理分区：Physical Extents，简称PE，LVM将每个物理卷分别叫做物理分区的可寻址存储单元，存储单元的大小通常为几MB。磁盘的开头部分为LVM元数据，之后从索引为零开始，每个物理分区的索引依次递增一，按顺序进行分配。</p></li><li><p>卷组：Volume Group，简称VG，物理卷可以组织为卷组。卷组可以由一个或多个物理卷组成，同时系统中可以有多个卷组。创建了卷组之后，该卷组（而不是磁盘）便是表示数据存储的实体。因此，尽管以前是将磁盘从一个系统移动到另一个系统，使用了 LVM 之后，会将卷组从一个系统移动到另一个系统。出于这种原因，通常在一个系统上创建多个卷组会比较方便。</p></li><li><p>逻辑分区：Logical Extents，简称LE，逻辑卷的基本分配单元称为逻辑分区。逻辑分区映射到物理分区，因此，如果物理分区的尺寸小为4MB，那么逻辑分区的尺寸也将为4MB。逻辑卷的大小取决于所分配的逻辑分区数量。</p></li></ul><p><img src="/images/lvm-concept.png" alt="lvm-concept"></p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>CentOS 7/RHEL 7</li></ul><p>建议在安装系统的时候就选择好LVM分区，不然已经有数据的话再选择LVM需要格式化。</p><h2 id="对新增加的硬盘进行分区、格式化"><a href="#对新增加的硬盘进行分区、格式化" class="headerlink" title="对新增加的硬盘进行分区、格式化"></a>对新增加的硬盘进行分区、格式化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在CentOS/RHEL 7中使用</span></span><br><span class="line"></span><br><span class="line">$ fdisk /dev/sda　　　 </span><br><span class="line"><span class="comment">## 继续输入命令： </span></span><br><span class="line"><span class="comment">## p　　　　　　　查看已分区数量</span></span><br><span class="line"><span class="comment">## n　　　　　　　新增加一个分区 </span></span><br><span class="line"><span class="comment">## p　　　　　　　分区类型我们选择为主分区 </span></span><br><span class="line"><span class="comment">##　　　　　　分区号按照默认选择（已经存在的会顺着按下一个分区号生成）</span></span><br><span class="line"><span class="comment">## 回车　　　　　　默认（起始扇区） </span></span><br><span class="line"><span class="comment">## 回车　　　　　　默认（结束扇区） </span></span><br><span class="line"><span class="comment">## t　　　　　　　修改分区类型 </span></span><br><span class="line"><span class="comment">##　　　　　　选分区3 </span></span><br><span class="line"><span class="comment">## 8e　　　　　　修改为LVM（8e就是LVM） </span></span><br><span class="line"><span class="comment">## w　　　　　　写分区表 </span></span><br><span class="line"><span class="comment">## q　　　　　　完成，退出fdisk命令 </span></span><br><span class="line"><span class="comment">##　　系统提示重启。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 开机后，格式化，等待一会儿： </span></span><br><span class="line">$ mkfs.ext3 /dev/sda3</span><br></pre></td></tr></table></figure><h2 id="添加新LVM到已有的LVM组，实现扩容"><a href="#添加新LVM到已有的LVM组，实现扩容" class="headerlink" title="添加新LVM到已有的LVM组，实现扩容"></a>添加新LVM到已有的LVM组，实现扩容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ pvcreate /dev/sda3　　　                              <span class="comment">#创建pv</span></span><br><span class="line"></span><br><span class="line">$ pvdisplay                                             <span class="comment">#查看创建好的pv信息</span></span><br><span class="line"></span><br><span class="line">$ vgdisplay                                             <span class="comment">#查看vg信息，记录需要扩容的vg名称</span></span><br><span class="line"></span><br><span class="line">$ vgcreate vg_test /dev/sdb3                            <span class="comment">#没有则创建</span></span><br><span class="line"></span><br><span class="line">$ vgextend vg_test /dev/sda3                            <span class="comment">#将初始化过的分区加入到虚拟卷组vg_test</span></span><br><span class="line"></span><br><span class="line">$ lvextend -l +20G /dev/mapper/vg_test-root             <span class="comment">#扩展已有卷的容量</span></span><br><span class="line"></span><br><span class="line">$ lvextend -l +100%FREE /dev/mapper/vg_test-root        <span class="comment">#把所有空余的空间全部加入到卷组</span></span><br><span class="line"></span><br><span class="line">$ lvcreate -L 15G -n lv_test vg_test                    <span class="comment">#若初始化，则创建LV</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## CentOS7使用以下命令,进行文件系统的真正扩容</span></span><br><span class="line">$ xfs_growfs /dev/mapper/vg_test-root</span><br><span class="line"></span><br><span class="line"><span class="comment">## CentOS6使用以下命令,进行文件系统的真正扩容</span></span><br><span class="line">$ resize2fs /dev/mapper/vg_test-root</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看新的磁盘空间</span></span><br><span class="line">$ df -h</span><br></pre></td></tr></table></figure><h2 id="LVM常用命令"><a href="#LVM常用命令" class="headerlink" title="LVM常用命令"></a>LVM常用命令</h2><ul><li>lvremove : 移除逻辑卷</li></ul><p>lvremove /dev/vgname/lvname     </p><p>如果该lv已经mount了，lvremove不能使用，必须unmount后才可以使用。</p><ul><li>lvcreate ：创建逻辑卷</li></ul><p>lvcreate –name vol_01  -L  10G vgname</p><p>-L ：指定逻辑卷大小，单位可以是”kKmMgGtT”</p><ul><li>lvextend -L +10G  /dev/vgname/lvname</li></ul><p>给lvname添加10G的容量</p><p>另外一种写法：</p><p>lvcreate –size 40GB –name vol vgname</p><ul><li>vgcreate：创建卷组vg</li></ul><p>vgcreate vg-test /dev/sdb1 /dev/sdb2</p><ul><li>vgremove：强制删除vg，及时vg下有lv，也会被删除</li></ul><p>vgremove vgname -f </p><ul><li>vgreduce ：移除物理卷</li></ul><p>my_volume_group /dev/hda1</p><p>vgreduce –removemissing  vgname </p><ul><li>vgextend ：扩容物理卷</li></ul><p>vgextend vgname   /dev/sdb1(物理卷位置)</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>为了系统启动是自动加载文件系统，需要在 /etc/fstab 添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/vg_test/lv_test   /opt/<span class="built_in">test</span> ext3 defaults 1 2</span><br></pre></td></tr></table></figure><p>有时可能因为逻辑卷为打开而无法启动系统</p><p>以下是系统启动LVM的过程图：</p><p><img src="/images/lvm-run.png" alt="lvm-run"></p><h2 id="自动化脚本例子"><a href="#自动化脚本例子" class="headerlink" title="自动化脚本例子"></a>自动化脚本例子</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Usage: Automatic expand lv with LVM managed disk</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  Setp 1: Add Hard Disk or Storage to Computing unit</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Setp 2: Execute this script with root privilege</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Setp 3: Mind info of this script execution result</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Open the refrigerator door, get the shell script execution environment ready</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Put the elephant into the refrigerator, how the shell scripts works</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Close the refrigerator door, check out the result of execution</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Simetimes, we have to pull new elephant or elephant dung out here, <span class="built_in">unset</span> variables of shell script</span></span><br><span class="line"> </span><br><span class="line">function check_execution_result()&#123;</span><br><span class="line">        if [[ ! -z $RETVAL ]]; then</span><br><span class="line">                unset RETVAL</span><br><span class="line">        fi</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        if [[ $RETVAL -ne 0 ]]; then</span><br><span class="line">                echo execution failed! </span><br><span class="line">                exit $RETVAL</span><br><span class="line">        else</span><br><span class="line">                echo execution successfully! </span><br><span class="line">        fi</span><br><span class="line">        unset RETVAL</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> lsblk --scsi</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lsblk --all</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fd0               2:0    1    4K  0 disk </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sda               8:0    0   40G  0 disk </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ├─sda1            8:1    0  500M  0 part /boot</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> └─sda2            8:2    0 39.5G  0 part </span></span><br><span class="line"><span class="meta">#</span><span class="bash">   ├─centos-swap 253:0    0  3.9G  0 lvm  [SWAP]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   └─centos-root 253:1    0 35.6G  0 lvm  /</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sdb               8:16   0   16G  0 disk </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sr0              11:0    1  6.6G  0 rom  </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Show present scsi disk online</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Q: Why use <span class="string">"xargs"</span> here?</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> A: Convert the text from multi-line single-column into single-line multi-column, <span class="keyword">for</span> sed operation</span></span><br><span class="line">ONLINE_SCSI_DISK_PRESENT=$(lsblk --all | grep disk | grep -v fd | awk '&#123;print $1&#125;' | xargs)</span><br><span class="line"><span class="meta">#</span><span class="bash"> TODO</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For execution this script beyond twice</span></span><br><span class="line">ONLINE_SCSI_DISK_PRESENT=sda</span><br><span class="line"><span class="meta">#</span><span class="bash"> Find new scsi disk online</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TODO figure it out why there is host0? </span></span><br><span class="line">echo "- - -" &gt;/sys/class/scsi_host/host0/scan</span><br><span class="line">echo "- - -" &gt;/sys/class/scsi_host/host1/scan</span><br><span class="line">echo "- - -" &gt;/sys/class/scsi_host/host2/scan</span><br><span class="line"><span class="meta">#</span><span class="bash"> Show new added scsi disk online</span></span><br><span class="line">ONLINE_SCSI_DISK_NEWADD=$(lsblk --all | grep disk | grep -v fd | awk '&#123;print $1&#125;' | xargs echo | sed "s/$ONLINE_SCSI_DISK_PRESENT//g")</span><br><span class="line"><span class="meta">#</span><span class="bash"> Construct disk file with full path</span></span><br><span class="line">echo New Added SCSI Disk: $ONLINE_SCSI_DISK_NEWADD</span><br><span class="line"><span class="meta">#</span><span class="bash"> Get VG Name</span></span><br><span class="line">VG_Name=$(vgdisplay | grep 'VG Name' | awk '&#123;print $NF&#125;')</span><br><span class="line">VG_PATH_TO_EXTEND=$(lvdisplay | grep 'LV Path' | awk '&#123;print $NF&#125;' | grep root)</span><br><span class="line">for BLOCK in $ONLINE_SCSI_DISK_NEWADD; do</span><br><span class="line">    ONLINE_SCSI_DISK_NEWADD_FILENAME="/dev/"$BLOCK</span><br><span class="line">    # end-of-file contents and eof mark must start row1</span><br><span class="line">    fdisk $ONLINE_SCSI_DISK_NEWADD_FILENAME &gt;/dev/null 2&gt;&amp;1&lt;&lt;eof</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line">1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">t</span><br><span class="line">8e</span><br><span class="line">w</span><br><span class="line">eof</span><br><span class="line">    check_execution_result</span><br><span class="line">    LVM_OPERATION_DISK_FILENAME=$ONLINE_SCSI_DISK_NEWADD_FILENAME"1"</span><br><span class="line">    pvcreate $LVM_OPERATION_DISK_FILENAME &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    check_execution_result</span><br><span class="line">    vgextend $VG_Name $LVM_OPERATION_DISK_FILENAME &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    check_execution_result</span><br><span class="line">    lvresize -l +100%FREE $VG_PATH_TO_EXTEND &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    check_execution_result</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> resize2fs - ext2/ext3/ext4 file system resizer</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> xfs_growfs, xfs_info - expand an XFS filesystem</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">[root@hlc7172009 ~]<span class="comment"># resize2fs /dev/mapper/centos-root</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">resize2fs 1.42.9 (28-Dec-2013)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">resize2fs: Bad magic number <span class="keyword">in</span> super-block <span class="keyword">while</span> trying to open /dev/mapper/centos-root</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Couldn<span class="string">'t find valid filesystem superblock.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@hlc7172009 ~]<span class="comment">#</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">[root@hlc7172009 ~]<span class="comment"># xfs_growfs $VG_PATH_TO_EXTEND</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">meta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=2334208 blks</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         =                       sectsz=512   attr=2, projid32bit=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         =                       crc=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">data     =                       bsize=4096   blocks=9336832, imaxpct=25</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         =                       sunit=0      swidth=0 blks</span></span><br><span class="line"><span class="meta">#</span><span class="bash">naming   =version 2              bsize=4096   ascii-ci=0 ftype=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">log</span>      =internal               bsize=4096   blocks=4559, version=2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">realtime =none                   extsz=4096   blocks=0, rtextents=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">data blocks changed from 9336832 to 13530112</span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@hlc7172009 ~]<span class="comment">#</span></span></span><br><span class="line"> </span><br><span class="line">    # Check xfs_info if is installed </span><br><span class="line">    which xfs_info &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -ne 0 ]]; then</span><br><span class="line">        yum install xfsprogs -y &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    fi</span><br><span class="line">    # end Check xfs_info if is installed</span><br><span class="line"> </span><br><span class="line">    # Check VG_PATH_TO_EXTEND if is xfs filesystem</span><br><span class="line">    xfs_info $VG_PATH_TO_EXTEND &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -ne 0 ]]; then</span><br><span class="line">        # is not xfs</span><br><span class="line">        VG_PATH_TO_EXTEND_IS_NOT_XFS=0</span><br><span class="line">    else </span><br><span class="line">        # is xfs</span><br><span class="line">        VG_PATH_TO_EXTEND_IS_NOT_XFS=1</span><br><span class="line">    fi</span><br><span class="line">    # end Check VG_PATH_TO_EXTEND if is xfs filesystem</span><br><span class="line"> </span><br><span class="line">    # TODO CentOS7 default filesystem is xfs, so we can check it out by OS if is CentOS7</span><br><span class="line"> </span><br><span class="line">    if [[ $VG_PATH_TO_EXTEND_IS_NOT_XFS ]]; then</span><br><span class="line">        # is xfs</span><br><span class="line">        xfs_growfs $VG_PATH_TO_EXTEND &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    else</span><br><span class="line">        # is not xfs</span><br><span class="line">        resize2fs $VG_PATH_TO_EXTEND &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    fi</span><br><span class="line">    check_execution_result</span><br><span class="line">    df -h</span><br><span class="line">    lsblk --all</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>添加磁盘前：</p><p><img src="/images/lvm-before.jpg" alt="lvm-before"></p><p>添加磁盘后运行脚本后：</p><p><img src="/images/lvm-after.jpg" alt="lvm-after"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是LVM初始化和扩容等操作&lt;/p&gt;
&lt;h2 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LVM是逻辑盘卷管理（Logical Volume 
      
    
    </summary>
    
      <category term="LVM使用" scheme="http://yoursite.com/categories/LVM%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="lvm" scheme="http://yoursite.com/tags/lvm/"/>
    
  </entry>
  
  <entry>
    <title>certbot安装/部分问题解决方案</title>
    <link href="http://yoursite.com/2018/02/23/certbot/"/>
    <id>http://yoursite.com/2018/02/23/certbot/</id>
    <published>2018-02-23T04:02:16.698Z</published>
    <updated>2018-02-23T04:02:16.680Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是Nginx + Certbot的安装过程以及在阿里云CentOS7上部署Certbot遇到的问题以及解决方法</p><h2 id="Using-Nginx-in-CentOS-RHEL-7"><a href="#Using-Nginx-in-CentOS-RHEL-7" class="headerlink" title="Using Nginx in CentOS/RHEL 7"></a>Using Nginx in CentOS/RHEL 7</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Certbot安装包已经包含在EPEL(Extra Packages for Enterprise Linux)源中，所以如果安装Certbot需要先安装<a href="https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F" target="_blank" rel="noopener">EPEL源</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在CentOS/RHEL 7中使用</span></span><br><span class="line"></span><br><span class="line">$ yum -y install yum-utils</span><br><span class="line">$ yum-config-manager --<span class="built_in">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br><span class="line">$ yum install certbot-nginx</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>由于Certbot已经有nginx插件，所以安装证书只需要运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot --nginx</span><br></pre></td></tr></table></figure><p>运行后按照提示输入指定的参数值后就会自动配置nginx并启用，若需要自定义nginx配置文件则可以先使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot --nginx certonly</span><br></pre></td></tr></table></figure><p>更多请参考<a href="https://certbot.eff.org/docs" target="_blank" rel="noopener">文档</a></p><h3 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h3><p>根据官方文档上的说明，Certbot的证书有效期为90天，有效期少于30天才能更新一次，大于30天不用更新(不能更新)</p><p>测试更新命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure><p>若上述命令测试通过(无报错)，则可以把以下命令写入到<a href="http://www.unixgeeks.org/security/newbie/unix/cron-1.html" target="_blank" rel="noopener">cron job</a>或者<a href="https://wiki.archlinux.org/index.php/Systemd/Timers" target="_blank" rel="noopener">systemd timer</a>中，就可以实现长期自动更新(官方推荐是一天执行两次确保证书能及时更新)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ certbot renew</span><br></pre></td></tr></table></figure><p>官方crontab例子参考(命令会在正午和午夜进行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0,12 * * * python -c <span class="string">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure><h2 id="其他安装方法"><a href="#其他安装方法" class="headerlink" title="其他安装方法"></a>其他安装方法</h2><h3 id="使用certbot-auto脚本安装Certbot"><a href="#使用certbot-auto脚本安装Certbot" class="headerlink" title="使用certbot-auto脚本安装Certbot"></a>使用certbot-auto脚本安装Certbot</h3><p>certbot-auto脚本会安装Certbot，并且能够自己解决RPM包和Python包依赖问题，同样非常方便。同时certbot-auto是对certbot的封装，即certbot-auto提供certbot的所有功能。在使用此方法安装Certbot后，运行certbot-auto命令获取证书。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 1) 获取certbot-auto脚本</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.eff.org/certbot-auto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2) 使certbot-auto脚本可执行</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod a+x ./certbot-auto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 3) 运行certbot-auto，安装Certbot</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./certbot-auto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 4) 获取Lets Encrypt证书，certbot-auto是对脚本certbot的封装，并且已经更新到了最新版本，所以使用此脚本获取证书</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./certbot-auto</span></span><br></pre></td></tr></table></figure><h3 id="使用pip安装Certbot"><a href="#使用pip安装Certbot" class="headerlink" title="使用pip安装Certbot"></a>使用pip安装Certbot</h3><p>此种方法比较简单，最好先创建一个Python虚拟环境，然后再安装Certbot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> 1) 安装虚拟环境软件包(针对于Python2.7)</span><br><span class="line">$ sudo yum install python-virtualenv</span><br><span class="line"></span><br><span class="line"> 2) 创建虚拟环境</span><br><span class="line">$ sudo virtualenv /usr/<span class="built_in">local</span>/python-certbot</span><br><span class="line"></span><br><span class="line"> 3) 激活虚拟环境</span><br><span class="line">$ <span class="built_in">source</span> /usr/<span class="built_in">local</span>/python-certbot/bin/activate</span><br><span class="line"></span><br><span class="line"> 4) 首先更新pip</span><br><span class="line">$ pip install --upgrade pip</span><br><span class="line"></span><br><span class="line"> 5) 安装Certbot</span><br><span class="line">$ pip install certbot</span><br><span class="line"></span><br><span class="line"> 6) 安装Certbot Apache插件</span><br><span class="line">$ pip install certbot-apache</span><br><span class="line"></span><br><span class="line">或者安装Certbot Nginx插件：</span><br><span class="line">$ pip install certbot-nginx</span><br><span class="line"></span><br><span class="line"> 7) 在安装Certbot Apache插件时，如提示如下错误：</span><br><span class="line">OSError: ctypes.util.find_library() did not manage to locate a library called <span class="string">'augeas'</span></span><br><span class="line"></span><br><span class="line">那是因为缺少augeas库文件，安装augeas库文件：</span><br><span class="line">$ sudo yum install augeas-libs</span><br><span class="line"></span><br><span class="line">然后就能成功安装Certbot Apache插件。</span><br><span class="line"></span><br><span class="line"> 8) 获取Lets Encrypt证书，同时配置Apache服务器</span><br><span class="line">$ sudo certbot --apache</span><br><span class="line"></span><br><span class="line">或者，同时配置Nginx服务器</span><br><span class="line">$ sudo certbot --nginx</span><br></pre></td></tr></table></figure><h2 id="在阿里云CentOS7上部署Certbot遇到的坑以及解决方法"><a href="#在阿里云CentOS7上部署Certbot遇到的坑以及解决方法" class="headerlink" title="在阿里云CentOS7上部署Certbot遇到的坑以及解决方法"></a>在阿里云CentOS7上部署Certbot遇到的坑以及解决方法</h2><p><strong>报错1</strong>：ImportError: No module named ‘requests.packages.urllib3’ (感觉是阿里云的centos7镜像本身python包的问题，因为直接import requests都会报错)</p><p>解决方法：更改/usr/lib/python2.7/site-packages/requests/exceptions.py模块导入部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把/usr/lib/python2.7/site-packages/requests/exceptions.py 传入包的部分</span></span><br><span class="line">from .packages.urllib3.exceptions import HTTPError as BaseHTTPError</span><br><span class="line"><span class="comment">#改为</span></span><br><span class="line">from urllib3.exceptions import HTTPError as BaseHTTPError</span><br></pre></td></tr></table></figure><p><strong>报错2</strong>：ImportError: cannot import name UnrewindableBodyError</p><p>解决方法： 重新安装对应版本的urllib3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#报错</span></span><br><span class="line">pkg_resources.DistributionNotFound: The <span class="string">'urllib3&lt;1.22,&gt;=1.21.1'</span> distribution was not found and is required by requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决方法：</span></span><br><span class="line">$ pip install urllib3==1.21.1</span><br></pre></td></tr></table></figure><p><strong>报错3</strong>：pkg_resources.ContextualVersionConflict: (idna 2.6 (/usr/lib/python2.7/site-packages), Requirement.parse(‘idna<2.6,>=2.5’), set([‘requests’]))</2.6,></p><p>解决方法：先检查pip freeze|grep pyOpenSSL版本(需要2.5~2.6之间)，理论上都要根据报错的版本进行安装，不符合则安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install idna==2.5</span><br></pre></td></tr></table></figure><p><strong>报错4</strong>：ImportError: ‘pyOpenSSL’ module missing required functionality. Try upgrading to v0.14 or newer.</p><p>解决方法：这个是yum下的openssl版本过低</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://mirror.switch.ch/pool/4/mirror/centos/7.4.1708/cloud/x86_64/openstack-ocata/common/pyOpenSSL-0.15.1-1.el7.noarch.rpm</span><br><span class="line">$ rpm -Uvh pyOpenSSL-0.15.1-1.el7.noarch.rpm</span><br><span class="line"><span class="comment">#rpm -qa|grep pyOpenSSL</span></span><br><span class="line"><span class="comment">#pyOpenSSL-0.15.1-1.el7.noarch</span></span><br></pre></td></tr></table></figure><p><strong>报错5</strong>：AttributeError: ‘module’ object has no attribute ‘SSL_ST_INIT’</p><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pyOpenSSL==16.2.0</span><br></pre></td></tr></table></figure><h2 id="迁移https证书过程备注："><a href="#迁移https证书过程备注：" class="headerlink" title="迁移https证书过程备注："></a>迁移https证书过程备注：</h2><ul><li><p>复制<code>/etc/letsencrypt/archive</code>对应两个域名的文件夹到新机器上</p></li><li><p>复制<code>/etc/letsencrypt/live</code>对应两个域名的文件夹到新机器上</p></li><li><p>在新机器上的<code>/etc/letsencrypt/renewal/</code>目录下拷贝测试conf作为旧域名的新配置文件，[renewalparams]以下的参数不变，修改其余路径相关对应域名即可</p></li><li><p>添加<code>nginx/conf.d/</code>对应下的配置文件，注意配置<code>ssl_certificate</code>和<code>ssl_certificate_key</code></p></li></ul><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>以下是Certbot自动生成的nginx配置文件，把http访问的域名都会转到https</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  <span class="built_in">test</span>-certbot.xxx.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$scheme</span> != <span class="string">"https"</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125; <span class="comment"># managed by Certbot</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是Nginx + Certbot的安装过程以及在阿里云CentOS7上部署Certbot遇到的问题以及解决方法&lt;/p&gt;
&lt;h2 id=&quot;Using-Nginx-in-CentOS-RHEL-7&quot;&gt;&lt;a href=&quot;#Using-Nginx-in-CentOS-R
      
    
    </summary>
    
      <category term="certbot使用" scheme="http://yoursite.com/categories/certbot%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="certbot" scheme="http://yoursite.com/tags/certbot/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
</feed>
