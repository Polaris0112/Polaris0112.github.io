<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-24T16:39:08.020Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jayden</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB复制集部署</title>
    <link href="http://yoursite.com/2018/02/24/mongodb-replset/"/>
    <id>http://yoursite.com/2018/02/24/mongodb-replset/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2018-02-24T16:39:08.020Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是MongoDB复制集部署全过程,有关MongoDB简介、安装以及配置文件参数说明,请看回上一个帖子<a href="https://polaris0112.github.io/2018/02/24/mongodb-single/" target="_blank" rel="noopener">MongoDB单实例部署</a></p><p>以下就直接介绍复制集以及部署过程</p><h2 id="MongoDB复制集简介"><a href="#MongoDB复制集简介" class="headerlink" title="MongoDB复制集简介"></a>MongoDB复制集简介</h2><p>   Mongodb复制集由一组Mongod实例（进程）组成，包含一个Primary节点和多个Secondary节点，Mongodb Driver（客户端）的所有数据都写入Primary，Secondary从Primary同步写入的数据，以保持复制集内所有成员存储相同的数据集，提供数据的高可用。更多关于副本集的介绍请见<a href="https://docs.mongodb.com/manual/replication/" target="_blank" rel="noopener">官网</a>。</p><p>   下图（图片源于Mongodb官方文档）是一个典型的Mongdb复制集，包含一个Primary节点和2个Secondary节点。</p><p><img src="/images/mongodb-replication.png" alt="mongodb-replication"></p><h2 id="复制集-副本集-处理数据过程"><a href="#复制集-副本集-处理数据过程" class="headerlink" title="复制集(副本集)处理数据过程"></a>复制集(副本集)处理数据过程</h2><p>副本集中数据同步过程：Primary节点写入数据，Secondary通过读取Primary的oplog得到复制信息，开始复制数据并且将复制信息写入到自己的oplog。如果某个操作失败，则备份节点停止从当前数据源复制数据。如果某个备份节点由于某些原因挂掉了，当重新启动后，就会自动从oplog的最后一个操作开始同步，同步完成后，将信息写入自己的oplog，由于复制操作是先复制数据，复制完成后再写入oplog，有可能相同的操作会同步两份，不过MongoDB在设计之初就考虑到这个问题，将oplog的同一个操作执行多次，与执行一次的效果是一样的。简单的说就是：</p><p>当Primary节点完成数据操作后，Secondary会做出一系列的动作保证数据的同步：<br>1：检查自己local库的oplog.rs集合找出最近的时间戳。<br>2：检查Primary节点local库oplog.rs集合，找出大于此时间戳的记录。<br>3：将找到的记录插入到自己的oplog.rs集合中，并执行这些操作。</p><p>副本集的同步和主从同步一样，都是异步同步的过程，不同的是副本集有个自动故障转移的功能。其原理是：slave端从primary端获取日志，然后在自己身上完全顺序的执行日志所记录的各种操作（该日志是不记录查询操作的），这个日志就是local数据 库中的oplog.rs表，默认在64位机器上这个表是比较大的，占磁盘大小的5%，oplog.rs的大小可以在启动参数中设 定：–oplogSize 1000,单位是M。</p><p>同期原理是，写操作发生在主库，从库同步主库的OpLog日志。</p><p><img src="/images/mongodb-replication-run.png" alt="mongodb-replication-run"></p><p>集群中没有特定的主库，主库是选举产生，如果主库down了，会再选举出一台主库。</p><p><img src="/images/mongodb-replication-fail.png" alt="mongodb-replication-fail"></p><p>注意：在副本集的环境中，要是所有的Secondary都宕机了，只剩下Primary。最后Primary会变成Secondary，不能提供服务。</p><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>Mongodb的安装和配置文件的说明不再重复，详细请看帖子<a href="https://polaris0112.github.io/2018/02/24/mongodb-single/" target="_blank" rel="noopener">《MongoDB单实例部署》</a></p><p>官方推荐最小的复制集是3节点集群，一主两从或者一主一从一仲裁(其中仲裁节点，即当参与选举的节点无法选出主节点时仲裁节点充当仲裁的作用，仲裁节点不存储数据。)</p><p>由于两从的配置除了ip设置不一样之外其他都一样的，所以这里例子示范的是一主一从一仲裁的搭建过程。</p><p>准备3台服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.100    <span class="comment">#主节点</span></span><br><span class="line">192.168.0.101    <span class="comment">#从节点</span></span><br><span class="line">192.168.0.102    <span class="comment">#仲裁节点</span></span><br></pre></td></tr></table></figure></p><p>均安装上MongoDB并配置好对应的目录(假设每个节点存放的路径都是在/data/db/mongodb/repl目录下的data、log和etc文件夹)</p><p>在主节点(192.168.0.100)编辑配置文件(/data/db/mongodb/repl/etc/config.yml)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: <span class="string">"file"</span></span><br><span class="line">   path: <span class="string">"/data/db/mongodb/repl/log/mongodb.log"</span></span><br><span class="line">   quiet: <span class="literal">true</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">   dbPath: <span class="string">"/data/db/mongodb/repl/data"</span></span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   engine: <span class="string">"wiredTiger"</span></span><br><span class="line">   wiredTiger:</span><br><span class="line">      engineConfig:</span><br><span class="line">          cacheSizeGB: 1</span><br><span class="line">          directoryForIndexes: <span class="literal">true</span></span><br><span class="line">      collectionConfig:</span><br><span class="line">          blockCompressor: zlib</span><br><span class="line">      indexConfig:</span><br><span class="line">          prefixCompression: <span class="literal">true</span></span><br><span class="line">operationProfiling:</span><br><span class="line">   slowOpThresholdMs: 100</span><br><span class="line">   mode: <span class="string">"slowOp"</span></span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">   pidFilePath: <span class="string">"/data/db/mongodb/repl/mongodb.pid"</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: <span class="string">"192.168.0.100"</span></span><br><span class="line">   port: 27100</span><br><span class="line">replication:</span><br><span class="line">  replSetName: <span class="string">"replSet"</span></span><br><span class="line"><span class="comment">##security:</span></span><br><span class="line"><span class="comment">##   authorization: enabled</span></span><br><span class="line"><span class="comment">##   keyFile: "/data/db/mongodb/repl/mongodb-keyfile"</span></span><br></pre></td></tr></table></figure></p><p>从节点(192.168.0.101)的配置文件(/data/db/mongodb/repl/etc/config.yml)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: <span class="string">"file"</span></span><br><span class="line">   path: <span class="string">"/data/db/mongodb/repl/log/mongodb.log"</span></span><br><span class="line">   quiet: <span class="literal">true</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">   dbPath: <span class="string">"/data/db/mongodb/repl/data"</span></span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   engine: <span class="string">"wiredTiger"</span></span><br><span class="line">   wiredTiger:</span><br><span class="line">      engineConfig:</span><br><span class="line">          cacheSizeGB: 1</span><br><span class="line">          directoryForIndexes: <span class="literal">true</span></span><br><span class="line">      collectionConfig:</span><br><span class="line">          blockCompressor: zlib</span><br><span class="line">      indexConfig:</span><br><span class="line">          prefixCompression: <span class="literal">true</span></span><br><span class="line">operationProfiling:</span><br><span class="line">   slowOpThresholdMs: 100</span><br><span class="line">   mode: <span class="string">"slowOp"</span></span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">   pidFilePath: <span class="string">"/data/db/mongodb/repl/mongodb.pid"</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: <span class="string">"192.168.0.101"</span></span><br><span class="line">   port: 27100</span><br><span class="line">replication:</span><br><span class="line">  replSetName: <span class="string">"replSet"</span></span><br><span class="line"><span class="comment">##security:</span></span><br><span class="line"><span class="comment">##   authorization: enabled</span></span><br><span class="line"><span class="comment">##   keyFile: "/data/db/mongodb/repl/mongodb-keyfile"</span></span><br></pre></td></tr></table></figure></p><p>仲裁节点(192.168.0.102)的配置文件(/data/db/mongodb/repl/etc/config.yml)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: <span class="string">"file"</span></span><br><span class="line">   path: <span class="string">"/data/db/mongodb/repl/log/mongodb.log"</span></span><br><span class="line">   quiet: <span class="literal">true</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">   dbPath: <span class="string">"/data/db/mongodb/repl/data"</span></span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   engine: <span class="string">"wiredTiger"</span></span><br><span class="line">   wiredTiger:</span><br><span class="line">      engineConfig:</span><br><span class="line">          cacheSizeGB: 1</span><br><span class="line">          directoryForIndexes: <span class="literal">true</span></span><br><span class="line">      collectionConfig:</span><br><span class="line">          blockCompressor: zlib</span><br><span class="line">      indexConfig:</span><br><span class="line">          prefixCompression: <span class="literal">true</span></span><br><span class="line">operationProfiling:</span><br><span class="line">   slowOpThresholdMs: 100</span><br><span class="line">   mode: <span class="string">"slowOp"</span></span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">   pidFilePath: <span class="string">"/data/db/mongodb/repl/mongodb.pid"</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: <span class="string">"192.168.0.102"</span></span><br><span class="line">   port: 27100</span><br><span class="line">replication:</span><br><span class="line">  replSetName: <span class="string">"replSet"</span></span><br><span class="line"><span class="comment">##security:</span></span><br><span class="line"><span class="comment">##   authorization: enabled</span></span><br><span class="line"><span class="comment">##   keyFile: "/data/db/mongodb/repl/mongodb-keyfile"</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong></p><p>1、每个配置文件看上去好像是一样，不过最重要的是要确定好端口有没有在本机被占用和绑定的IP是否确定为本机IP</p><p>2、每个配置文件最后3行是开启用户认证的，如果是生产环境必须先在无用户认证下先创建好管理员账号，然后把用户认证的参数打开(取消注释)</p><p>3、增加安全认证机制KeyFile，配置文件最后的<code>keyfile</code>是MongoDB集群认证的方式之一，确保集群中的成员都是信任的，生成keyfile命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rand -base64 745 &gt; /data/db/mongodb/repl/mongodb-keyfile</span><br><span class="line">$ chmod 600 /data/db/mongodb/repl/mongodb-keyfile</span><br><span class="line">$ chown mongod:mongod /data/db/mongodb/repl/mongodb-keyfile</span><br></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在所有节点中执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod -f /data/db/mongodb/repl/etc/config.yml</span><br></pre></td></tr></table></figure><p>如果发现启动错误或者失败，可以先从配置文件检查，再看文件目录，查看文件目录是否建好，用户和组的设置有没有设成mongod，再不行请查看mongodb日志文件排错。</p><p>若使用MongoDB3.0.9，有可能是mongodb-keyfile最后两个<code>=</code>符号需要删去才能启动(之前遇到过的坑，应该是版本的bug)</p><p>成功启动后，登陆到主节点中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ mongo 192.168.0.100:27100/admin</span><br><span class="line"></span><br><span class="line">&gt; config = &#123; _id:<span class="string">"replSet"</span>,</span><br><span class="line">             members:[</span><br><span class="line">                      &#123;_id:0,host:<span class="string">"192.168.0.100:27100"</span>,priority:100&#125;,</span><br><span class="line">                      &#123;_id:1,host:<span class="string">"192.168.0.101:27100"</span>,priority:99&#125;,</span><br><span class="line">                      &#123;_id:2,host:<span class="string">"192.168.0.102:27100"</span>,arbiterOnly:<span class="literal">true</span>&#125;</span><br><span class="line">  ]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; rs.initiate(config)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 稍等一会之后，按几下回车，应该就会见到命令行发生改变</span></span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">replSet:PRIMARY&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看rs集群状态</span></span><br><span class="line">replSet:PRIMARY&gt; rs.status()</span><br></pre></td></tr></table></figure><p>其中，刚才的配置里面<code>priority</code>的值越大，就会选取最大的那个做主节点。<code>arbiterOnly</code>则是定义这个节点是用于仲裁作用的。</p><p>副本集配置完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是MongoDB复制集部署全过程,有关MongoDB简介、安装以及配置文件参数说明,请看回上一个帖子&lt;a href=&quot;https://polaris0112.github.io/2018/02/24/mongodb-single/&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="MongoDB复制集部署" scheme="http://yoursite.com/categories/MongoDB%E5%A4%8D%E5%88%B6%E9%9B%86%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="NoSql" scheme="http://yoursite.com/tags/NoSql/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="ReplSet" scheme="http://yoursite.com/tags/ReplSet/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB Sharding集群部署</title>
    <link href="http://yoursite.com/2018/02/24/mongodb-shard/"/>
    <id>http://yoursite.com/2018/02/24/mongodb-shard/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2018-02-24T16:03:57.083Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是MongoDB分片+副本集集群部署</p><h2 id="MongoDB-Sharding简介"><a href="#MongoDB-Sharding简介" class="headerlink" title="MongoDB Sharding简介"></a>MongoDB Sharding简介</h2><p>  分片（sharding）是MongoDB用来将大型集合分割到不同服务器（或者说一个集群）上所采用的方法。尽管分片起源于关系型数据库分区，但MongoDB分片完全又是另一回事。和MySQL分区方案相比，MongoDB的最大区别在于它几乎能自动完成所有事情，只要告诉MongoDB要分配数据，它就能自动维护数据在不同服务器之间的均衡。 </p><h3 id="分片的目的"><a href="#分片的目的" class="headerlink" title="分片的目的"></a>分片的目的</h3><p>  高数据量和吞吐量的数据库应用会对单机的性能造成较大压力,大的查询量会将单机的CPU耗尽,大的数据量对单机的存储压力较大,最终会耗尽系统的内存而将压力转移到磁盘IO上。</p><p>  为了解决这些问题,有两个基本的方法: 垂直扩展和水平扩展。</p><p>  垂直扩展：增加更多的CPU和存储资源来扩展容量。</p><p>  水平扩展：将数据集分布在多个服务器上。水平扩展即分片。</p><h3 id="分片设计思想"><a href="#分片设计思想" class="headerlink" title="分片设计思想"></a>分片设计思想</h3><p>  分片为应对高吞吐量与大数据量提供了方法。使用分片减少了每个分片需要处理的请求数，因此，通过水平扩展，集群可以提高自己的存储容量和吞吐量。举例来说，当插入一条数据时，应用只需要访问存储这条数据的分片.</p><p>  使用分片减少了每个分片存储的数据。</p><p>  例如，如果数据库1tb的数据集，并有4个分片，然后每个分片可能仅持有256 GB的数据。如果有40个分片，那么每个切分可能只有25GB的数据。</p><p><img src="/images/mongodb-sharding-concept.png" alt="mongodb-sharding-concept"></p><h3 id="分片设计架构"><a href="#分片设计架构" class="headerlink" title="分片设计架构"></a>分片设计架构</h3><p><img src="/images/mongodb-sharding-struct.png" alt="mongodb-sharding-struct"></p><p><img src="/images/mongodb-sharding-pic.png" alt="mongodb-sharding-pic"></p><h2 id="分片部署"><a href="#分片部署" class="headerlink" title="分片部署"></a>分片部署</h2><ul><li>系统：CentOS 7/RHEL 7</li></ul><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>准备三台服务器做副本集，具体操作可以参考<a href="https://polaris0112.github.io/2018/02/24/mongodb-replset/" target="_blank" rel="noopener">《MongoDB复制集部署》</a></p><p>三个节点都用相同端口配置<br>Sharding port: 27100  27101 27102 27103<br>Config Server port: 27000<br>Mongos port: 30000</p><p><strong>请注意，配置文件会区别，不能完全照搬</strong></p><p>假设我们都已经安装好MongoDB，参考<a href="https://polaris0112.github.io/2018/02/24/mongodb-single/" target="_blank" rel="noopener">《MongoDB单实例部署》</a></p><p>这个例子我们是分4片，4个Sharding</p><p>先在192.168.0.100创建目录路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Sharding 0</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s0/data</span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s0/<span class="built_in">log</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s0/etc</span><br><span class="line"></span><br><span class="line"><span class="comment">## Sharding 1</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s1/data</span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s1/<span class="built_in">log</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s1/etc</span><br><span class="line"></span><br><span class="line"><span class="comment">## Sharding 2</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s2/data</span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s2/<span class="built_in">log</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s2/etc</span><br><span class="line"></span><br><span class="line"><span class="comment">## Sharding 3</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s3/data</span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s3/<span class="built_in">log</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/shard/s3/etc</span><br></pre></td></tr></table></figure></p><h2 id="编辑Sharding-0的配置文件-data-db-mongodb-shard-s0-etc-config-yml"><a href="#编辑Sharding-0的配置文件-data-db-mongodb-shard-s0-etc-config-yml" class="headerlink" title="编辑Sharding 0的配置文件(/data/db/mongodb/shard/s0/etc/config.yml)"></a>编辑Sharding 0的配置文件(/data/db/mongodb/shard/s0/etc/config.yml)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: <span class="string">"file"</span></span><br><span class="line">   path: <span class="string">"/data/db/mongodb/shard/s0/log/s0.log"</span></span><br><span class="line">   quiet: <span class="literal">true</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">   dbPath: <span class="string">"/data/db/mongodb/shard/s0/data"</span></span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   engine: <span class="string">"wiredTiger"</span></span><br><span class="line">   wiredTiger:</span><br><span class="line">      engineConfig:</span><br><span class="line">          cacheSizeGB: 1</span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">   pidFilePath: <span class="string">"/data/db/mongodb/shard/s0/shard.pid"</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: <span class="string">"192.168.0.100"</span></span><br><span class="line">   port: 27100</span><br><span class="line">sharding:</span><br><span class="line">   clusterRole: <span class="string">"shardsvr"</span></span><br><span class="line">replication:</span><br><span class="line">  replSetName: <span class="string">"s0"</span></span><br><span class="line"><span class="comment">##security:</span></span><br><span class="line"><span class="comment">##  authorization: enabled</span></span><br><span class="line"><span class="comment">##  keyFile: "/data/db/mongodb/mongodb-keyfile"</span></span><br></pre></td></tr></table></figure><p>参照以上的配置文件，修改<code>path</code>、<code>dbPath</code>、<code>pidFilePath</code>、<code>bindIp</code>、<code>port</code>、<code>replSetName</code>为对应的shard配置(sharding在同一节点上)</p><p>同理，副本集也要对应放置相同的sharding配置文件，然后启动该实例。</p><p>启动命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u mongod mongod -f /data/db/mongodb/shard/s0/etc/config.yml</span><br></pre></td></tr></table></figure></p><p>其他实例可以仿照这个启动命令进行启动</p><p>启动后，先配置每个分片的副本集，对应一个sharding一个副本集，副本集名为s0,s1,s2,s3</p><p>副本集详细配置请参考<a href="https://polaris0112.github.io/2018/02/24/mongodb-replset/" target="_blank" rel="noopener">《MongoDB复制集部署》</a></p><p>然后我们来创建分片中的config server。</p><p>先创建文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/db/mongodb/config/data</span><br><span class="line">$ mkdir -p /data/db/mongodb/config/<span class="built_in">log</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/config/etc</span><br></pre></td></tr></table></figure><p>创建配置文件(/data/db/mongodb/config/etc/config.yml)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: <span class="string">"file"</span></span><br><span class="line">   path: <span class="string">"/data/db/mongodb/config/log/config.log"</span></span><br><span class="line">   quiet: <span class="literal">true</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">   dbPath: <span class="string">"/data/db/mongodb/config/data"</span></span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   engine: <span class="string">"wiredTiger"</span></span><br><span class="line">   wiredTiger:</span><br><span class="line">      engineConfig:</span><br><span class="line">          cacheSizeGB: 1</span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">   pidFilePath: <span class="string">"/data/db/mongodb/config/config.pid"</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: <span class="string">"192.168.0.100"</span></span><br><span class="line">   port: 27000</span><br><span class="line">sharding:</span><br><span class="line">   clusterRole: <span class="string">"configsvr"</span></span><br><span class="line">replication:</span><br><span class="line">  replSetName: <span class="string">"cs"</span></span><br><span class="line"><span class="comment">##security:</span></span><br><span class="line"><span class="comment">##  authorization: enabled</span></span><br><span class="line"><span class="comment">##  keyFile: "/data/db/mongodb/mongodb-keyfile"</span></span><br></pre></td></tr></table></figure><p>同样地，在三个节点都创建对应的配置文件(IP地址需要修改为本机的IP)，并创建副本集。</p><p>启动实例并配置副本集<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod -f /data/db/mongodb/config/etc/config.yml</span><br></pre></td></tr></table></figure></p><p>创建mongos文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/db/mongodb/mongos/data</span><br><span class="line">$ mkdir -p /data/db/mongodb/mongos/<span class="built_in">log</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/mongos/etc</span><br></pre></td></tr></table></figure><p>创建mongos配置文件(/data/db/mongodb/mongos/etc/config.yml)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: <span class="string">"file"</span></span><br><span class="line">   path: <span class="string">"/data/db/mongodb/mongos/log/mongos.log"</span></span><br><span class="line">   quiet: <span class="literal">true</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">   logRotate: reopen</span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">   pidFilePath: <span class="string">"/data/db/mongodb/mongos/mongos.pid"</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: <span class="string">"192.168.0.100"</span></span><br><span class="line">   port: 30000</span><br><span class="line">sharding:</span><br><span class="line">   configDB: 192.168.0.100:27100,192.168.0.101:27100,192.168.0.102:27100</span><br><span class="line">   chunkSize: 64</span><br><span class="line"><span class="comment">##security:</span></span><br><span class="line"><span class="comment">##  authorization: enabled</span></span><br><span class="line"><span class="comment">##   keyFile: "/data/db/mongodb/mongodb-keyfile"</span></span><br></pre></td></tr></table></figure><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod -f /data/db/mongodb/mongos/etc/config.yml</span><br></pre></td></tr></table></figure><p>mongos作为整个分片集群的入口，不需要配置副本集，不过可以配置多个节点的mongos，留意的是<code>configDB</code>需要指定所有节点的config server，若配置了多个节点的mongos，可以使用mongodb uri达到高可用的效果。</p><p>mongos成功启动后，可以开始进行sharding的配置。</p><p>进入其中一个mongos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ mongo 192.168.0.100:30000/admin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加分片</span></span><br><span class="line">mongos&gt; sh.addShard(<span class="string">"shard1/192.168.0.100:27100,192.168.0.101:27100,192.168.0.102:27100"</span>)</span><br><span class="line">mongos&gt; sh.addShard(<span class="string">"shard2/192.168.0.100:27101,192.168.0.101:27101,192.168.0.102:27101"</span>)</span><br><span class="line">mongos&gt; sh.addShard(<span class="string">"shard3/192.168.0.100:27102,192.168.0.101:27102,192.168.0.102:27102"</span>)</span><br><span class="line">mongos&gt; sh.addShard(<span class="string">"shard4/192.168.0.100:27103,192.168.0.101:27103,192.168.0.102:27103"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看集群状态</span></span><br><span class="line">mongos&gt; sh.status()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定特定数据库分片生效</span></span><br><span class="line">mongos&gt; db.runCommand( &#123; enablesharding :<span class="string">"test"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定数据库里需要分片的集合和片键</span></span><br><span class="line">db.runCommand( &#123; shardcollection : <span class="string">"testdb.table1"</span>,key : &#123;id: 1&#125; &#125; )</span><br></pre></td></tr></table></figure><p>到此，分片+副本集部署完毕。</p><h3 id="记得修改文件路径权限，最好使用mongod用户来启动"><a href="#记得修改文件路径权限，最好使用mongod用户来启动" class="headerlink" title="记得修改文件路径权限，最好使用mongod用户来启动"></a>记得修改文件路径权限，最好使用mongod用户来启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R mongod:mongod /data/db/mongodb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是MongoDB分片+副本集集群部署&lt;/p&gt;
&lt;h2 id=&quot;MongoDB-Sharding简介&quot;&gt;&lt;a href=&quot;#MongoDB-Sharding简介&quot; class=&quot;headerlink&quot; title=&quot;MongoDB Sharding简介&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="MongoDB分片集群部署" scheme="http://yoursite.com/categories/MongoDB%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="NoSql" scheme="http://yoursite.com/tags/NoSql/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="Sharding" scheme="http://yoursite.com/tags/Sharding/"/>
    
      <category term="replSet" scheme="http://yoursite.com/tags/replSet/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB单实例部署</title>
    <link href="http://yoursite.com/2018/02/24/mongodb-single/"/>
    <id>http://yoursite.com/2018/02/24/mongodb-single/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2018-02-24T07:57:22.065Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是MongoDB单实例部署全过程</p><h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><p>MongoDB是用C++语言编写的非关系型数据库。特点是高性能、易部署、易使用，存储数据十分方便，主要特性有： </p><ul><li><p>面向集合存储，易于存储对象类型的数据 </p></li><li><p>模式自由 </p></li><li><p>支持动态查询 </p></li><li><p>支持完全索引，包含内部对象 </p></li><li><p>支持复制和故障恢复 </p></li><li><p>使用高效的二进制数据存储，包括大型对象 </p></li><li><p>文件存储格式为BSON(一种JSON的扩展)</p></li></ul><p><a href="https://www.mongodb.com/download-center#atlas" target="_blank" rel="noopener">官网下载地址</a></p><p><a href="https://docs.mongodb.com/manual/introduction/" target="_blank" rel="noopener">官方文档</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>系统：CentOS 7/RHEL 7</li></ul><h3 id="yum安装方式"><a href="#yum安装方式" class="headerlink" title="yum安装方式"></a>yum安装方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 以3.4.x为例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建yum源文件</span></span><br><span class="line">$ vim /etc/yum.repos.d/mongodb-org-3.4.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">## 把下面的内容复制到上面的文件中</span></span><br><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc123456</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动yum命令开始安装</span></span><br><span class="line">$ yum install -y mongodb-org</span><br></pre></td></tr></table></figure><p>各个安装包说明：</p><p><img src="/images/mongodb-org.png" alt="mongodb-org"></p><h2 id="编译安装方式"><a href="#编译安装方式" class="headerlink" title="编译安装方式"></a>编译安装方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 以3.4.13版本为例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用wget命令下载安装包</span></span><br><span class="line">$ wget http://downloads.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.4.13.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压压缩包，并配置相关文件</span></span><br><span class="line">$ tar zxf mongodb-linux-x86_64-rhel70-3.4.13.tgz</span><br><span class="line">$ mv mongodb-linux-x86_64-rhel70-3.4.13 mongodb</span><br><span class="line">$ mv mongodb /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment">## 那么/usr/local/mongodb/bin/下的命令就是mongodb相关的命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 若系统不存在mongodb用户则进行创建</span></span><br><span class="line">$ groupadd mongod</span><br><span class="line">$ useradd -r -g mongod -s /sbin/nologin -M mongod</span><br><span class="line"></span><br><span class="line"><span class="comment">## 现在创建mongodb数据库所需要的文件路径</span></span><br><span class="line">$ mkdir -p /data/db/mongodb/single/data</span><br><span class="line">$ mkdir -p /data/db/mongodb/single/etc</span><br><span class="line">$ mkdir -p /data/db/mongodb/single/<span class="built_in">log</span></span><br><span class="line">$ chown -R mongod:mongod /data/db/mongodb</span><br></pre></td></tr></table></figure><h2 id="配置文件参数说明"><a href="#配置文件参数说明" class="headerlink" title="配置文件参数说明"></a>配置文件参数说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">storage:  </span><br><span class="line">   dbPath: &lt;string&gt;                       <span class="comment">#存储数据目录  </span></span><br><span class="line">   indexBuildRetry: &lt;boolean&gt;         <span class="comment">#当构建索引时mongod意外关闭，那么再次启动是否重新构建索引；索引构建失败，mongod重启后将会删除尚未完成的索引，但是否重建由此参数决定。默认值为true。  </span></span><br><span class="line">   repairPath: &lt;string&gt;                   <span class="comment">#配合--repair启动命令参数，在repair期间使用此目录存储临时数据，repair结束后此目录下数据将被删除，此配置仅对mongod进程有效。不建议在配置文件中配置，而是使用mongod启动命令指定。  </span></span><br><span class="line">   journal:  </span><br><span class="line">      enabled: &lt;boolean&gt;              <span class="comment">#是否开启journal日志持久存储，journal日志用来数据恢复，是mongod最基础的特性，通常用于故障恢复。  </span></span><br><span class="line">      commitIntervalMs: &lt;num&gt;         <span class="comment">#New in version 3.2.  日志提交间隔  </span></span><br><span class="line">   directoryPerDB: &lt;boolean&gt;          <span class="comment">#将不同DB的数据分子目录存储，基于dbPath，默认为 false  </span></span><br><span class="line">   syncPeriodSecs: &lt;int&gt;              <span class="comment">#使用fsync操作将数据flush到磁盘的时间间隔，默认值为60（单位：秒），建议不修改  </span></span><br><span class="line">   engine: &lt;string&gt;                       <span class="comment">#存储引擎，3.2后默认wiredTiger 可选 mmapv1  </span></span><br><span class="line">   mmapv1:  </span><br><span class="line">      preallocDataFiles: &lt;boolean&gt;        <span class="comment">#Deprecated since version 2.6. 已废弃  </span></span><br><span class="line">      nsSize: &lt;int&gt;  </span><br><span class="line">      quota:  </span><br><span class="line">         enforced: &lt;boolean&gt;  </span><br><span class="line">         maxFilesPerDB: &lt;int&gt;  </span><br><span class="line">      smallFiles: &lt;boolean&gt;  </span><br><span class="line">      journal:  </span><br><span class="line">         debugFlags: &lt;int&gt;  </span><br><span class="line">         commitIntervalMs: &lt;num&gt;  </span><br><span class="line">   wiredTiger:  </span><br><span class="line">      engineConfig:  </span><br><span class="line">         cacheSizeGB: &lt;number&gt;                <span class="comment">#GB，此值决定了wiredTiger与mmapv1的内存模型不同，它可以限制mongod对内存的使用量  </span></span><br><span class="line">         statisticsLogDelaySecs: &lt;number&gt;  </span><br><span class="line">         journalCompressor: &lt;string&gt;      <span class="comment">#journal日志的压缩算法，可选值为“none”、“snappy”、“zlib”。  </span></span><br><span class="line">         directoryForIndexes: &lt;boolean&gt;       <span class="comment">#是否将索引和collections数据分别存储在dbPath单独的目录中。即index数据保存“index”子目录，collections数据保存在“collection”子目录。默认值为false，仅对mongod有效。  </span></span><br><span class="line">      collectionConfig:  </span><br><span class="line">         blockCompressor: &lt;string&gt;            <span class="comment">#collection数据压缩算法，可选值“none”、“snappy”、“zlib”  </span></span><br><span class="line">      indexConfig:    </span><br><span class="line">         prefixCompression: &lt;boolean&gt;     <span class="comment">#是否对索引数据使用“前缀压缩”（prefix compression，一种算法）。前缀压缩，对那些经过排序的值存储，有很大帮助，可以有效的减少索引数据的内存使用量。默认值为true。  </span></span><br><span class="line"></span><br><span class="line">operationProfiling:  </span><br><span class="line">   slowOpThresholdMs: &lt;int&gt;    <span class="comment">#数据库profiler判定一个操作是“慢查询”的时间阀值，单位毫秒；  </span></span><br><span class="line">   mode: &lt;string&gt;          <span class="comment">#off：关闭profiling  slowOp：on，只包含慢操作日志； all  On. Includes all operations.  </span></span><br><span class="line">                <span class="comment">#Database profiling can impact database performance. Enable this option only after careful consideration.  </span></span><br><span class="line">                <span class="comment">#对性能有影响，建议只在调试期间开启  </span></span><br><span class="line">systemLog:          <span class="comment">#系统日志配置  </span></span><br><span class="line">   verbosity: &lt;int&gt; <span class="comment">#日志级别，0：默认值，包含“info”信息，1~5，即大于0的值均会包含debug信息  </span></span><br><span class="line">   quiet: &lt;boolean&gt;  <span class="comment">#"安静"，此时mongod/mongos将会尝试减少日志的输出量。不建议在production环境下开启，否则将会导致跟踪错误比较困难。  </span></span><br><span class="line">   traceAllExceptions: &lt;boolean&gt; <span class="comment"># 打印异常详细信息  </span></span><br><span class="line">   syslogFacility: &lt;string&gt; <span class="comment">#The facility level used when logging messages to syslog.  default:user  </span></span><br><span class="line">   path: &lt;string&gt;         <span class="comment">#日志文件路径  </span></span><br><span class="line">   logAppend: &lt;boolean&gt;       <span class="comment">#启动或重启后是否追加写入  </span></span><br><span class="line">   logRotate: &lt;string&gt;        <span class="comment">#防止一个日志文件特别大，可选项：rename(重命名日志文件，默认值);reopen(使用linux日志rotate特性，关闭并重新打开此日志文件，可以避免日志丢失，但是logAppend必须为true)  </span></span><br><span class="line">   destination: &lt;string&gt;  <span class="comment">#日志输出目的地，可为 file 或 syslog; if file, you must also specify systemLog.path.  </span></span><br><span class="line">   timeStampFormat: &lt;string&gt;<span class="comment">#时间格式 默认为 iso8601-local     </span></span><br><span class="line">   component:  </span><br><span class="line">      accessControl:  </span><br><span class="line">         verbosity: &lt;int&gt;  </span><br><span class="line">      <span class="built_in">command</span>:  </span><br><span class="line">         verbosity: &lt;int&gt;  </span><br><span class="line"></span><br><span class="line">net:                    <span class="comment">#网络相关配置  </span></span><br><span class="line">   port: &lt;int&gt;            <span class="comment">#监听端口  </span></span><br><span class="line">   bindIp: &lt;string&gt;       <span class="comment">#监听ip，不指定则监听所有网卡，  </span></span><br><span class="line">   maxIncomingConnections: &lt;int&gt; <span class="comment">#进程允许的最大连接数，默认:65536  </span></span><br><span class="line">   wireObjectCheck: &lt;boolean&gt; <span class="comment">#当客户端写入数据时，mongos/mongod是否检测数据的有效性(BSON)，如果数据格式不良，此insert、update操作将会被拒绝；默认值为true  </span></span><br><span class="line">   ipv6: &lt;boolean&gt;    <span class="comment">#是否支持mongos/mongod多个实例之间使用IPV6网络，默认值为false。此值需要在整个cluster中保持一致。  </span></span><br><span class="line">   unixDomainSocket:  </span><br><span class="line">      enabled: &lt;boolean&gt;  </span><br><span class="line">      pathPrefix: &lt;string&gt;  </span><br><span class="line">      filePermissions: &lt;int&gt;  </span><br><span class="line">   http:  </span><br><span class="line">      enabled: &lt;boolean&gt;  <span class="comment">#Enable or disable the HTTP interface.   </span></span><br><span class="line">      JSONPEnabled: &lt;boolean&gt;  </span><br><span class="line">      RESTInterfaceEnabled: &lt;boolean&gt;  </span><br><span class="line">   ssl:  </span><br><span class="line">      sslOnNormalPorts: &lt;boolean&gt;  <span class="comment"># deprecated since 2.6  </span></span><br><span class="line">      mode: &lt;string&gt;  </span><br><span class="line">      PEMKeyFile: &lt;string&gt;  </span><br><span class="line">      PEMKeyPassword: &lt;string&gt;  </span><br><span class="line">      clusterFile: &lt;string&gt;  </span><br><span class="line">      clusterPassword: &lt;string&gt;  </span><br><span class="line">      CAFile: &lt;string&gt;  </span><br><span class="line">      CRLFile: &lt;string&gt;  </span><br><span class="line">      allowConnectionsWithoutCertificates: &lt;boolean&gt;  </span><br><span class="line">      allowInvalidCertificates: &lt;boolean&gt;  </span><br><span class="line">      allowInvalidHostnames: &lt;boolean&gt;  </span><br><span class="line">      disabledProtocols: &lt;string&gt;  </span><br><span class="line">      FIPSMode: &lt;boolean&gt;</span><br></pre></td></tr></table></figure><p><strong>mongodb配置文件例子</strong>(/data/db/mongodb/single/etc/config.yml)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: <span class="string">"/data/db/mongodb/single/log/mongodb.log"</span></span><br><span class="line">   quiet: <span class="literal">true</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">   dbPath: <span class="string">"/data/db/mongodb/single/data"</span></span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   engine: <span class="string">"wiredTiger"</span></span><br><span class="line">   wiredTiger:</span><br><span class="line">      engineConfig:</span><br><span class="line">          cacheSizeGB: 1</span><br><span class="line">          directoryForIndexes: <span class="literal">true</span></span><br><span class="line">      collectionConfig:</span><br><span class="line">          blockCompressor: zlib</span><br><span class="line">      indexConfig:</span><br><span class="line">          prefixCompression: <span class="literal">true</span></span><br><span class="line">operationProfiling:</span><br><span class="line">   slowOpThresholdMs: 100</span><br><span class="line">   mode: <span class="string">"slowOp"</span></span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">   pidFilePath: <span class="string">"/data/db/mongodb/single/mongodb.pid"</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: 192.168.0.123</span><br><span class="line">   port: 37017</span><br><span class="line"><span class="comment">#security:</span></span><br><span class="line">   <span class="comment">##keyFile: /data/mongodb/config/data/keyfile</span></span><br><span class="line">   <span class="comment">##authorization: enabled</span></span><br></pre></td></tr></table></figure><h2 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h2><p>因为安全问题，不建议直接使用<code>root</code>来启动数据库</p><ul><li>yum安装方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u mongod mongod -f /data/db/mongodb/single/config.yml</span><br></pre></td></tr></table></figure><ul><li>编译安装方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/mongodb/bin/mongod -f /data/db/mongodb/single/config.yml</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是MongoDB单实例部署全过程&lt;/p&gt;
&lt;h2 id=&quot;MongoDB简介&quot;&gt;&lt;a href=&quot;#MongoDB简介&quot; class=&quot;headerlink&quot; title=&quot;MongoDB简介&quot;&gt;&lt;/a&gt;MongoDB简介&lt;/h2&gt;&lt;p&gt;MongoDB是用C++
      
    
    </summary>
    
      <category term="MongoDB单实例部署" scheme="http://yoursite.com/categories/MongoDB%E5%8D%95%E5%AE%9E%E4%BE%8B%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="NoSql" scheme="http://yoursite.com/tags/NoSql/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>HAProxy日常使用说明</title>
    <link href="http://yoursite.com/2018/02/23/haproxy/"/>
    <id>http://yoursite.com/2018/02/23/haproxy/</id>
    <published>2018-02-22T16:00:00.000Z</published>
    <updated>2018-02-24T04:16:19.414Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是HAProxy安装和配置说明</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。</p><p>HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。</p><p>HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。</p><p>HAProxy实现了一种事件驱动, 单一进程模型，此模型支持非常大的并发连接数。多进程或多线程模型受内存限制 、系统调度器限制以及无处不在的锁限制，很少能处理数千并发连接。事件驱动模型因为在有更好的资源和时间管理的用户空间(User-Space) 实现所有这些任务，所以没有这些问题。此模型的弊端是，在多核系统上，这些程序通常扩展性较差。这就是为什么他们必须进行优化以 使每个CPU时间片(Cycle)做更多的工作。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>系统：CentOS 7/RHEL 7</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 以1.6.9为例</span></span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget http://fossies.org/linux/misc/haproxy-1.6.9.tar.gz</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxvf haproxy-1.6.9.tar.gz</span><br><span class="line"><span class="built_in">cd</span> haproxy-1.6.9</span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">make TARGET=linux2628 ARCH=x86_64 PREFIX=/usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">make install PREFIX=/usr/<span class="built_in">local</span>/haproxy</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数说明</span></span><br><span class="line">TARGET=linux26 <span class="comment">#内核版本，使用uname -r查看内核，如：2.6.18-371.el5，此时该参数就为linux26；kernel 大于2.6.28的用：TARGET=linux2628</span></span><br><span class="line">ARCH=x86_64 <span class="comment">#系统位数</span></span><br><span class="line">PREFIX=/usr/<span class="built_in">local</span>/haprpxy <span class="comment">#/usr/local/haprpxy为haprpxy安装路径</span></span><br></pre></td></tr></table></figure><p>也可以直接使用<code>yum</code>命令进行下载，如：<code>yum install -y haproxy</code></p><p>这里也记录下各个系统各haproxy版本的rpm包<a href="https://pkgs.org/download/haproxy" target="_blank" rel="noopener">下载地址</a></p><h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><ul><li><strong>启动配置文件<code>/usr/local/haproxy/haproxy.cfg</code></strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########全局配置#########</span></span><br><span class="line">global</span><br><span class="line">　　<span class="built_in">log</span> 127.0.0.1 local0 <span class="comment">#[日志输出配置，所有日志都记录在本机，通过local0输出]</span></span><br><span class="line">　　<span class="built_in">log</span> 127.0.0.1 local1 notice <span class="comment">#定义haproxy 日志级别[error warringinfo debug]</span></span><br><span class="line">　　daemon <span class="comment">#以后台形式运行harpoxy</span></span><br><span class="line">　　nbproc 1 <span class="comment">#设置进程数量</span></span><br><span class="line">　　maxconn 4096 <span class="comment">#默认最大连接数,需考虑ulimit-n限制</span></span><br><span class="line">　　<span class="comment">#user haproxy #运行haproxy的用户</span></span><br><span class="line">　　<span class="comment">#group haproxy #运行haproxy的用户所在的组</span></span><br><span class="line">　　<span class="comment">#pidfile /var/run/haproxy.pid #haproxy 进程PID文件</span></span><br><span class="line">　　<span class="comment">#ulimit-n 819200 #ulimit 的数量限制</span></span><br><span class="line">　　<span class="comment">#chroot /usr/share/haproxy #chroot运行路径</span></span><br><span class="line">　　<span class="comment">#debug #haproxy 调试级别，建议只在开启单进程的时候调试</span></span><br><span class="line">　　<span class="comment">#quiet</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########默认配置############</span></span><br><span class="line">defaults</span><br><span class="line">　　<span class="built_in">log</span> global</span><br><span class="line">　　mode http <span class="comment">#默认的模式mode &#123; tcp|http|health &#125;，tcp是4层，http是7层，health只会返回OK</span></span><br><span class="line">　　option httplog <span class="comment">#日志类别,采用httplog</span></span><br><span class="line">　　option dontlognull <span class="comment">#不记录健康检查日志信息</span></span><br><span class="line">　　retries 2 <span class="comment">#两次连接失败就认为是服务器不可用，也可以通过后面设置</span></span><br><span class="line">　　<span class="comment">#option forwardfor #如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip</span></span><br><span class="line">　　option httpclose <span class="comment">#每次请求完毕后主动关闭http通道,haproxy不支持keep-alive,只能模拟这种模式的实现</span></span><br><span class="line">　　<span class="comment">#option redispatch #当serverId对应的服务器挂掉后，强制定向到其他健康的服务器，以后将不支持</span></span><br><span class="line">　　option abortonclose <span class="comment">#当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接</span></span><br><span class="line">　　maxconn 4096 <span class="comment">#默认的最大连接数</span></span><br><span class="line">　　timeout connect 5000ms <span class="comment">#连接超时</span></span><br><span class="line">　　timeout client 30000ms <span class="comment">#客户端超时</span></span><br><span class="line">　　timeout server 30000ms <span class="comment">#服务器超时</span></span><br><span class="line">　　<span class="comment">#timeout check 2000 #心跳检测超时</span></span><br><span class="line">　　<span class="comment">#timeout http-keep-alive10s #默认持久连接超时时间</span></span><br><span class="line">　　<span class="comment">#timeout http-request 10s #默认http请求超时时间</span></span><br><span class="line">　　<span class="comment">#timeout queue 1m #默认队列超时时间</span></span><br><span class="line">　　balance roundrobin <span class="comment">#设置默认负载均衡方式，轮询方式</span></span><br><span class="line">　　<span class="comment">#balance source #设置默认负载均衡方式，类似于nginx的ip_hash</span></span><br><span class="line">　　<span class="comment">#balnace leastconn #设置默认负载均衡方式，最小连接数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########统计页面配置########</span></span><br><span class="line">listen stats</span><br><span class="line">　　<span class="built_in">bind</span> 0.0.0.0:1080 <span class="comment">#设置Frontend和Backend的组合体，监控组的名称，按需要自定义名称</span></span><br><span class="line">　　mode http <span class="comment">#http的7层模式</span></span><br><span class="line">　　option httplog <span class="comment">#采用http日志格式</span></span><br><span class="line">　　<span class="comment">#log 127.0.0.1 local0 err #错误日志记录</span></span><br><span class="line">　　maxconn 10 <span class="comment">#默认的最大连接数</span></span><br><span class="line">　　stats refresh 30s <span class="comment">#统计页面自动刷新时间</span></span><br><span class="line">　　stats uri /stats <span class="comment">#统计页面url</span></span><br><span class="line">　　stats realm XingCloud\ Haproxy <span class="comment">#统计页面密码框上提示文本</span></span><br><span class="line">　　stats auth admin:admin <span class="comment">#设置监控页面的用户和密码:admin,可以设置多个用户名</span></span><br><span class="line">　　stats auth Frank:Frank <span class="comment">#设置监控页面的用户和密码：Frank</span></span><br><span class="line">　　stats hide-version <span class="comment">#隐藏统计页面上HAProxy的版本信息</span></span><br><span class="line">　　stats admin <span class="keyword">if</span> TRUE <span class="comment">#设置手工启动/禁用，后端服务器(haproxy-1.4.9以后版本)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########设置haproxy 错误页面#####</span></span><br><span class="line"><span class="comment">#errorfile 403 /home/haproxy/haproxy/errorfiles/403.http</span></span><br><span class="line"><span class="comment">#errorfile 500 /home/haproxy/haproxy/errorfiles/500.http</span></span><br><span class="line"><span class="comment">#errorfile 502 /home/haproxy/haproxy/errorfiles/502.http</span></span><br><span class="line"><span class="comment">#errorfile 503 /home/haproxy/haproxy/errorfiles/503.http</span></span><br><span class="line"><span class="comment">#errorfile 504 /home/haproxy/haproxy/errorfiles/504.http</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########frontend前端配置##############</span></span><br><span class="line">frontend main</span><br><span class="line">　　<span class="built_in">bind</span> *:80 <span class="comment">#这里建议使用bind *:80的方式，要不然做集群高可用的时候有问题，vip切换到其他机器就不能访问了。</span></span><br><span class="line">　　acl web hdr(host) -i www.abc.com  <span class="comment">#acl后面是规则名称，-i为忽略大小写，后面跟的是要访问的域名，如果访问www.abc.com这个域名，就触发web规则，。</span></span><br><span class="line">　　acl img hdr(host) -i img.abc.com  <span class="comment">#如果访问img.abc.com这个域名，就触发img规则。</span></span><br><span class="line">　　use_backend webserver <span class="keyword">if</span> web   <span class="comment">#如果上面定义的web规则被触发，即访问www.abc.com，就将请求分发到webserver这个作用域。</span></span><br><span class="line">　　use_backend imgserver <span class="keyword">if</span> img   <span class="comment">#如果上面定义的img规则被触发，即访问img.abc.com，就将请求分发到imgserver这个作用域。</span></span><br><span class="line">　　default_backend dynamic <span class="comment">#不满足则响应backend的默认页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########backend后端配置##############</span></span><br><span class="line">backend webserver <span class="comment">#webserver作用域</span></span><br><span class="line">　　mode http</span><br><span class="line">　　balance roundrobin <span class="comment">#balance roundrobin 负载轮询，balance source 保存session值，支持static-rr，leastconn，first，uri等参数</span></span><br><span class="line">　　option httpchk /index.html HTTP/1.0 <span class="comment">#健康检查, 检测文件，如果分发到后台index.html访问不到就不再分发给它</span></span><br><span class="line">　　server web1 10.16.0.9:8085 cookie 1 weight 5 check inter 2000 rise 2 fall 3</span><br><span class="line">　　server web2 10.16.0.10:8085 cookie 2 weight 3 check inter 2000 rise 2 fall 3</span><br><span class="line">　　<span class="comment">#cookie 1表示serverid为1，check inter 1500 是检测心跳频率 </span></span><br><span class="line">　　<span class="comment">#rise 2是2次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line"></span><br><span class="line">backend imgserver</span><br><span class="line">　　mode http</span><br><span class="line">　　option httpchk /index.php</span><br><span class="line">　　balance roundrobin </span><br><span class="line">　　server img01 192.168.137.101:80 check inter 2000 fall 3</span><br><span class="line">　　server img02 192.168.137.102:80 check inter 2000 fall 3</span><br><span class="line"></span><br><span class="line">backend dynamic </span><br><span class="line">　　balance roundrobin </span><br><span class="line">　　server test1 192.168.1.23:80 check maxconn 2000 </span><br><span class="line">　　server test2 192.168.1.24:80 check maxconn 2000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen tcptest </span><br><span class="line">　　<span class="built_in">bind</span> 0.0.0.0:5222 </span><br><span class="line">　　mode tcp </span><br><span class="line">　　option tcplog <span class="comment">#采用tcp日志格式 </span></span><br><span class="line">　　balance <span class="built_in">source</span> </span><br><span class="line">　　<span class="comment">#log 127.0.0.1 local0 debug </span></span><br><span class="line">　　server s1 192.168.100.204:7222 weight 1 </span><br><span class="line">　　server s2 192.168.100.208:7222 weight 1</span><br></pre></td></tr></table></figure><ul><li><strong>负载均衡算法</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">一、roundrobin，表示简单的轮询，每个服务器根据权重轮流使用，在服务器的处理时间平均分配的情况下这是最流畅和公平的算法。该算法是动态的，对于实例启动慢的服务器权重会在运行中调整。</span><br><span class="line"></span><br><span class="line">二、static-rr，表示根据权重，建议关注；每个服务器根据权重轮流使用，类似roundrobin，但它是静态的，意味着运行时修改权限是无效的。另外，它对服务器的数量没有限制。</span><br><span class="line"></span><br><span class="line">三、leastconn，表示最少连接者先处理，建议关注；leastconn建议用于长会话服务，例如LDAP、SQL、TSE等，而不适合短会话协议。如HTTP.该算法是动态的，对于实例启动慢的服务器权重会在运行中调整。</span><br><span class="line"></span><br><span class="line">四、<span class="built_in">source</span>，表示根据请求源IP，建议关注；对请求源IP地址进行哈希，用可用服务器的权重总数除以哈希值，根据结果进行分配。</span><br><span class="line">           只要服务器正常，同一个客户端IP地址总是访问同一个服务器。如果哈希的结果随可用服务器数量而变化，那么客户端会定向到不同的服务器；</span><br><span class="line">           该算法一般用于不能插入cookie的Tcp模式。它还可以用于广域网上为拒绝使用会话cookie的客户端提供最有效的粘连；</span><br><span class="line">           该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“<span class="built_in">hash</span>-type”的变化做调整。</span><br><span class="line">五、uri，表示根据请求的URI；表示根据请求的URI左端（问号之前）进行哈希，用可用服务器的权重总数除以哈希值，根据结果进行分配。</span><br><span class="line">        只要服务器正常，同一个URI地址总是访问同一个服务器。</span><br><span class="line">        一般用于代理缓存和反病毒代理，以最大限度的提高缓存的命中率。该算法只能用于HTTP后端；</span><br><span class="line">        该算法一般用于后端是缓存服务器；</span><br><span class="line">        该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“<span class="built_in">hash</span>-type”的变化做调整。</span><br><span class="line">六、url_param，表示根据请求的URl参数<span class="string">'balance url_param'</span> requires an URL parameter name</span><br><span class="line">              在HTTP GET请求的查询串中查找&lt;param&gt;中指定的URL参数，基本上可以锁定使用特制的URL到特定的负载均衡器节点的要求；</span><br><span class="line">              该算法一般用于将同一个用户的信息发送到同一个后端服务器；</span><br><span class="line">              该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“<span class="built_in">hash</span>-type”的变化做调整。</span><br><span class="line">七、hdr(name)，表示根据HTTP请求头来锁定每一次HTTP请求；</span><br><span class="line">              在每个HTTP请求中查找HTTP头&lt;name&gt;，HTTP头&lt;name&gt;将被看作在每个HTTP请求，并针对特定的节点；</span><br><span class="line">              如果缺少头或者头没有任何值，则用roundrobin代替；</span><br><span class="line">              该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“<span class="built_in">hash</span>-type”的变化做调整。</span><br><span class="line">八、rdp-cookie(name)，表示根据据cookie(name)来锁定并哈希每一次TCP请求。</span><br><span class="line">                     为每个进来的TCP请求查询并哈希RDP cookie&lt;name&gt;；</span><br><span class="line">                     该机制用于退化的持久模式，可以使同一个用户或者同一个会话ID总是发送给同一台服务器。</span><br><span class="line">                     如果没有cookie，则使用roundrobin算法代替；</span><br><span class="line">                     该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“<span class="built_in">hash</span>-type”的变化做调整。</span><br><span class="line"></span><br><span class="line"><span class="comment">#其实这些算法各有各的用法，我们平时应用得比较多的应该是roundrobin、source和lestconn。</span></span><br></pre></td></tr></table></figure><ul><li><strong>ACL规则定义</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########ACL策略定义#########################</span></span><br><span class="line">1、<span class="comment">#如果请求的域名满足正则表达式返回true -i是忽略大小写</span></span><br><span class="line">acl denali_policy hdr_reg(host) -i ^(www.inbank.com|image.inbank.com)$</span><br><span class="line"></span><br><span class="line">2、<span class="comment">#如果请求域名满足www.inbank.com 返回 true -i是忽略大小写</span></span><br><span class="line">acl tm_policy hdr_dom(host) -i www.inbank.com</span><br><span class="line"></span><br><span class="line">3、<span class="comment">#在请求url中包含sip_apiname=，则此控制策略返回true,否则为false</span></span><br><span class="line">acl invalid_req url_sub -i sip_apiname=<span class="comment">#定义一个名为invalid_req的策略</span></span><br><span class="line"></span><br><span class="line">4、<span class="comment">#在请求url中存在timetask作为部分地址路径，则此控制策略返回true,否则返回false</span></span><br><span class="line">acl timetask_req url_dir -i timetask</span><br><span class="line"></span><br><span class="line">5、<span class="comment">#当请求的header中Content-length等于0时返回 true</span></span><br><span class="line">acl missing_cl hdr_cnt(Content-length) eq 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#########acl策略匹配相应###################</span></span><br><span class="line">1、<span class="comment">#当请求中header中Content-length等于0 阻止请求返回403</span></span><br><span class="line">block <span class="keyword">if</span> missing_cl</span><br><span class="line"></span><br><span class="line">2、<span class="comment">#block表示阻止请求，返回403错误，当前表示如果不满足策略invalid_req，或者满足策略timetask_req，则阻止请求。</span></span><br><span class="line">block <span class="keyword">if</span> !invalid_req || timetask_req</span><br><span class="line"></span><br><span class="line">3、<span class="comment">#当满足denali_policy的策略时使用denali_server的backend</span></span><br><span class="line">use_backend denali_server <span class="keyword">if</span> denali_policy</span><br><span class="line"></span><br><span class="line">4、<span class="comment">#当满足tm_policy的策略时使用tm_server的backend</span></span><br><span class="line">use_backend tm_server <span class="keyword">if</span> tm_policy</span><br><span class="line"></span><br><span class="line">5、<span class="comment">#reqisetbe关键字定义，根据定义的关键字选择backend</span></span><br><span class="line">reqisetbe ^Host:\ img dynamic</span><br><span class="line">reqisetbe ^[^\ ]*\ /(img|css)/ dynamic</span><br><span class="line">reqisetbe ^[^\ ]*\ /admin/stats stats</span><br><span class="line"></span><br><span class="line">6、<span class="comment">#以上都不满足的时候使用默认mms_server的backend</span></span><br><span class="line">default_backend mms</span><br><span class="line"></span><br><span class="line">haproxy acl定义</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul><li>编译安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/haproxy/sbin/haproxy -f /usr/<span class="built_in">local</span>/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><ul><li>yum安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service haproxy start      <span class="comment">#CentOS6</span></span><br><span class="line">$ systemctl start haproxy    <span class="comment">#CentOS7</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是HAProxy安装和配置说明&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主
      
    
    </summary>
    
      <category term="HAProxy使用" scheme="http://yoursite.com/categories/HAProxy%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="haproxy" scheme="http://yoursite.com/tags/haproxy/"/>
    
  </entry>
  
  <entry>
    <title>certbot安装/部分问题解决方案</title>
    <link href="http://yoursite.com/2018/02/22/certbot/"/>
    <id>http://yoursite.com/2018/02/22/certbot/</id>
    <published>2018-02-21T16:00:00.000Z</published>
    <updated>2018-02-24T04:00:20.314Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是Nginx + Certbot的安装过程以及在阿里云CentOS7上部署Certbot遇到的问题以及解决方法</p><h2 id="Using-Nginx-in-CentOS-RHEL-7"><a href="#Using-Nginx-in-CentOS-RHEL-7" class="headerlink" title="Using Nginx in CentOS/RHEL 7"></a>Using Nginx in CentOS/RHEL 7</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Certbot安装包已经包含在EPEL(Extra Packages for Enterprise Linux)源中，所以如果安装Certbot需要先安装<a href="https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F" target="_blank" rel="noopener">EPEL源</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在CentOS/RHEL 7中使用</span></span><br><span class="line"></span><br><span class="line">$ yum -y install yum-utils</span><br><span class="line">$ yum-config-manager --<span class="built_in">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br><span class="line">$ yum install certbot-nginx</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>由于Certbot已经有nginx插件，所以安装证书只需要运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot --nginx</span><br></pre></td></tr></table></figure><p>运行后按照提示输入指定的参数值后就会自动配置nginx并启用，若需要自定义nginx配置文件则可以先使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot --nginx certonly</span><br></pre></td></tr></table></figure><p>更多请参考<a href="https://certbot.eff.org/docs" target="_blank" rel="noopener">文档</a></p><h3 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h3><p>根据官方文档上的说明，Certbot的证书有效期为90天，有效期少于30天才能更新一次，大于30天不用更新(不能更新)</p><p>测试更新命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure><p>若上述命令测试通过(无报错)，则可以把以下命令写入到<a href="http://www.unixgeeks.org/security/newbie/unix/cron-1.html" target="_blank" rel="noopener">cron job</a>或者<a href="https://wiki.archlinux.org/index.php/Systemd/Timers" target="_blank" rel="noopener">systemd timer</a>中，就可以实现长期自动更新(官方推荐是一天执行两次确保证书能及时更新)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ certbot renew</span><br></pre></td></tr></table></figure><p>官方crontab例子参考(命令会在正午和午夜进行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0,12 * * * python -c <span class="string">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure><h2 id="其他安装方法"><a href="#其他安装方法" class="headerlink" title="其他安装方法"></a>其他安装方法</h2><h3 id="使用certbot-auto脚本安装Certbot"><a href="#使用certbot-auto脚本安装Certbot" class="headerlink" title="使用certbot-auto脚本安装Certbot"></a>使用certbot-auto脚本安装Certbot</h3><p>certbot-auto脚本会安装Certbot，并且能够自己解决RPM包和Python包依赖问题，同样非常方便。同时certbot-auto是对certbot的封装，即certbot-auto提供certbot的所有功能。在使用此方法安装Certbot后，运行certbot-auto命令获取证书。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 1) 获取certbot-auto脚本</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.eff.org/certbot-auto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2) 使certbot-auto脚本可执行</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod a+x ./certbot-auto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 3) 运行certbot-auto，安装Certbot</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./certbot-auto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 4) 获取Lets Encrypt证书，certbot-auto是对脚本certbot的封装，并且已经更新到了最新版本，所以使用此脚本获取证书</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./certbot-auto</span></span><br></pre></td></tr></table></figure><h3 id="使用pip安装Certbot"><a href="#使用pip安装Certbot" class="headerlink" title="使用pip安装Certbot"></a>使用pip安装Certbot</h3><p>此种方法比较简单，最好先创建一个Python虚拟环境，然后再安装Certbot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> 1) 安装虚拟环境软件包(针对于Python2.7)</span><br><span class="line">$ sudo yum install python-virtualenv</span><br><span class="line"></span><br><span class="line"> 2) 创建虚拟环境</span><br><span class="line">$ sudo virtualenv /usr/<span class="built_in">local</span>/python-certbot</span><br><span class="line"></span><br><span class="line"> 3) 激活虚拟环境</span><br><span class="line">$ <span class="built_in">source</span> /usr/<span class="built_in">local</span>/python-certbot/bin/activate</span><br><span class="line"></span><br><span class="line"> 4) 首先更新pip</span><br><span class="line">$ pip install --upgrade pip</span><br><span class="line"></span><br><span class="line"> 5) 安装Certbot</span><br><span class="line">$ pip install certbot</span><br><span class="line"></span><br><span class="line"> 6) 安装Certbot Apache插件</span><br><span class="line">$ pip install certbot-apache</span><br><span class="line"></span><br><span class="line">或者安装Certbot Nginx插件：</span><br><span class="line">$ pip install certbot-nginx</span><br><span class="line"></span><br><span class="line"> 7) 在安装Certbot Apache插件时，如提示如下错误：</span><br><span class="line">OSError: ctypes.util.find_library() did not manage to locate a library called <span class="string">'augeas'</span></span><br><span class="line"></span><br><span class="line">那是因为缺少augeas库文件，安装augeas库文件：</span><br><span class="line">$ sudo yum install augeas-libs</span><br><span class="line"></span><br><span class="line">然后就能成功安装Certbot Apache插件。</span><br><span class="line"></span><br><span class="line"> 8) 获取Lets Encrypt证书，同时配置Apache服务器</span><br><span class="line">$ sudo certbot --apache</span><br><span class="line"></span><br><span class="line">或者，同时配置Nginx服务器</span><br><span class="line">$ sudo certbot --nginx</span><br></pre></td></tr></table></figure><h2 id="在阿里云CentOS7上部署Certbot遇到的坑以及解决方法"><a href="#在阿里云CentOS7上部署Certbot遇到的坑以及解决方法" class="headerlink" title="在阿里云CentOS7上部署Certbot遇到的坑以及解决方法"></a>在阿里云CentOS7上部署Certbot遇到的坑以及解决方法</h2><p><strong>报错1</strong>：ImportError: No module named ‘requests.packages.urllib3’ (感觉是阿里云的centos7镜像本身python包的问题，因为直接import requests都会报错)</p><p>解决方法：更改/usr/lib/python2.7/site-packages/requests/exceptions.py模块导入部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把/usr/lib/python2.7/site-packages/requests/exceptions.py 传入包的部分</span></span><br><span class="line">from .packages.urllib3.exceptions import HTTPError as BaseHTTPError</span><br><span class="line"><span class="comment">#改为</span></span><br><span class="line">from urllib3.exceptions import HTTPError as BaseHTTPError</span><br></pre></td></tr></table></figure><p><strong>报错2</strong>：ImportError: cannot import name UnrewindableBodyError</p><p>解决方法： 重新安装对应版本的urllib3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#报错</span></span><br><span class="line">pkg_resources.DistributionNotFound: The <span class="string">'urllib3&lt;1.22,&gt;=1.21.1'</span> distribution was not found and is required by requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决方法：</span></span><br><span class="line">$ pip install urllib3==1.21.1</span><br></pre></td></tr></table></figure><p><strong>报错3</strong>：pkg_resources.ContextualVersionConflict: (idna 2.6 (/usr/lib/python2.7/site-packages), Requirement.parse(‘idna<2.6,>=2.5’), set([‘requests’]))</2.6,></p><p>解决方法：先检查pip freeze|grep pyOpenSSL版本(需要2.5~2.6之间)，理论上都要根据报错的版本进行安装，不符合则安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install idna==2.5</span><br></pre></td></tr></table></figure><p><strong>报错4</strong>：ImportError: ‘pyOpenSSL’ module missing required functionality. Try upgrading to v0.14 or newer.</p><p>解决方法：这个是yum下的openssl版本过低</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://mirror.switch.ch/pool/4/mirror/centos/7.4.1708/cloud/x86_64/openstack-ocata/common/pyOpenSSL-0.15.1-1.el7.noarch.rpm</span><br><span class="line">$ rpm -Uvh pyOpenSSL-0.15.1-1.el7.noarch.rpm</span><br><span class="line"><span class="comment">#rpm -qa|grep pyOpenSSL</span></span><br><span class="line"><span class="comment">#pyOpenSSL-0.15.1-1.el7.noarch</span></span><br></pre></td></tr></table></figure><p><strong>报错5</strong>：AttributeError: ‘module’ object has no attribute ‘SSL_ST_INIT’</p><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pyOpenSSL==16.2.0</span><br></pre></td></tr></table></figure><h2 id="迁移https证书过程备注："><a href="#迁移https证书过程备注：" class="headerlink" title="迁移https证书过程备注："></a>迁移https证书过程备注：</h2><ul><li><p>复制<code>/etc/letsencrypt/archive</code>对应两个域名的文件夹到新机器上</p></li><li><p>复制<code>/etc/letsencrypt/live</code>对应两个域名的文件夹到新机器上</p></li><li><p>在新机器上的<code>/etc/letsencrypt/renewal/</code>目录下拷贝测试conf作为旧域名的新配置文件，[renewalparams]以下的参数不变，修改其余路径相关对应域名即可</p></li><li><p>添加<code>nginx/conf.d/</code>对应下的配置文件，注意配置<code>ssl_certificate</code>和<code>ssl_certificate_key</code></p></li></ul><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>以下是Certbot自动生成的nginx配置文件，把http访问的域名都会转到https</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  <span class="built_in">test</span>-certbot.xxx.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$scheme</span> != <span class="string">"https"</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125; <span class="comment"># managed by Certbot</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是Nginx + Certbot的安装过程以及在阿里云CentOS7上部署Certbot遇到的问题以及解决方法&lt;/p&gt;
&lt;h2 id=&quot;Using-Nginx-in-CentOS-RHEL-7&quot;&gt;&lt;a href=&quot;#Using-Nginx-in-CentOS-R
      
    
    </summary>
    
      <category term="certbot使用" scheme="http://yoursite.com/categories/certbot%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="certbot" scheme="http://yoursite.com/tags/certbot/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Nginx正反向代理/负载均衡</title>
    <link href="http://yoursite.com/2018/02/21/nginx/"/>
    <id>http://yoursite.com/2018/02/21/nginx/</id>
    <published>2018-02-20T16:00:00.000Z</published>
    <updated>2018-02-24T04:00:56.931Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是Nginx配置正向代理、反向代理和负载均衡相关参数。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>正向代理是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</li></ul><p><img src="/images/nginx-forward-proxy.png" alt="nginx-forward-proxy"></p><ul><li>反向代理正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。</li></ul><p><img src="/images/nginx-reverse-proxy.png" alt="nginx-reverse-proxy"></p><ul><li>负载均衡：当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。</li></ul><p><img src="/images/nginx-balance.png" alt="nginx-balance.png"></p><h3 id="正向代理和反向代理区别"><a href="#正向代理和反向代理区别" class="headerlink" title="正向代理和反向代理区别"></a>正向代理和反向代理区别</h3><p>正向代理需要你主动设置代理服务器ip或者域名进行访问，由设置的服务器ip或者域名去获取访问内容并返回；而反向代理不需要你做任何设置，直接访问服务器真实ip或者域名，但是服务器内部会自动根据访问内容进行跳转及内容返回，你不知道它最终访问的是哪些机器。</p><p>正向代理是代理客户端，为客户端收发请求，使真实客户端对服务器不可见；而反向代理是代理服务器端，为服务器收发请求，使真实服务器对客户端不可见。</p><p>从上面的描述也能看得出来正向代理和反向代理最关键的两点区别：</p><ul><li><p>是否指定目标服务器</p></li><li><p>客户端是否要做设置</p></li></ul><p>下面用一张图来表示两者的差异：</p><p><img src="/images/nginx-proxy.png" alt="nginx-proxy"></p><p>正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。</p><p><strong>从用途上来区分：</strong></p><p>正向代理：正向代理用途是为了在防火墙内的局域网提供访问internet的途径。另外还可以使用缓冲特性减少网络使用率</p><p>反向代理：反向代理的用途是将防火墙后面的服务器提供给internet用户访问。同时还可以完成诸如负载均衡等功能</p><p><strong>从安全性来讲：</strong></p><p>正向代理：正向代理允许客户端通过它访问任意网站并且隐蔽客户端自身，因此你必须采取安全措施来确保仅为经过授权的客户端提供服务</p><p>反向代理：对外是透明的，访问者并不知道自己访问的是代理。对访问者而言，他以为访问的就是原始服务器</p><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>nginx.conf 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># 配置DNS解析IP地址，比如 Google Public DNS，以及超时时间（5秒）</span></span><br><span class="line">    resolver 8.8.8.8;    <span class="comment"># 必需</span></span><br><span class="line">    resolver_timeout 5s;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听端口</span></span><br><span class="line">    listen 8080;</span><br><span class="line"></span><br><span class="line">    access_log  /home/reistlin/logs/proxy.access.log;</span><br><span class="line">    error_log   /home/reistlin/logs/proxy.error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 配置正向代理参数</span></span><br><span class="line">        proxy_pass <span class="variable">$scheme</span>://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="comment"># 解决如果URL中带"."后Nginx 503错误</span></span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置缓存大小</span></span><br><span class="line">        proxy_buffers 256 4k;</span><br><span class="line">        <span class="comment"># 关闭磁盘缓存读写减少I/O</span></span><br><span class="line">        proxy_max_temp_file_size 0;</span><br><span class="line">         <span class="comment"># 代理连接超时时间</span></span><br><span class="line">        proxy_connect_timeout 30;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置代理服务器HTTP状态缓存时间</span></span><br><span class="line">        proxy_cache_valid 200 302 10m;</span><br><span class="line">        proxy_cache_valid 301 1h;</span><br><span class="line">        proxy_cache_valid any 1m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li><p>配置 nginx 正向代理服务，一般是配置到一个 server 块中。注意，在该 server 块中，不要出现 server_name 指令，即不要设置虚拟主机的名称和 IP；</p></li><li><p>resolver 是必需的，如果没有该指令， nginx 无法处理接收到的域名；</p></li><li><p>nginx 代理服务不支持正向代理 HTTPS 站点；</p></li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>nginx.conf 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">upstream webServer01 &#123;</span><br><span class="line">    server 127.0.0.1:3001;</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream webServer02 &#123;</span><br><span class="line">    server 127.0.0.1:3002;</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.test01.com;</span><br><span class="line">    <span class="comment">#access_log /var/log/nginx/test01.log;</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host  <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">        proxy_pass       http://webServer01;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.test02.com;</span><br><span class="line">    <span class="comment">#access_log /var/log/nginx/test02.log;</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host  <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">        proxy_pass       http://webServer02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>Nginx负载均衡是通过upstream模块来实现的，内置实现了三种负载策略，配置还是比较简单的。<a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="noopener">官网负载均衡配置说明</a></p><ul><li>轮循（默认）<br>Nginx根据请求次数，将每个请求均匀分配到每台服务器</li></ul><ul><li>最少连接<br>将请求分配给连接数最少的服务器。Nginx会统计哪些服务器的连接数最少。</li></ul><ul><li>IP Hash<br>绑定处理请求的服务器。第一次请求时，根据该客户端的IP算出一个HASH值，将请求分配到集群中的某一台服务器上。后面该客户端的所有请求，都将通过HASH算法，找到之前处理这台客户端请求的服务器，然后将请求交给它来处理。</li></ul><h3 id="轮循"><a href="#轮循" class="headerlink" title="轮循"></a>轮循</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line"></span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080;</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        server example.com:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>proxy_pass <a href="http://tomcats：表示将所有请求转发到tomcats服务器组中配置的某一台服务器上。" target="_blank" rel="noopener">http://tomcats：表示将所有请求转发到tomcats服务器组中配置的某一台服务器上。</a></p></li><li><p>upstream模块：配置反向代理服务器组，Nginx会根据配置，将请求分发给组里的某一台服务器。tomcats是服务器组的名称。</p></li><li><p>upstream模块下的server指令：配置处理请求的服务器IP或域名，端口可选，不配置默认使用80端口。通过上面的配置，Nginx默认将请求依次分配给100，101，102来处理，可以通过修改下面这些参数来改变默认的分配策略：</p><ul><li><p>weight </p><p>默认为1，将请求平均分配给每台server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2;  <span class="comment"># 2/6次</span></span><br><span class="line">    server 192.168.0.101:8080 weight=3;  <span class="comment"># 3/6次</span></span><br><span class="line">    server 192.168.0.102:8080 weight=1;  <span class="comment"># 1/6次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例配置，表示6次请求中，100分配2次，101分配3次，102分配1次</p></li><li><p>max_fails </p><p>默认为1。某台Server允许请求失败的次数，超过最大次数后，在fail_timeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxy_next_upstream, fastcgi_next_upstream, uwsgi_next_upstream, scgi_next_upstream, and memcached_next_upstream指令来处理这次错误的请求。</p></li><li><p>fail_timeout </p><p>默认为10秒。某台Server达到max_fails次失败请求后，在fail_timeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2 max_fails=3 fail_timeout=15;</span><br><span class="line">    server 192.168.0.101:8080 weight=3;</span><br><span class="line">    server 192.168.0.102:8080 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>   192.168.0.100这台机器，如果有3次请求失败，nginx在15秒内，不会将新的请求分配给它。</p><ul><li><p>backup </p><p>备份机，所有服务器挂了之后才会生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2 max_fails=3 fail_timeout=15;</span><br><span class="line">    server 192.168.0.101:8080 weight=3;</span><br><span class="line"></span><br><span class="line">    server 192.168.0.102:8080 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在100和101都挂了之前，102为不可用状态，不会将请求分配给它。只有当100和101都挂了，102才会被启用。</p></li><li><p>down </p><p>标识某一台server不可用。可能能通过某些参数动态的激活它吧，要不真没啥用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 weight=2 max_fails=3 fail_timeout=15;</span><br><span class="line"></span><br><span class="line">    server 192.168.0.101:8080 down;</span><br><span class="line"></span><br><span class="line">    server 192.168.0.102:8080 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>   表示101这台Server为无效状态，不会将请求分配给它。</p><ul><li><p>max_conns </p><p>限制分配给某台Server处理的最大连接数量，超过这个数量，将不会分配新的连接给它。默认为0，表示不限制。注意：1.5.9之后的版本才有这个配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080 max_conns=1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>   表示最多给100这台Server分配1000个请求，如果这台Server正在处理1000个请求，nginx将不会分配新的请求给到它。假如有一个请求处理完了，还剩下999个请求在处理，这时nginx也会将新的请求分配给它。</p><ul><li><p>resolve </p><p>将server指令配置的域名，指定域名解析服务器。需要在http模块下配置resolver指令，指定域名解析服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    resolver 10.0.0.1;</span><br><span class="line"></span><br><span class="line">    upstream u &#123;</span><br><span class="line">        zone ...;</span><br><span class="line">        ...</span><br><span class="line">        server example.com resolve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示example.com域名，由10.0.0.1服务器来负责解析。 </p><p>upstream模块server指令的其它参数和详细配置说明，请参考<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#server" target="_blank" rel="noopener">官方文档</a>。</p></li></ul><h2 id="第三方负载策略"><a href="#第三方负载策略" class="headerlink" title="第三方负载策略"></a>第三方负载策略</h2><ul><li><p>fair</p><p>根据服务器的响应时间来分配请求，响应时间短的优先分配，即负载压力小的优先会分配。</p><p>由于fair模块是第三方提供的，所以在编译nginx源码的时候，需要将fair添加到nginx模块中。</p><ul><li><p>下载fair模块源码 </p><p><a href="https://github.com/xyang0917/nginx-upstream-fair" target="_blank" rel="noopener">下载地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ wget https://github.com/xyang0917/nginx-upstream-fair/archive/master.zip</span><br><span class="line">$ unzip master.zip</span><br></pre></td></tr></table></figure><p>解压后的目录名为：nginx-upstream-fair-master</p></li><li><p>重新编译nginx，将fair模块添加到编译参数 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/nginx-nginx-1.10.0</span><br><span class="line">$ ./configure --prefix=/opt/nginx --add-module=/opt/nginx-upstream-fair-master</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>不要执行make install，这样会覆盖之前nginx的配置 </p></li><li><p>将新编译的nginx可执行程序拷贝到/opt/nginx/sbin/目录下，覆盖之前安装的nginx编译后的nginx执行程序，放在nginx源码的objs目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps -aux | grep nginx</span><br><span class="line">$ <span class="built_in">kill</span> -9 nginx进程ID  <span class="comment"># 停止nginx服务</span></span><br><span class="line">$ cp /opt/nginx-1.10.0/objs/nginx /opt/nginx/sbin/  <span class="comment"># 覆盖旧的nginx</span></span><br><span class="line">$ nginx <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>配置使用fair负载策略模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    fair;</span><br><span class="line">    server 192.168.0.100:8080;</span><br><span class="line">    server 192.168.0.101:8080;</span><br><span class="line">    server 192.168.0.102:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于采用fair负载策略，配置weigth参数改变负载权重将无效。</p></li></ul></li></ul><ul><li><p>url_hash</p><p>按请求url的hash结果来分配请求，使每个url定向到同一个后端服务器，服务器做缓存时比较有效。</p></li></ul><p>  1.7.2版本以后，url_hash模块已经集成到了nginx源码当中，不需要单独安装。之前的版本仍需要单独安装，<a href="https://github.com/evanmiller/nginx_upstream_hash" target="_blank" rel="noopener">下载地址</a></p><p>  安装方法和fair模块一样，先下载url_hash源码，然后重新编译nginx源码，将url_hash模块添加到编译配置参数当中，最后将编译后生成的nginx二进制文件替换之前安装的nginx二进制文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.100:8080;</span><br><span class="line">    server 192.168.0.101:8080;</span><br><span class="line">    server 192.168.0.102:8080;</span><br><span class="line">    <span class="built_in">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是Nginx配置正向代理、反向代理和负载均衡相关参数。&lt;/p&gt;
&lt;h2 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;正向代理是一个位于客户端和目标
      
    
    </summary>
    
      <category term="Nginx正反向代理/负载均衡" scheme="http://yoursite.com/categories/Nginx%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
      <category term="load-balance" scheme="http://yoursite.com/tags/load-balance/"/>
    
  </entry>
  
  <entry>
    <title>LVM创建/扩容/常用操作</title>
    <link href="http://yoursite.com/2018/02/20/lvm/"/>
    <id>http://yoursite.com/2018/02/20/lvm/</id>
    <published>2018-02-19T16:00:00.000Z</published>
    <updated>2018-02-24T04:00:45.298Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是LVM初始化和扩容等操作</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li><p>LVM是逻辑盘卷管理（Logical Volume Manager）的简称，它是Linux环境下对磁盘分区进行管理的一种机制，LVM是建立在硬盘和分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。LVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统。物理卷（physical volume）物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备（如RAID），是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。</p></li><li><p>物理卷：Physical Volume，简称PV，一个物理卷只不过是一个有LVM管理数据添加在里面的物理存储介质。要使用LVM系统，首先对要用于LVM的磁盘进行初始化，初始化的目的就是将磁盘或分区标识为LVM 的物理卷。使用pvcreate 命令可以将一个磁盘标记为 LVM 物理卷。</p></li><li><p>物理分区：Physical Extents，简称PE，LVM将每个物理卷分别叫做物理分区的可寻址存储单元，存储单元的大小通常为几MB。磁盘的开头部分为LVM元数据，之后从索引为零开始，每个物理分区的索引依次递增一，按顺序进行分配。</p></li><li><p>卷组：Volume Group，简称VG，物理卷可以组织为卷组。卷组可以由一个或多个物理卷组成，同时系统中可以有多个卷组。创建了卷组之后，该卷组（而不是磁盘）便是表示数据存储的实体。因此，尽管以前是将磁盘从一个系统移动到另一个系统，使用了 LVM 之后，会将卷组从一个系统移动到另一个系统。出于这种原因，通常在一个系统上创建多个卷组会比较方便。</p></li><li><p>逻辑分区：Logical Extents，简称LE，逻辑卷的基本分配单元称为逻辑分区。逻辑分区映射到物理分区，因此，如果物理分区的尺寸小为4MB，那么逻辑分区的尺寸也将为4MB。逻辑卷的大小取决于所分配的逻辑分区数量。</p></li></ul><p><img src="/images/lvm-concept.png" alt="lvm-concept"></p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>CentOS 7/RHEL 7</li></ul><p>建议在安装系统的时候就选择好LVM分区，不然已经有数据的话再选择LVM需要格式化。</p><h2 id="对新增加的硬盘进行分区、格式化"><a href="#对新增加的硬盘进行分区、格式化" class="headerlink" title="对新增加的硬盘进行分区、格式化"></a>对新增加的硬盘进行分区、格式化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在CentOS/RHEL 7中使用</span></span><br><span class="line"></span><br><span class="line">$ fdisk /dev/sda　　　 </span><br><span class="line"><span class="comment">## 继续输入命令： </span></span><br><span class="line"><span class="comment">## p　　　　　　　查看已分区数量</span></span><br><span class="line"><span class="comment">## n　　　　　　　新增加一个分区 </span></span><br><span class="line"><span class="comment">## p　　　　　　　分区类型我们选择为主分区 </span></span><br><span class="line"><span class="comment">##　　　　　　分区号按照默认选择（已经存在的会顺着按下一个分区号生成）</span></span><br><span class="line"><span class="comment">## 回车　　　　　　默认（起始扇区） </span></span><br><span class="line"><span class="comment">## 回车　　　　　　默认（结束扇区） </span></span><br><span class="line"><span class="comment">## t　　　　　　　修改分区类型 </span></span><br><span class="line"><span class="comment">##　　　　　　选分区3 </span></span><br><span class="line"><span class="comment">## 8e　　　　　　修改为LVM（8e就是LVM） </span></span><br><span class="line"><span class="comment">## w　　　　　　写分区表 </span></span><br><span class="line"><span class="comment">## q　　　　　　完成，退出fdisk命令 </span></span><br><span class="line"><span class="comment">##　　系统提示重启。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 开机后，格式化，等待一会儿： </span></span><br><span class="line">$ mkfs.ext3 /dev/sda3</span><br></pre></td></tr></table></figure><h2 id="添加新LVM到已有的LVM组，实现扩容"><a href="#添加新LVM到已有的LVM组，实现扩容" class="headerlink" title="添加新LVM到已有的LVM组，实现扩容"></a>添加新LVM到已有的LVM组，实现扩容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ pvcreate /dev/sda3　　　                              <span class="comment">#创建pv</span></span><br><span class="line"></span><br><span class="line">$ pvdisplay                                             <span class="comment">#查看创建好的pv信息</span></span><br><span class="line"></span><br><span class="line">$ vgdisplay                                             <span class="comment">#查看vg信息，记录需要扩容的vg名称</span></span><br><span class="line"></span><br><span class="line">$ vgcreate vg_test /dev/sdb3                            <span class="comment">#没有则创建</span></span><br><span class="line"></span><br><span class="line">$ vgextend vg_test /dev/sda3                            <span class="comment">#将初始化过的分区加入到虚拟卷组vg_test</span></span><br><span class="line"></span><br><span class="line">$ lvextend -l +20G /dev/mapper/vg_test-root             <span class="comment">#扩展已有卷的容量</span></span><br><span class="line"></span><br><span class="line">$ lvextend -l +100%FREE /dev/mapper/vg_test-root        <span class="comment">#把所有空余的空间全部加入到卷组</span></span><br><span class="line"></span><br><span class="line">$ lvcreate -L 15G -n lv_test vg_test                    <span class="comment">#若初始化，则创建LV</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## CentOS7使用以下命令,进行文件系统的真正扩容</span></span><br><span class="line">$ xfs_growfs /dev/mapper/vg_test-root</span><br><span class="line"></span><br><span class="line"><span class="comment">## CentOS6使用以下命令,进行文件系统的真正扩容</span></span><br><span class="line">$ resize2fs /dev/mapper/vg_test-root</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看新的磁盘空间</span></span><br><span class="line">$ df -h</span><br></pre></td></tr></table></figure><h2 id="LVM常用命令"><a href="#LVM常用命令" class="headerlink" title="LVM常用命令"></a>LVM常用命令</h2><ul><li>lvremove : 移除逻辑卷</li></ul><p>lvremove /dev/vgname/lvname     </p><p>如果该lv已经mount了，lvremove不能使用，必须unmount后才可以使用。</p><ul><li>lvcreate ：创建逻辑卷</li></ul><p>lvcreate –name vol_01  -L  10G vgname</p><p>-L ：指定逻辑卷大小，单位可以是”kKmMgGtT”</p><ul><li>lvextend -L +10G  /dev/vgname/lvname</li></ul><p>给lvname添加10G的容量</p><p>另外一种写法：</p><p>lvcreate –size 40GB –name vol vgname</p><ul><li>vgcreate：创建卷组vg</li></ul><p>vgcreate vg-test /dev/sdb1 /dev/sdb2</p><ul><li>vgremove：强制删除vg，及时vg下有lv，也会被删除</li></ul><p>vgremove vgname -f </p><ul><li>vgreduce ：移除物理卷</li></ul><p>my_volume_group /dev/hda1</p><p>vgreduce –removemissing  vgname </p><ul><li>vgextend ：扩容物理卷</li></ul><p>vgextend vgname   /dev/sdb1(物理卷位置)</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>为了系统启动是自动加载文件系统，需要在 /etc/fstab 添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/vg_test/lv_test   /opt/<span class="built_in">test</span> ext3 defaults 1 2</span><br></pre></td></tr></table></figure><p>有时可能因为逻辑卷为打开而无法启动系统</p><p>以下是系统启动LVM的过程图：</p><p><img src="/images/lvm-run.png" alt="lvm-run"></p><h2 id="自动化脚本例子"><a href="#自动化脚本例子" class="headerlink" title="自动化脚本例子"></a>自动化脚本例子</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Usage: Automatic expand lv with LVM managed disk</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  Setp 1: Add Hard Disk or Storage to Computing unit</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Setp 2: Execute this script with root privilege</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Setp 3: Mind info of this script execution result</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Open the refrigerator door, get the shell script execution environment ready</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Put the elephant into the refrigerator, how the shell scripts works</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Close the refrigerator door, check out the result of execution</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Simetimes, we have to pull new elephant or elephant dung out here, <span class="built_in">unset</span> variables of shell script</span></span><br><span class="line"> </span><br><span class="line">function check_execution_result()&#123;</span><br><span class="line">        if [[ ! -z $RETVAL ]]; then</span><br><span class="line">                unset RETVAL</span><br><span class="line">        fi</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        if [[ $RETVAL -ne 0 ]]; then</span><br><span class="line">                echo execution failed! </span><br><span class="line">                exit $RETVAL</span><br><span class="line">        else</span><br><span class="line">                echo execution successfully! </span><br><span class="line">        fi</span><br><span class="line">        unset RETVAL</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> lsblk --scsi</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lsblk --all</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fd0               2:0    1    4K  0 disk </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sda               8:0    0   40G  0 disk </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ├─sda1            8:1    0  500M  0 part /boot</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> └─sda2            8:2    0 39.5G  0 part </span></span><br><span class="line"><span class="meta">#</span><span class="bash">   ├─centos-swap 253:0    0  3.9G  0 lvm  [SWAP]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   └─centos-root 253:1    0 35.6G  0 lvm  /</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sdb               8:16   0   16G  0 disk </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sr0              11:0    1  6.6G  0 rom  </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Show present scsi disk online</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Q: Why use <span class="string">"xargs"</span> here?</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> A: Convert the text from multi-line single-column into single-line multi-column, <span class="keyword">for</span> sed operation</span></span><br><span class="line">ONLINE_SCSI_DISK_PRESENT=$(lsblk --all | grep disk | grep -v fd | awk '&#123;print $1&#125;' | xargs)</span><br><span class="line"><span class="meta">#</span><span class="bash"> TODO</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For execution this script beyond twice</span></span><br><span class="line">ONLINE_SCSI_DISK_PRESENT=sda</span><br><span class="line"><span class="meta">#</span><span class="bash"> Find new scsi disk online</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TODO figure it out why there is host0? </span></span><br><span class="line">echo "- - -" &gt;/sys/class/scsi_host/host0/scan</span><br><span class="line">echo "- - -" &gt;/sys/class/scsi_host/host1/scan</span><br><span class="line">echo "- - -" &gt;/sys/class/scsi_host/host2/scan</span><br><span class="line"><span class="meta">#</span><span class="bash"> Show new added scsi disk online</span></span><br><span class="line">ONLINE_SCSI_DISK_NEWADD=$(lsblk --all | grep disk | grep -v fd | awk '&#123;print $1&#125;' | xargs echo | sed "s/$ONLINE_SCSI_DISK_PRESENT//g")</span><br><span class="line"><span class="meta">#</span><span class="bash"> Construct disk file with full path</span></span><br><span class="line">echo New Added SCSI Disk: $ONLINE_SCSI_DISK_NEWADD</span><br><span class="line"><span class="meta">#</span><span class="bash"> Get VG Name</span></span><br><span class="line">VG_Name=$(vgdisplay | grep 'VG Name' | awk '&#123;print $NF&#125;')</span><br><span class="line">VG_PATH_TO_EXTEND=$(lvdisplay | grep 'LV Path' | awk '&#123;print $NF&#125;' | grep root)</span><br><span class="line">for BLOCK in $ONLINE_SCSI_DISK_NEWADD; do</span><br><span class="line">    ONLINE_SCSI_DISK_NEWADD_FILENAME="/dev/"$BLOCK</span><br><span class="line">    # end-of-file contents and eof mark must start row1</span><br><span class="line">    fdisk $ONLINE_SCSI_DISK_NEWADD_FILENAME &gt;/dev/null 2&gt;&amp;1&lt;&lt;eof</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line">1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">t</span><br><span class="line">8e</span><br><span class="line">w</span><br><span class="line">eof</span><br><span class="line">    check_execution_result</span><br><span class="line">    LVM_OPERATION_DISK_FILENAME=$ONLINE_SCSI_DISK_NEWADD_FILENAME"1"</span><br><span class="line">    pvcreate $LVM_OPERATION_DISK_FILENAME &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    check_execution_result</span><br><span class="line">    vgextend $VG_Name $LVM_OPERATION_DISK_FILENAME &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    check_execution_result</span><br><span class="line">    lvresize -l +100%FREE $VG_PATH_TO_EXTEND &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    check_execution_result</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> resize2fs - ext2/ext3/ext4 file system resizer</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> xfs_growfs, xfs_info - expand an XFS filesystem</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">[root@hlc7172009 ~]<span class="comment"># resize2fs /dev/mapper/centos-root</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">resize2fs 1.42.9 (28-Dec-2013)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">resize2fs: Bad magic number <span class="keyword">in</span> super-block <span class="keyword">while</span> trying to open /dev/mapper/centos-root</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Couldn<span class="string">'t find valid filesystem superblock.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@hlc7172009 ~]<span class="comment">#</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">[root@hlc7172009 ~]<span class="comment"># xfs_growfs $VG_PATH_TO_EXTEND</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">meta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=2334208 blks</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         =                       sectsz=512   attr=2, projid32bit=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         =                       crc=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">data     =                       bsize=4096   blocks=9336832, imaxpct=25</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         =                       sunit=0      swidth=0 blks</span></span><br><span class="line"><span class="meta">#</span><span class="bash">naming   =version 2              bsize=4096   ascii-ci=0 ftype=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">log</span>      =internal               bsize=4096   blocks=4559, version=2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">realtime =none                   extsz=4096   blocks=0, rtextents=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">data blocks changed from 9336832 to 13530112</span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@hlc7172009 ~]<span class="comment">#</span></span></span><br><span class="line"> </span><br><span class="line">    # Check xfs_info if is installed </span><br><span class="line">    which xfs_info &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -ne 0 ]]; then</span><br><span class="line">        yum install xfsprogs -y &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    fi</span><br><span class="line">    # end Check xfs_info if is installed</span><br><span class="line"> </span><br><span class="line">    # Check VG_PATH_TO_EXTEND if is xfs filesystem</span><br><span class="line">    xfs_info $VG_PATH_TO_EXTEND &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -ne 0 ]]; then</span><br><span class="line">        # is not xfs</span><br><span class="line">        VG_PATH_TO_EXTEND_IS_NOT_XFS=0</span><br><span class="line">    else </span><br><span class="line">        # is xfs</span><br><span class="line">        VG_PATH_TO_EXTEND_IS_NOT_XFS=1</span><br><span class="line">    fi</span><br><span class="line">    # end Check VG_PATH_TO_EXTEND if is xfs filesystem</span><br><span class="line"> </span><br><span class="line">    # TODO CentOS7 default filesystem is xfs, so we can check it out by OS if is CentOS7</span><br><span class="line"> </span><br><span class="line">    if [[ $VG_PATH_TO_EXTEND_IS_NOT_XFS ]]; then</span><br><span class="line">        # is xfs</span><br><span class="line">        xfs_growfs $VG_PATH_TO_EXTEND &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    else</span><br><span class="line">        # is not xfs</span><br><span class="line">        resize2fs $VG_PATH_TO_EXTEND &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    fi</span><br><span class="line">    check_execution_result</span><br><span class="line">    df -h</span><br><span class="line">    lsblk --all</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>添加磁盘前：</p><p><img src="/images/lvm-before.jpg" alt="lvm-before"></p><p>添加磁盘后运行脚本后：</p><p><img src="/images/lvm-after.jpg" alt="lvm-after"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是LVM初始化和扩容等操作&lt;/p&gt;
&lt;h2 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LVM是逻辑盘卷管理（Logical Volume 
      
    
    </summary>
    
      <category term="LVM使用" scheme="http://yoursite.com/categories/LVM%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="lvm" scheme="http://yoursite.com/tags/lvm/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建博客</title>
    <link href="http://yoursite.com/2018/02/12/hexo/"/>
    <id>http://yoursite.com/2018/02/12/hexo/</id>
    <published>2018-02-11T16:00:00.000Z</published>
    <updated>2018-02-25T03:25:22.118Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是使用Hexo配合Github，利用github提供的域名来搭建自己的私人博客</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>用wget命令下载最新版(或指定版本)的Node.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://nodejs.org/dist/v9.3.0/node-v9.3.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>最新版本请查看<a href="https://nodejs.org/dist" target="_blank" rel="noopener">下载地址</a></p><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xz -d node-v9.3.0-linux-x64.tar.xz  //解压为tar文件</span><br><span class="line">$ tar -xvf node-v9.3.0-linux-x64.tar</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvJf node-v9.3.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>然后移动文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mv  node-v9.3.0-linux-x64 node-v9.3.0</span><br><span class="line">$ mv  node-v9.3.0 /usr/<span class="built_in">local</span>/node</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 编辑 /etc/profile (使用vim)</span></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment">## 在底部添加 PATH 变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/node/bin</span><br><span class="line"><span class="comment"># 保存退出，先按exit键，再按shift+：</span></span><br><span class="line">:wq</span><br><span class="line"><span class="comment">## 最后保存并使其生效即可</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="安装Hexo主程序"><a href="#安装Hexo主程序" class="headerlink" title="安装Hexo主程序"></a>安装Hexo主程序</h3><p>自行选择安装目录，这里我直接安装在自己用户的家目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建目录</span></span><br><span class="line">$ mkdir -p ~/hexo</span><br><span class="line"></span><br><span class="line"><span class="comment">## 切换目录</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/hexo</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装Git(已安装可跳过)</span></span><br><span class="line">$ yum install -y git git-core</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装 Hexo</span></span><br><span class="line">$ npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment">## 初始化Hexo</span></span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><h3 id="安装Hexo相关插件"><a href="#安装Hexo相关插件" class="headerlink" title="安装Hexo相关插件"></a>安装Hexo相关插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-archive --save</span><br><span class="line">$ npm install hexo-generator-category --save</span><br><span class="line">$ npm install hexo-generator-tag --save</span><br><span class="line">$ npm install hexo-server --save</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ npm install hexo-deployer-heroku --save</span><br><span class="line">$ npm install hexo-deployer-rsync --save</span><br><span class="line">$ npm install hexo-deployer-openshift --save</span><br><span class="line">$ npm install hexo-renderer-marked --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="Hexo配置文件模板"><a href="#Hexo配置文件模板" class="headerlink" title="Hexo配置文件模板"></a>Hexo配置文件模板</h3><p>Hexo配置文件采用的是yaml语法格式，若修改请按照语法格式修改</p><p>模板例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Hexo</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">author: Jayden</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">''</span></span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment">#theme: landscape</span></span><br><span class="line">theme: archer</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:Polaris0112/Polaris0112.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: <span class="string">'站点更新:&#123;&#123;now("YYYY-MM-DD HH/mm/ss")&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## archer</span></span><br><span class="line">jsonContent:</span><br><span class="line">  meta: <span class="literal">true</span></span><br><span class="line">  pages: <span class="literal">false</span></span><br><span class="line">  posts:</span><br><span class="line">    title: <span class="literal">true</span></span><br><span class="line">    date: <span class="literal">true</span></span><br><span class="line">    path: <span class="literal">true</span></span><br><span class="line">    text: <span class="literal">false</span></span><br><span class="line">    raw: <span class="literal">false</span></span><br><span class="line">    content: <span class="literal">false</span></span><br><span class="line">    slug: <span class="literal">false</span></span><br><span class="line">    updated: <span class="literal">false</span></span><br><span class="line">    comments: <span class="literal">false</span></span><br><span class="line">    link: <span class="literal">false</span></span><br><span class="line">    permalink: <span class="literal">true</span></span><br><span class="line">    excerpt: <span class="literal">false</span></span><br><span class="line">    categories: <span class="literal">true</span></span><br><span class="line">    tags: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这个模板例子我使用的是archer，需要安装主题模板才能使用，该主题的<a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">Github地址</a></p><p>安装命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在Hexo目录下执行</span></span><br><span class="line">$ npm install hexo-generator-json-content --save &amp;&amp; git <span class="built_in">clone</span> https://github.com/fi3ework/hexo-theme-archer.git themes/archer</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改Hexo目录下的 _config.yml 的 theme 字段为 archer</span></span><br><span class="line">theme: archer</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">更多主题</a></p><p>关于主题更换，可以从以上网址进入对应的Github仓库，都有详细的更换主题说明。</p><h2 id="接入Github"><a href="#接入Github" class="headerlink" title="接入Github"></a>接入Github</h2><p>先在Github上注册一个账号，然后在Setting相关的地方设置<code>SSH and GPG key</code>添加自己的公钥，在服务器保留私钥。</p><p>设置好后自己可以先创建一个测试仓库试试clone和push，没问题再进行下一步。</p><h3 id="创建博客项目"><a href="#创建博客项目" class="headerlink" title="创建博客项目"></a>创建博客项目</h3><p>创建一个新项目，项目名称为 用户名.github.io ，比如我的Github用户名是polaris0112，则创建的项目名为polaris0112.github.io</p><p>然后在Github该仓库中绿色按钮<code>Clone or download</code>选择<code>Clone with SSH</code>复制对应git uri。</p><p>编辑Hexo目录下的_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:Polaris0112/Polaris0112.github.io.git     <span class="comment">##这一行，复制替换上一步得到的git uri。</span></span><br><span class="line">  branch: master</span><br><span class="line">  message: <span class="string">'站点更新:&#123;&#123;now("YYYY-MM-DD HH/mm/ss")&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>这里，repo就是你创建的博客项目，以后修改之后就是上传到这个仓库然后给外网访问。</p><p>最后一步，编译，上传静态代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 编译</span></span><br><span class="line">hexo generate //可以简写 hexo g</span><br><span class="line"><span class="comment">## 在主机的hexo目录下 执行以下命令将自动更新到Github</span></span><br><span class="line">hexo deploy //可以简写 hexo d</span><br></pre></td></tr></table></figure><p>如果 hexo d 报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found:</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##清空你hexo/public里的内容，可以在每次修改配置文件后清除一下</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment">## 多条命令可以一块输入</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>这样就配置好了，可以使用<a href="https://polaris0112.github.io/" target="_blank" rel="noopener">https://polaris0112.github.io/</a> （使用你自己的域名）来访问。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是使用Hexo配合Github，利用github提供的域名来搭建自己的私人博客&lt;/p&gt;
&lt;h2 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;安装Node
      
    
    </summary>
    
      <category term="Hexo+Github搭建博客" scheme="http://yoursite.com/categories/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>小灰机-4.0.8下载</title>
    <link href="http://yoursite.com/2018/01/20/shadowsocks/"/>
    <id>http://yoursite.com/2018/01/20/shadowsocks/</id>
    <published>2018-01-19T16:00:00.000Z</published>
    <updated>2018-02-25T02:45:02.611Z</updated>
    
    <content type="html"><![CDATA[<p>本帖子记录的是小灰机-4.0.8下载地址</p><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p><a href="https://pan.baidu.com/s/1i7pKp8L" target="_blank" rel="noopener">https://pan.baidu.com/s/1i7pKp8L</a></p><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p><strong>pwd7</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本帖子记录的是小灰机-4.0.8下载地址&lt;/p&gt;
&lt;h2 id=&quot;地址&quot;&gt;&lt;a href=&quot;#地址&quot; class=&quot;headerlink&quot; title=&quot;地址&quot;&gt;&lt;/a&gt;地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1i7pKp8L&quot;
      
    
    </summary>
    
      <category term="$$-4.0.8" scheme="http://yoursite.com/categories/4-0-8/"/>
    
    
      <category term="$$" scheme="http://yoursite.com/tags//"/>
    
      <category term="GFW" scheme="http://yoursite.com/tags/GFW/"/>
    
  </entry>
  
</feed>
